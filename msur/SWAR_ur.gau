@ Maximo Camacho 
  www.um.es/econometria/Maximo
  April, 21th 2010  @

@ This GAUSS file computes out-of sample estimation
       of the slope parameter in an AR(1) model for
       US output growth rate
        dYt = C(st) + A dYt-1 + Et
              Et ~ N(0,V)         @
new;
format/rd 1,4;
library optmum,pgraph;
graphset;optset;
#include optmum.ext;
_opalgr=2;_opmiter=500;__output=2;_oprteps=0;
_pcolor=4|3;_pltype=6;_opgtol=1e-5;
_pmcolor=0|0|1|1|1|0|0|0|15;
pqgwin many; 
/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                 LOADING DATA (in levels)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
load yy[252,2]=gdp.txt;
yy=yy[.,2];
dy=(ln(yy[2:rows(yy)])-ln(yy[1:rows(yy)-1]));
y=ln(yy[2:rows(yy)]);
dy=100*dy;
capt=rows(dy);

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++
           ADJUST CONTROL SPECIFICATIONS
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
smooth=1;      @ smooth=1 to calculate smoothed probs @
graphs=1;      @ graphs=0 to skip graphs of probs @
pphi=1;        @ ps is the number of lags in autoregression for y @
je=1;          @ je=0 to skip hessian calculations @
nk=pphi+1;     @ nk is the first observation for which the
                 likelihood will be evaluated @
captst=capt-pphi;       @ captst is the effective sample size @
skif=zeros(captst,2);   @ skif is the matrix of filtered probs @
skis=zeros(captst,2);   @ skis is the matrix of smoothed probs @
dye=zeros(captst,1);    @ fitted endogenous variable @
dys=zeros(captst,2);    @ within regime fitted endogenous variable @
erro=zeros(captst,2);   @ in-sample errors conditional to the state @
mse=zeros(captst,1);    @ in-sample errors @
t=seqa(1,0.1,captst);
ks=0;

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                 INITIAL PARAMS' VALUES
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
c1=0.6;c2=-0.9;
phi1=0.3;
sig1=0.9;
p11=4;p22=2;

startval=c1|c2|phi1*ones(pphi,1)|sig1|p11|p22;
nth=rows(startval);     @ number of params to be estimated @

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++
             OPTIMIZATION PROCEDURES
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
{x,ff,gg,hh}=optprt(optmum(&ofn,startval));
mse=dy[nk:capt]-dye;
thn=trans(x);

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    Standard deviations
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
if je ne 0;
   ks=1;
   he=gradfd(&ofn,x)'gradfd(&ofn,x);
   ks=0;
   hi=invpd(he);
   stdor=diag(hi)^.5;
   gr=gradfd(&trans,x);
   Hfin=gr*hi*gr';
   std=diag(Hfin)^.5;
endif;

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                    GRAHPS
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
cls;
if graphs ne 0;
  @ title("log-level");
   xy(seqa(1,1,rows(y)),y);   
   title("log-differences");
   xy(seqa(1,1,rows(dy)),dy);@
   title("Filtered probabilities of state 2");   
   xy(seqa(1,1,rows(skif)),skif[.,2]);
   if smooth ne 0;
      title("Smoothed probabilities of state 2");
      xy(seqa(1,1,rows(skis)),skis[.,2]);
   endif;
endif;

/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  SOME PROCEDURES HERE
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
proc ofn(th);  @ this proc evaluates filter probs and likelihood @
   local th2,yn,sig,pm,eta,chsi,it,f,fit,fx,aa,fun;

   th2=trans(th);
   yn={};
   it=1;
   do while it<=pphi;
      yn=yn~dy[nk-it:capt-it,1];
      it=it+1;
   endo;
   dye=(th2[1]+yn*th2[2+1:2+pphi])~
       (th2[2]+yn*th2[2+1:2+pphi]); 
   eta=dy[nk:capt]-dye;

   sig=th2[nth-2].*ones(captst,2);   
   eta=((eta)^2)./sig;

   eta=(1./sqrt(sig)).*exp(-eta/2);

   aa=minc(eta);
   if aa<1e-20;
     f=-100000;
     goto labb;
   endif;

   pm=(th2[nth-1]~(1-th2[nth]))|((1-th2[nth-1])~th2[nth]);
   chsi=0.5|0.5;
   
   fun={};
   f=0;  @ filter iteration @
   it=1;
   do until it>captst;
     fx=chsi.*eta[it,.]';
     fit=sumc(fx);
     skif[it,.]=fx'/fit;
     f=f+ln(fit);
     fun=fun|ln(fit);
     chsi=pm*fx/fit;
   it=it+1;
   endo;
   dys=dye;
   dye=sumc((dys.*skif)');


 if smooth ne 0;  @ Smmothed probabilities if desired @
    skis=fsmooth(skif,pm);
 endif;

 labb:
 if ks==1;
    retp(fun);
 else;
    retp(-f);
 endif;
endp;

proc trans(ja);
 local ja2,ncont;
   ja2=ja;
   ncont=2+pphi;
   ja2[ncont+1]=ja2[ncont+1]^2;
   ncont=ncont+1;
   ja2[ncont+1]=ja[ncont+1]^2/(1+ja[ncont+1]^2);
   ja2[ncont+2]=ja[ncont+2]^2/(1+ja[ncont+2]^2);
 retp(ja2);
endp;

proc fsmooth(skifn,pmn);
   local skisn,it,ihk,hk,ns,n;
   ns=2;n=2;
   skisn=zeros(captst,ns);
   skisn[captst,.]=skifn[captst,.];
   it=1;
   do until it==captst;
      if minc(skif[captst-it,.]') > 1.e-150;
         skisn[captst-it,.]=skifn[captst-it,.].*
               ((skisn[captst-it+1,.]./(skifn[captst-it,.]*pmn'))*pmn);
      else;   @ adjust code so as not to divide by zero @
          hk=skifn[captst-it,.]*pmn';
          ihk=1;
          do until ihk > n;
              if hk[1,ihk] > 1.e-150;
                 hk[1,ihk] = skisn[captst-it+1,ihk]/hk[1,ihk];
              else;
                 hk[1,ihk] = 0;
              endif;
          ihk = ihk + 1;
          endo;
          skisn[captst-it,.] = skifn[captst-it,.].*(hk*pmn);
      endif;
   it = it+1;
   endo;

   retp(skisn);
endp;

end;