
/*
**> adf_2br
**  Reference:
**  Narayan, P. K. and Popp, S. (NP) (2010),
**  "A new unit root test with two structural breaks in level and slope at unknown time",
**  Journal of Applied Statistics 37, 1425-1438.
**
**  Forat:  { tstat, tb1, tb2, p, cv } = ADF_2break_est(y, model[, pmax, ic, trimm]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**           model   - 	1=Model A: break in level
**                      2=Model C: break in level and trend
**           pmax    -  Optional, maximum number of lags for Dy; 0=no lags
**           ic      -  Optional, information Criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**			 trimm   - 	Optional, trimming rate
**                      Default 10% trimmage is defined as in ZA (1992) and LS (2003).
**
**  Output:  tstat   - minimum test statistic
**			 tb1     - first break location
**			 tb2     - second break location
**			 p       - number of lags selected by choosen information criterion
**			 cv      - 1%, 5%, 10% critical values for the chosen model
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

proc(7) = ADF_2breaks_est(y, model, pmax, ic, trimm);
    local t, tb1, tb2, tb1_min, tb2_min, ADF_min, T1, T2, dc, dt, du1, du2, dt1, dt2, z;
    local taup, aicp, sicp, tstatp, dy, y1, z1, lmat, j, p;
    local dep, ldy, ly, lz, x, stat;
    local b, e1, sig2, se, ssr, cv, p_keep, b_mat, se_mat, b_keep, se_keep;
    
    
    t = rows(y);
    tb1_min = 0;
    tb2_min = 0;
    ADF_min = 1000;
    
    T1 = round(trimm * t);
    T2 = round((1 - trimm) * t);
    t1 = maxc((3 + pmax)|ceil(trimm * t));
    t2 = minc((t - 3 -pmax)|floor((1 - trimm) * t));
    
    if T1 < pmax+2;
        T1 = pmax + 3;
    endif;
    
    tb1 = T1;
    
    do while tb1 <= T2;
        // Bounds as in LS
        if model == 1;
            tb2 = tb1 + 2;
        endif;    
        
        if model == 2;
            tb2 = tb1 + 3;
        endif;
        
        do while tb2 <= T2;
            
            // Deterministic term=constant
            dc = ones(t, 1);               
            
            // Deterministic term=trend
            dt = seqa(1, 1, t);             
            
            if model == 1;
                du1 = zeros(tb1, 1)|ones(t - tb1, 1);
                du2 = zeros(tb2, 1)|ones(t - tb2, 1);
                z = dc~dt~du1~du2;
            endif;
            
            if model == 2;
                du1 = zeros(tb1, 1)|ones(t - tb1, 1);
                du2 = zeros(tb2, 1)|ones(t - tb2, 1);
                dt1 = zeros(tb1, 1)|seqa(1, 1, (t - tb1));
                dt2 = zeros(tb2, 1)|seqa(1, 1, (t - tb2));
                z = dc~dt~du1~du2~dt1~dt2;
            endif;
            
            t = rows(y);
            taup = zeros(pmax + 1, 1);
            aicp = zeros(pmax + 1, 1);
            sicp = zeros(pmax + 1, 1);
            tstatp = zeros(pmax + 1, 1);
            b_mat =  zeros(pmax + 1, 1 + cols(z) + pmax);
            se_mat = b_mat;
            
            dy = trimr(diff(y, 1), 1, 0);
            y1 = trimr(lagn(y, 1), 1, 0);
            z1 = trimr(lagn(z, 1), 1, 0);
            
            lmat = zeros(rows(dy), pmax);
            
            j = 1;
            
            do while j <= pmax;
                lmat[., j] = lagn(dy, j);
                j = j + 1;
            endo;
            
            p = 0;
            
            do while p <= pmax;
                dep = trimr(dy, p + 1, 0);
                ldy = trimr(lmat, p + 1, 0);
                ly = trimr(y1, p + 1, 0);
                lz = trimr(z1, p + 1, 0);
                
                if p == 0;
                    x = ly~lz;
                elseif p > 0;
                    x = ly~lz~ldy[., 1:p];
                endif;
                
                {b, e1, sig2, se, ssr} = myols(dep, x);
                
                // Store estimates
                b_mat[p+1, 1:1+cols(z)+p] = b';
                se_mat[p+1, 1:1+cols(z)+p] = se';
                
                taup[p+1] = b[1]/se[1];
                aicp[p+1] = ln(e1'e1/rows(x)) + 2 * (cols(x) + 2)/rows(x);
                sicp[p+1] = ln(e1'e1/rows(x)) + (cols(x) + 2) * ln(rows(x))/rows(x);
                tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
                p = p + 1;
            endo;
            
            p  = _get_lag(ic, pmax, aicp, sicp, tstatp);
            
            stat = taup[p];
            if stat < ADF_min;
                
                // First break date
                tb1_min = tb1;
                
                // Second break date
                tb2_min=tb2;  
                
                // T-statistic with breaks
                ADF_min = stat;   
                
                // Store lag
                p_keep = p;
                b_keep = b_mat[p, 1:1+cols(z)+p-1];
            
                // Store se estimates
                se_keep = se_mat[p, 1:1+cols(z)+p-1];
                
            endif;
            
            tb2 = tb2 + 1;
        endo;
        
        tb1 = tb1 + 1;
    endo;
    
    // Critical Values (see, Narayan & Popp, 2010, Table 3)
    if model == 1;
        if T <= 50;
            cv = -5.259|-4.514|-4.143;
        endif;
        
        if 50 < T and T <= 200;
            cv = -4.958|-4.316|-3.980;
        endif;
        
        if 200 < T and T <= 400;
            cv = -4.731|-4.136|-3.825;
        endif;
        
        if 400 < T;
            cv = -4.672|-4.081|-3.772;
        endif;
    endif;
    
    if model == 2;
        if T <= 50;
            cv = -5.949|-5.181|-4.789;
        endif;
        
        if 50 < T and T <= 200;
            cv = -5.576|-4.937|-4.596;
        endif;
        
        if 200 < T and T <= 400;
            cv = -5.318|-4.741|-4.430;
        endif;
        
        if 400 < T;
            cv = -5.287|-4.692|-4.396;
        endif;
    endif;
    
    local clm1, clm2, modl_str, ic_str, fmt;
    ic_str = _printIC(ic);
    modl_str = _printModel2(model);

    clm1 = "Test:"$|"Ho:"$|"Lag Selection:"$|"Model:";
    clm2 = "Two breaks ADF test"$|"Unit root"$|ic_str$|modl_str;
    fmt = "%-20s %-20s";
    sprintf(fmt, clm1, clm2);
    
    sprintf("Trimmage is equal to %.2f", 100*trimm) "%";
     
    // Print results & Critical values
    local hd, tmp1;
    hd = "ADF-stat"$|"Break Date One"$|"Fraction One"$|"Break Date Two"$|"Fraction Two"$|"Lag";
    tmp1 = ADF_min|tb1_min|tb1_min/rows(y)|tb2_min|tb2_min/rows(y)|p_keep-1;
    
    #ifminkernelversion(20)
        sprintf("%14s %14.4f", hd, tmp1);
        print;
        print "Critical Values:";
        sprintf("%14s", "1%"$~"5%"$~"10%");
        sprintf("%14.2f", cv');
        print;
    #else;
        hd$~(ntos(tmp1, 4));
        print "Critical Values:";
        ("1%"$~"5%"$~"10%")$|ntos(cv',5);
    #endif;
    
    // Print conclusion
    if ADF_min < cv[1];
        print "Reject the null hypothesis of a unit root at the 1% level.";
    elseif ADF_min < cv[2];
           print "Reject the null hypothesis of a unit root at the 5% level.";
    elseif ADF_min < cv[3];  
           print "Reject the null hypothesis of a unit root at the 10% level.";
    else;  
           print "Cannot reject the null hypothesis of a unit root.";
    endif;
    print;
    
    retp(ADF_min, tb1_min, tb2_min, p_keep - 1, cv, b_keep, se_keep);
endp;
