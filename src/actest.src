/*
** This code is based on the original ACtest.prg file provide by
** Abdulnasser Hatemi-J
*/
/*
**> asymCause
**
**  The program tests the hypothesis that the 
**  z does not cause the y. 
**
**  Format:  { Wstat, WcriticalvalsS, ICOrder, Azdsys } = asymCause(y, z [, pos, intorder, ln_form, maxlags, infocrit, bootmaxiter, fullprint] ) ;
**
**  Input:   y	              -    TN x 1 vector, data
**
**           z                -    TN x 1 vector, data 
**
**           pos              -    Optional, specifies whether to use positive or 
**                                 negative component. Default = 1.
**                                 0 = Negative
**                                 1 = Positive                               
**
**           infocrit         -    Optional, information criteria. Default = 3.
**                                 1 = AIC
**                                 2 = AICC
**                                 3 = SBC
**                                 4 = HQC
**                                 5 = HJC
**                                 6 = Use maxloags
**           
**           intorder         -    Optional, order of integration to adjust for 
**                                 unit roots. 
**                                 Default = 0.
**
**           ln_form          -    Optional, specifies to use data in log form.
**                                 Default = 0.
**                                 0 = No log form.
**                                 1 = Log form.
**
**           maxlags          -    Optional, maximum number of lags. Default = 4.
**
**           bootmaxiter      -    Optional, number of bootstrap iterations. Default = 1000.
**
**           fullprint        -    Optional, print full output including the Ahat predications and 
**                                 negative/positive components. 
**
**  Output:  Wstat            -    Wald statistic. 
**
**			 WcriticalvalsS   -    Bootstrap 1%, 5%, and 10% critical values for the Wald statistic. 
**
**           ICOrder          -    Optimal number of lags based on the information criteria. 
**
**           Azdsys           -    Number of lags after the added lags for integration. 
*/

proc(4) = asymCause(y, z, ...);
    local pos, ln_form, maxlags, infocrit, intorder, bootmaxiter, dt_vec, fullprint;
    
    /*
    ** Default values
    ** pos               1 to use positive components
    ** ln_form           0 for no log form
    ** intorder          0 for no unit root lags
    ** maxlags           4 
    ** infocrit          3 to use SBC
    ** bootmaxiter       1000 bootstraps
    ** fullprint         Print the full output including Ahat and components. 
    */
       
    { pos, infocrit, intorder, ln_form, maxlags, bootmaxiter, fullprint } = dynargsGet(1|7, 1, 3, 0, 0, 8, 1000, 0);
    
    // Look for a date vector in data
    { dt_vec, y } =_checkfordate(y);
    { dt_vec, z } =_checkfordate(z);
    
    // Call testing procedure
    retp(asymCasualitytest(y~z, ln_form, maxlags, infocrit, intorder, bootmaxiter, pos, fullprint));
endp;

proc(4) = asymCasualitytest(y, ln_form, maxlags, infocrit, intorder, bootmaxiter, pos, fullprint);
    local CUMDYZpc, CUMDYZnc, z, addlags, numvars, yT, yLags, xT,
        yS, xS, Rvector1, Rmatrix1, AhatTU, leverageTU, AhatTR, leverageTR,
        AhatSR, leverageSR, Wstat , WCriticalvalsS, Azdsys, ICorder,
        rejectnullbootS, rejectnullchi, icA, onelA, nocando, top;
    
    // Find cumulative positive and negative components
    { CUMDYZpc, CUMDYZnc } = cumulativeComp(y, ln_form, fullprint);
    
    if pos;
        // Allows for causality test between positive components.
        z=CUMDYZpc;
    else;
        // Allows for causality test between negative components.
        z=CUMDYZnc;
    endif;
    
    // Add lag for integrated model
    addlags = intorder;
    
    // Count number of variables
    numvars = cols(z);
    
    // Select lags
    { ICOrder, icA, onelA, nocando } = lag_length2(z, 1, maxlags, infocrit);
    
    // Lag data for VAR
    { yT, ylags } = varlags(z, (ICorder + addlags));
    
    // Add constant and create independent variables
    xT = ones(rows(yT),1)~ylags;
    
    // Lag data for VAR without added lag
    { yS, ylags } = varlags(z, ICorder);
    
    // Add constant and create independent variables
    // without added lags
    xS = ones(rows(yS), 1)~ylags;
    
    // Get restrictions
    { Rvector1, Rmatrix1 } = rstrctvm(numvars, ICorder, addlags);
    
    // Estimate parameters
    { AhatTU, leverageTU } = estvar_params(yT, XT, 0, 0, ICorder, addlags);
    { AhatTR, leverageTR } = estvar_params(yT, XT, 1, Rvector1, ICorder, addlags);
    { AhatSR, leverageSR } = estvar_params(yS, XS, 1, Rvector1[.,1:(1+numvars*ICorder)], ICorder, 0);
    
    // Adjust for added lags
    If addlags > 0;
        AhatSR  = AhatSR~zeros(numvars, numvars*addlags);
    endif;
    
    if fullprint;
    sprintf("%s", " AhatT estimated parameters"); 
    top = ""$~"Unrestricted"$~""$~"Restricted";
     print "==============================================================";
    sprintf("%15s", top);
    sprintf("%15.2f", AhatTU'~AhatTR');
     print "==============================================================";
    endif;
    
    
    // Find test statistics
    Wstat = W_Test(yT, XT, AhatTU, Rmatrix1);
    
    // Bootstrap critival values
    WcriticalvalsS = Bootstrap_Toda(yT, XT, z[1:(ICorder + addlags),.], AhatSR,
        leverageSR, ICorder, addlags, bootmaxiter, Rmatrix1);
    
    // Rejection of null
    rejectnullchi = (cdfchic(Wstat, ICorder).<0.01) | (cdfchic(Wstat, ICorder).<0.05) | (cdfchic(Wstat, ICorder).<0.10);
    rejectnullbootS = (Wstat.>WcriticalvalsS[1,.]) | (Wstat.>WcriticalvalsS[2,.]) | (Wstat.>WcriticalvalsS[3,.]);

    Azdsys = Azd(ICorder);
    
    
    // Print results
    _printHeaderASYM(infocrit, pos);
     local side, stats, dec, colwidth;
    side = "W-stat:";
    stats = Wstat;
    dec = 3;
    colwidth = 15;
    // Print statistics
    _printStatsTable("", side, stats, WcriticalvalsS, dec, colwidth, 0, ICorder); 
    // Print conclusions
    _printConclusion(Wstat, WcriticalvalsS, 1, "non-causality");
    retp(Wstat, WcriticalvalsS, ICOrder, Azdsys);
endp;


/*
**  { rvector1, rmatrix1 } = rstrctvm(numvars, varorder, addlags)
**
**  Author: Scott Hacker (in cooperation with A. Hatemi-J)
**
**  Input:
**        Numvars     Scalar, number of variables in VAR sytem.
**
**        Varorder    Scalar, order of the VAR system.
**          
**        addlags     Scalar, number of additional lags.
**
**  Output:
**        Rvector1    A row vector corresponding to the coefficients in the the first row of a VAR system,
**                    with 1 indicating where a 0 restriction is placed and 0 indicating not.
**
**       Rmatrix1:    Matrix with each row indicating where one constraint is placed on
**                    a vectorization of the coefficients in a VAR system. A 1 indicates which coefficient is
**                    restricted to zero; 0 is given otherwise.
*/
proc (2) = rstrctvm(numvars, varorder, addlags);
    local rvector1, rmatrix1, ordrcntr, varcntr;
    
    rvector1 = zeros(1, 1+numvars*(varorder + addlags));
    rmatrix1 = zeros(varorder,(1+numvars*(varorder+addlags))*numvars);
    
    ordrcntr = 1;
    do until ordrcntr > varorder;
        rvector1[1, 1+(ordrcntr-1)*numvars+2] = 1;
        rmatrix1[ordrcntr, 1+((ordrcntr-1)*numvars+2)*numvars] = 1;
        ordrcntr = ordrcntr + 1;
    endo;
    
    retp(rvector1, rmatrix1);
endp;


/*
**  indx = azd(addlags)
**
**  Author: Scott Hacker
**
**  Input:
**      addlags     Number of lags to be added.
**
**  Output:
**      indx        New indx.
*/
proc (1) = azd(addlags);
    local indx;
    
    indx= 1;
    
    do until indx > addlags;
        indx = indx + 1;
    endo;
    
    retp(indx);
endp;

/*

**   Author: Alan G. Isaac
**   last update: 5 Dec 95      previous: 15 June 94
**   Format
**          { x, xlags } = varlags(var, lags)
**   Input
**        var       T x K matrix
**
**        lags      Scalar, number of lags of var (a positive integer)
**
**   Output
**          x       (T - lags) x K matrix, the last T-lags rows of var.
**
**          xlags   (T - lags) x lags*cols(var) matrix,
**                  being the 1st through lags-th
**                  values of var corresponding to the values in x
**                  i.e, the appropriate rows of x(-1)~x(-2)~etc.
*/
proc (2) = varlags(var, lags);
    local xlags;
    
    xlags = shiftr((ones(1, lags) .*. var)', seqa(1-lags, 1, lags)
        .*. ones(cols(var), 1), miss(0, 0))';
    
    retp(trimr(var, lags, 0), trimr(xlags, 0, lags));
endp;


/*
**  Format :        { Ahat, leverage } = estvar_params(y, X, restrict, rvector1, order, addlags);
**
**  Author:         Scott Hacker
**
**  Input:
**                  
**      y           Data matrix adjusted for lags. Each column is a vector of 
**                  observations on one. endogenous variable. Currently only works for 2 endog. 
**                  variables.
**      
**      X           Vector, a column of ones appended to a matrix of lagged values for y.
**
**      restrict    Scalar, 1 means restrict the coefficient estimates so there is no Granger causality
**                  0 means don't do that restriction.
**
**      rvector1    Row vector noting which variable coefficients are restricted to zero (1 indicates
**                  where the restriction is).
**
**      order       Scalar, order of var system. This should be = 1 or 2.
**
**      addlags     Additional lags (should be equal to maximum integration order);
**
**  Output:
**      Ahat        Estimated matrix of coefficient parameters
**
**      leverage    This is calculated appropriately only for restricted cases 
**                  (for bootstraps).
*/

proc (2) = estvar_params(y, X, restrict, rvector1, order, addlags);
    local numvars, maxlag, T, Xrestr1, Ahatrestr1, INVXTXXT2, leverage2, INVXTXXTrest1,  leverage, Ahat, Ahat2,i;
    numvars = cols(y);                 		@ # endog vars- currently this program only works for 2 @
    maxlag = order + addlags;
    T=rows(y);
    If restrict == 1;
        INVXTXXT2 = Inv(X'*X)*X';
        Ahat2 = (INVXTXXT2*Y[. , 2:numvars])';
        /*   H2 = X*INVXTXXT2;
        leverage2 = diag(H2); */
        leverage2= zeros(rows(X),1);
        i = 1;
        do until i > rows(X);
            leverage2[i,1] = X[i,.]*INVXTXXT2[.,i];
            i = i+1;
        endo;
        Xrestr1 = (delif(X',rvector1'))';
        INVXTXXTrest1 =  Inv(Xrestr1'*Xrestr1)*Xrestr1';
        Ahatrestr1 =  (INVXTXXTrest1*Y[.,1])';
        /*        Hrestr1 = Xrestr1*INVXTXXTrest1;
        leverage = diag(Hrestr1)~leverage2;*/
        
        leverage= zeros(rows(Xrestr1),1);
        i = 1;
        do until i > rows(Xrestr1);
            leverage[i,1] = Xrestr1[i,.]*INVXTXXTrest1[.,i];
            i = i+1;
        endo;
        leverage = leverage~leverage2;
        
        Ahat = (Insrtzero(Ahatrestr1',rvector1'))'|Ahat2;
        
    else;
        Ahat = (Inv(X'*X)*(X'*Y))';
        leverage = ones(1,2);  /* this statement just provides some arbitrary (meaningless) values for the leverage;
        leverage is not expected to be used under these circumstances (the unrestricted case). */
    endif;
    retp(Ahat, leverage);
endp;

/*
**  Format :        newv = insrtzero(orig, pattern);
**
**  Author:         Scott Hacker
**
**  Input:
**      orig        Vector, original vector in which zeros will be placed.
**
**      pattern     Vector denoting which elements in the new vector will 
**                  have the inserted zeros.
**
**  Output:
**      new         Vector, the new vector with zeros inserted according the 
**                  pattern vector
*/
proc (1) = insrtzero(orig, pattern);
    local indx, newv, insrtpts;
    insrtpts = indexcat(pattern,1);
    newv = orig;
    indx= 1;
    do until indx > rows(insrtpts);
        if insrtpts[indx] == 1;
            newv = 0;
        else;
            if insrtpts[indx] > rows(newv);
                newv = newv|0;
            else;
                newv = newv[1:(insrtpts[indx]-1),.]|0|newv[insrtpts[indx]:rows(newv),.];
            endif;
        endif;
        indx = indx+1;
    endo;
    retp(newv);
endp;


/*
**  Format :
**              Wstat = W_test(Y, X, Ahat, Rmatrix1);
**
**  Author:     Scott Hacker
**
**  Input:
**  Y           Data matrix adjusted for lags. Each column is a vector of observations on one
**              endogenous variable.
**
**  X           A column of ones appended to a matrix of lagged values for y.
**
**  Ahat        Matrix of unrestricted coefficient estimates
**
**  Rmatrix1    Matrix of restrictions
**
**  Output:
**  Wstat       Vector of Wald statistics
*/
proc (1) = W_test(Y, X, Ahat, Rmatrix1);
    local RESunrestr, Estvarcov, vecAhat, f1, InvXprX, Wstat;
    
    
    RESunrestr = Y - X*Ahat';
    Estvarcov = (RESunrestr'RESunrestr)/(rows(Y)-cols(Ahat));
    vecAhat = (vecr(Ahat'));
    InvXprX = Inv(X'X);
    f1 = (Rmatrix1*vecAhat);
    
    Wstat = f1'(inv(Rmatrix1*(InvXprX.*.Estvarcov)*Rmatrix1'))*f1;
    
    retp(Wstat);
endp;

/*
** Purpose
**
** Format:
**       Wcriticalvals = Bootstrap_Toda(y, X, zlags, Ahat, leverage, order, addlags,bootsimmax, Rmatrix1);
**
** Author
**       Scott Hacker
**
** Input:
**
**      y                   Data matrix adjusted for lags. Each column is a vector of observations on one
**                          endogenous variable.
**      
**      x                   Matrix, ones column vector appended to a matrix of 
**                          lagged values for y.
**
**      zlags               Matrix, first elements of original data matrix up 
**                          to the number of lags.
**
**      order               Scalar, order of var system.
**
**      Ahat                Matrix, estimated coefficient matrix for the VAR system
**
**      leverage
**
**      addlags             Additional lags (should be equal to maximum integration order).
**
**      order               Order of var system. This should be = 1 or 2.
**
**      addlags             Additional lags (should be equal to maximum integration order).
**
**      bootsimmax          Scalar, number of simulations for bootstrapping critical values
**
**      Rmatrix1, Rmatrix2  Matrices of restrictions, tested separately
**
**  Output:
**
**      Wcriticalvals       Matrix of critical values for Wald statistics
*/
proc(1) = Bootstrap_Toda(y, X, zlags, Ahat, leverage, order, addlags, bootsimmax, Rmatrix1);
    local RES, adjRES, bootsim, numobs, maxlag, Wstatv, yhatrow, Xhat, obspull, index,
        simerr, yhat, AhatTU, Wstat, randomnumbers,
        onepct_index, fivepct_index, tenpct_index, critical_W, critical_Wpl1,
        Wcriticalvals, unneededleverage,numvars,varindx,adjuster;
    numobs = rows(y);
    numvars = cols(y);
    maxlag = order + addlags;
    RES = Y - X*Ahat';
    
    /*ones(numobs,2);
    leverage[1,2];
    sqrt(ones(numobs,1) - leverage[1,1])~sqrt(ones(numobs,1) - leverage[1,2]);
    RES;
    */
    adjuster =  sqrt(ones(numobs,1) - leverage[1,1]);
    varindx = 2;
    do until varindx > numvars;
        adjuster = adjuster~sqrt(ones(numobs,1) - leverage[1,2]);  /*leverage the same (leverage[1,2]) for all variables except first */
        varindx = varindx + 1;
    endo;
    adjRES = RES ./adjuster;
    Wstatv = zeros(bootsimmax,1);
    bootsim = 1;
    simerr=zeros(numobs,numvars);
    
    do until bootsim > bootsimmax;
        
        obspull = 1;
        do until obspull > numobs;
            randomnumbers = rndu(1,numvars);
            index = 1+ trunc(numobs*randomnumbers);
            simerr[obspull,1] = adjRES[index[1,1],1];
            varindx = 2;
            do until varindx > numvars;
                simerr[obspull,varindx] = adjRES[index[1,varindx],varindx];
                varindx = varindx +1;
            endo;
            obspull = obspull +1;
        endo;
        varindx = 1;
        do until varindx > numvars;
            simerr[.,varindx] = simerr[.,varindx] - (meanc(simerr[.,varindx])) ;
            varindx = varindx + 1;
        endo;
        
        /* Method 1 for creating Wstat and Yhat: Xhat derived*/
        Xhat = X[1,.];
        obspull = 1;
        do until obspull > numobs;
            yhatrow = Xhat[obspull,.]*Ahat' + simerr[obspull,.];
            If maxlag > 1;
                Xhat= Xhat|(1~yhatrow~Xhat[obspull,2:1+numvars*(maxlag-1)]);
            else;
                Xhat= Xhat|(1~yhatrow);
            endif;
            obspull = obspull + 1;
        endo;
        yhat = Xhat[2:rows(Xhat), 2:(numvars + 1)];
        Xhat = Xhat[1:rows(Xhat)-1,.];
        
        
        {AhatTU,unneededleverage} = estvar_params(yhat, Xhat,0, 0, order,addlags);
        {Wstat} = W_Test(yhat, Xhat, AhatTU, Rmatrix1);
        
        Wstatv[bootsim, 1] = Wstat;
        bootsim = bootsim + 1;
    endo;
    
    Wstatv=SORTMC(Wstatv[.,1],1);
    onepct_index = bootsimmax - trunc(bootsimmax/100);
    fivepct_index = bootsimmax - trunc(bootsimmax/20);
    tenpct_index = bootsimmax - trunc(bootsimmax/10);
    
    critical_W = Wstatv[onepct_index,.]|Wstatv[fivepct_index,.]|Wstatv[tenpct_index,.];
    critical_Wpl1 = Wstatv[onepct_index+minc(1|trunc(bootsimmax/100)),.]|
        Wstatv[fivepct_index+minc(1|trunc(bootsimmax/20)),.]|
        Wstatv[tenpct_index+minc(1|trunc(bootsimmax/10)),.];
    
    Wcriticalvals = (critical_W + critical_Wpl1)/2;
    
    
    retp(Wcriticalvals);
endp;

/*
** 
** Purpose:
**
** Format:
**       { iclag, icA, onelA, nocando } = lag_length2(z, minlag, p, infocrit)
**
**       Author: Scott Hacker
**       Attribution: Parts of this code are taken from proc LR_LAG
**       written by David Rapach (may 27 1996 version).
**
** Input :
**      Z           Data matrix. Each column is a vector of observations on one, endogenous variable
**
**      minlag      Scalar, minimum lag length.
**
**      p           Scalar, maximum lag length. This should be >= 2.
**
**  Output
**      iclag       Scalar, lag length suggested by the chosen info criterion.
**
**      icA         Matrix, coefficient estimates based on chosen info criterion.
**
**      onelA       Matrix, coefficient estimates based on one lag.
**
**      nocando     Scalar, 1 if not possible to find suggested lag lengths for the given Z,
**                  0 otherwise.
*/

proc (4) = lag_length2(z, minlag, p, infocrit);
    local M, Y, ylags, T, j, lag_guess, X , Ahat, RES, VARCOV, onelA, nocando;
    
    // Number of endog vars
    M = cols(z);
    
    // Find number of lags
    { Y, ylags } = varlags(z, p);
    
    T=rows(y);
    
    // Initialization  of lag_guess
    lag_guess = p;
    
    j = 0;
//    aicfnd = 0;
    do until (lag_guess < minlag);
        if (lag_guess > 0);
            X = ones(T, 1)~ylags[ . , 1:lag_guess*M];
        else;
            X = ones(T, 1);
        endif;
        
        nocando = 0;
        Ahat = (Y/X)';
        RES = Y - X*Ahat';
        VARCOV = RES'RES/T;
        
        local ic, icmin, iclag, icA;
        ic = __getic(VARCOV, T, M, lag_guess, infocrit, p);
        
        if (lag_guess == p);
            
            icmin = ic;
            iclag = lag_guess;
            icA = Ahat;
            
        else;
            
            if (ic <= icmin);
                icmin = ic;
                iclag = lag_guess;
                icA = Ahat;
            endif;
            
        endif;
        
        if (lag_guess == 1);
            onelA = Ahat;
        endif;
        
        lag_guess = lag_guess - 1;
        
    endo;

    retp(iclag, icA, onelA, nocando);
endp;

proc (1) = _printICASYM(infocrit);
    
    If infocrit == 1;
        retp("AIC");
    elseif infocrit == 2;
        retp("AICC");
    elseif infocrit ==3;
        retp("SBC");
    elseif infocrit ==4;
        retp("HQC");
    elseif infocrit ==5;
        retp("Hatemi-J Criterion (HJC)");
    elseif infocrit ==6;
        retp("User given:");
    endif;
 
endp;

proc (0) = _printHeaderASYM(ic, pos);
    local ic_str, modl_str, fmt, clm1, clm2;
    
    // Get information criterion
    ic_str = _printICASYM(ic);
 
    // Get model specification
    if pos;
      modl_str = "Positive components";
    else;
      modl_str = "Negative components";
    endif;
    
    // Set up table columns
    clm1 = "Test:"$|"Ho:";
    clm2 = "Asymmetric Causality"$|"X2 does not cause X1";
    
    // Print IC criteria
    clm1 = clm1$|"Lag selection:";
    clm2 = clm2$|ic_str;

    // Print model typ
    clm1 = clm1$|"Model:";
    clm2 = clm2$|modl_str;
 
    // Print table
    fmt = "%-30s%30s";
    print "==============================================================";
    sprintf(fmt, clm1, clm2);
    print "==============================================================";

endp;

proc (1) = __getic(VARCOV, T, M, lag_guess, infocrit, maxlags);
    local hqc, sbc;
    
    If infocrit == 1;
        // Original AIC definition
        retp(ln(det(VARCOV)) + (2/T)*(M*M*lag_guess +M)+ M*(1+ln(2*pi)));
    elseif infocrit == 2;
        retp(ln(det(VARCOV)) + ((T + (1+lag_guess*M))*M)/(T - (1+lag_guess*M) - M -1));
    elseif infocrit == 3;
        sbc = ln(det(VARCOV)) + (1/T)*(M*M*lag_guess+M)*ln(T)+ M*(1+ln(2*pi));
        
        if infocrit == 3;
            retp(sbc);
        endif;
    elseif infocrit == 4 or infocrit == 5;
        hqc = ln(det(VARCOV)) + (2/T)*(M*M*lag_guess+M)*ln(ln(T))+ M*(1+ln(2*pi));
        
        if infocrit == 4;
            retp(hqc);
        elseif infocrit == 5;
            sbc = ln(det(VARCOV)) + (1/T)*(M*M*lag_guess+M)*ln(T)+ M*(1+ln(2*pi));
            retp((sbc + hqc)/2);
        endif;
    elseif infocrit == 6;
        retp(maxlags);
    endif;
endp;

proc (0) =  __printInfoACTest();
    sprintf("%s", "This program performs an asymmetric causality test developed by Hatemi-J (2012)."); 
    sprintf("%s", "Reference: Hatemi-J (2012) Asymmetric Causality Tests with an Application, Empirical Economics, 447-456");
    Print " ";
    sprintf("%s", "This program code is the copyright of the authors. Applications are allowed only if proper reference and acknowledgments are provided. For non-Commercial applications only.");
    sprintf("%s", "No performance guarantee is made. Bug reports are welcome.") ;
    Print " ";
endp;
