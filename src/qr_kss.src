
/*
**> qr_kss
**  Reference:
**  Li, H., & Park, S. Y. (2018). 
**  Testing for a unit root in a nonlinear quantile autoregression framework. 
** Econometric Reviews, 37(8), 867-892.
**
**
**  Format:  {tn, cv} = QR_KSS(y, model, tau [, pmax, _print]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	0 = none
**                      1 = model with constant
**                      2 = model with constant and trend
**
**           pmax    -  Optional, maximum number of lags for Dy; 0=no lags
**                      Default = 8;
**
**           _print  -  Optional, print option "true" for printing results
**                      Default = "true";
**
**  Output:  tn      - KSS tau-statistic
**			 cv      - 1, 5, and 10 percent critical values for ADF tau-stat based on response surfaces
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

proc(1) = QR_KSS(y, model, tau, ...);
    local n, y1, dy, x, p_lags, dy_lags;
    local qr_beta, rho_tau, tn, delta2, cv, dt_vec, p, _print, colwidth;
    
    // Data checks
    _checkForMissings(y, "QR_KSS");
    { dt_vec, y } =_checkfordate(y);
    
    // Get defaults
    { p, _print } = dynargsGet(1|2, 8, "true");
    
    n  = rows(y);
    y1 = lagn(y^3, 1);
    dy = diff(y, 1);
    
    x = y1;
    
    // Add lags
    if p > 0;
        p_lags  = seqa(1, 1, p);
        dy_lags = lagn(dy, p_lags);
        x = x ~ dy_lags;
    endif;
    
    // Trim x
    x = trimr(x,  p+1, 0);   

    if model == 2;
        x = x ~ seqa(1, 1, rows(x));
    endif; 

    dy = trimr(dy, p+1, 0);
    y1 = trimr(y1, p+1, 0);
    
    screen off;
    qr_beta = __get_qr_adf_beta(dy, x, tau, ...);
    rho_tau = qr_beta[2]; 
    
    // Get tn stat
    tn = __get_qr_adf_stat(dy, y1, miss(), x, rho_tau, tau, n, p, 1, 1);

    // Get delta2 
    delta2 = __get_qr_adf_delta2(dy, x, dy, tau, qr_beta);
   
    // Get critical values
    cv = crit_qr_kss(delta2, model);
    
    screen on;
    if _print == "true";
        _printHeaderTSPDLIB(0, 0, 1, model, 4, 0, "Quantile KSS", "Unit root", 0);

        local top, side, stats, dec;
        top = "";
        side = "quantile:"$|"rho(quantile):"$|"delta^2:"$|"KSS(quantile):";
        stats = tau|rho_tau|delta2|tn;
        dec = 3;
        colwidth = 15;

        // Print stats table
        _printStatsTable(top, side, stats, cv', dec, colwidth, 0);

        // Print conclusions
        _printConclusion(tn, cv', 0, "a unit root");
    endif;
    
retp(tn);
endp;

proc(1) = crit_qr_kss(r2,model);
    local crt, ct, r210, r2a, r2b, wa;
    
    // See Lee & Park (2018) CADF critical values
    if model == 1;   
        let crt[10, 3] =
            -2.83   -2.16   -1.80
            -2.99   -2.34   -1.99
            -3.12   -2.46   -2.12
            -3.22   -2.59   -2.25
            -3.27   -2.67   -2.34
            -3.34   -2.74   -2.43
            -3.38   -2.80   -2.49
            -3.40   -2.85   -2.55
            -3.42   -2.88   -2.60
            -3.47   -2.92   -2.65;
        
    elseif model == 2;    
        let crt[10, 3] =
            -2.97   -2.29   -1.94
            -3.19   -2.55   -2.20
            -3.35   -2.73   -2.40
            -3.51   -2.88   -2.55
            -3.58   -2.99   -2.66
            -3.68   -3.09   -2.78
            -3.74   -3.16   -2.87
            -3.79   -3.26   -2.97
            -3.87   -3.32   -3.04
            -3.90   -3.37   -3.10;
    endif;
    
    if r2 < .1;
        ct = crt[1, .];
    else;
        r210 = r2 * 10;
        if r210 >= 10;
            ct = crt[10, .];
        else;
            r2a = floor(r210);
            r2b = ceil(r210);
            wa = r2b - r210;
            ct = wa * crt[r2a, .] + (1 - wa) * crt[r2b, .];
        endif;
    endif;
    
retp(ct);
endp;
