
/*
**> qr_kss
**  Reference:
**  Li, H., & Park, S. Y. (2018). 
**  Testing for a unit root in a nonlinear quantile autoregression framework. 
** Econometric Reviews, 37(8), 867-892.
**
**
**  Format:  {tn, cv} = QR_KSS(y, model, p, tau, _print);
**
**  Input:   Y	     -  Nx1 matrix, data,
**           model   - 	0 = none
**                      1 = model with constant
**                      2 = model with constant and trend
**           p       -  Number of lags for Dy; 0 = no lags
**           _print  -  print option "true" for printing results
**
**  Output:  tn      - KSS tau-statistic
**			 cv      - 1, 5, and 10 percent critical values for ADF tau-stat based on response surfaces
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


/*Procedures*/
proc(1) = QR_KSS(y, model, p, tau, _print);
    local n, y1, dy, x, p_lags, dy_lags;
    local qr_beta, rho_tau, h;
    local rq1, rq2, z, mz, q1, q2, fz, px, tn;
    local res, ind, phi, w, cov, delta2, cv;
    
    n  = rows(y);
    y1 = lagn(y^3, 1);
    dy = diff(y, 1);
    
    if p == 0;
       x = y1; 
    elseif p > 0;
        p_lags  = seqa(1, 1, p);
        dy_lags = lagn(dy, p_lags);
        x = y1 ~ dy_lags;
    endif;
    
    if model == 1;
        x  = trimr(x,  p+1, 0);
    endif;    

    if model == 2;
        x = trimr(x,  p+1, 0);
        x = x ~ seqa(1, 1, rows(x));
    endif; 

    dy = trimr(dy, p+1, 0);
    y1 = trimr(y1, p+1, 0);
    
    // Declare qFitControl structure
    struct qfitControl qctl;
    qctl = qfitControlCreate();
    // for print result: qCtl.verbose = 1;
    qctl.verbose = 0;       
    // Declare qFitOut structure
    struct qFitOut qOut1;    
    qOut1 = quantileFit(DY, X, tau, qctl);
    
    qr_beta = qOut1.beta;
    rho_tau = qr_beta[2]; 
    
    h = bandwidth(tau, n, "false", 0.05);    
    if tau <= 0.5 and h > tau;
        h = bandwidth(tau, n, "false", 0.05);
        if h > tau;
            h = tau/1.5;
        endif;
    endif;
    if tau > 0.5 and h > 1-tau;
        h = bandwidth(tau, n, "false", 0.05);
        if h > (1 - tau);
            h = (1-tau)/1.5;
        endif;
    endif;  

    // Declare qFitOut structure
    struct qFitOut qOut2;
    qOut2 = quantileFit(DY, X, tau+h, qctl);
    // Extract beta
    rq1 = qOut2.beta;
    
    // Declare qFitOut structure
    struct qFitOut qOut3;
    qOut3 = quantileFit(DY, X, tau-h, qctl);
    // Extract beta
    rq2 = qOut3.beta;
    
    z = ones(rows(x), 1)~x;
    mz = meanc(z);
    q1 = mz' * rq1;
    q2 = mz' * rq2;
    fz = 2 * h/(q1 - q2);
    if fz < 0;
        fz = 0.01;
    endif;
    
    if p == 0;
       x = ones(rows(x), 1);
    endif;
    if p > 0;
        x =ones(rows(x), 1)~x[.,2:cols(x)];
    endif;

    PX = eye(rows(x)) - x * inv(x'x) * x';
    tn = fz/sqrt(tau * (1 - tau)) * sqrt(Y1' * PX * Y1) * (rho_tau);
    
    res = dy - (ones(rows(x),1)~x) * qr_beta;
    ind = res .< 0;
    phi = tau - ind;
    w = dy;
    cov = sumc((w - meanc(w)) .* (phi - meanc(phi)))/(rows(w) - 1);
    delta2 = (cov/(stdc(w) * sqrt(tau * (1-tau))))^2;
    cv = crit_qr_kss(delta2, model);
    
    if _print == "true";
        " Nonlinear QR-KSS ";
        "quantil        ";;
        tau;
        "rho(quantile)   ";;
        rho_tau;
        "delta^2        ";;
        delta2;
        "KSS(quantile)  ";;
        tn;
        "CV (1%,5%,10%) ";;
        cv;
    endif;
    
retp(tn);
endp;

proc(1) = crit_qr_kss(r2,model);
    local cra, crt, ca, ct, r210, r2a, r2b, wa;
    
    // See Lee & Park (2018) CADF critical values
    if model == 1;   
        let crt[10, 3] =
            -2.83   -2.16   -1.80
            -2.99   -2.34   -1.99
            -3.12   -2.46   -2.12
            -3.22   -2.59   -2.25
            -3.27   -2.67   -2.34
            -3.34   -2.74   -2.43
            -3.38   -2.80   -2.49
            -3.40   -2.85   -2.55
            -3.42   -2.88   -2.60
            -3.47   -2.92   -2.65;
        
    elseif model == 2;    
        let crt[10, 3] =
            -2.97   -2.29   -1.94
            -3.19   -2.55   -2.20
            -3.35   -2.73   -2.40
            -3.51   -2.88   -2.55
            -3.58   -2.99   -2.66
            -3.68   -3.09   -2.78
            -3.74   -3.16   -2.87
            -3.79   -3.26   -2.97
            -3.87   -3.32   -3.04
            -3.90   -3.37   -3.10;
    endif;
    
    if r2 < .1;
        ct = crt[1, .];
    else;
        r210 = r2 * 10;
        if r210 >= 10;
            ct = crt[10, .];
        else;
            r2a = floor(r210);
            r2b = ceil(r210);
            wa = r2b - r210;
            ct = wa * crt[r2a, .] + (1 - wa) * crt[r2b, .];
        endif;
    endif;
    
retp(ct);
endp;
