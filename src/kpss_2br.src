
/*
**> kpss_2br
**  Reference:
**  Carrion-i-Silvestre, J. Ll. and Sanso, A. (2007)
**  The KPSS test with two structural breaks,
**  Spanish Economic Review, 9, 2, 105-127.
**
**  Format:  { stat, tb1, tb2, cv } = KPSS_2breaks(y, model[, l, varm]);
**           {cv}           = cv_kpss2(model,t,tb1,tb2);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = AAn (Level shift without trend);
**                      2 = AA (Level shift with trend);
**                      3 = BB (Trend shift);
**                      4 = CC (Level and trend shift)
**
**           l       -  Optional, Bandwidth for spectral window.
**                      Default = round(4 * (T/100)^(2/9)).                      
**
**           varm    -  Long-run consistent variance estimation method
**                      Default = 1;
**                      1 = iid;
**                      2 = Bartlett
**                      3 = Quadratic Spectral (QS);
**                      4 = SPC with Bartlett /see (Sul, Phillips & Choi, 2005)
**                      5 = SPC with QS;
**                      6 = Kurozumi with Bartlett
**                      7 = Kurozumi with QS
**                      Updated from Carrion-i-Silvestre & Sanso (2007) GAUSS codes.
**                      See:
**                      Carrion-i-Silvestre, J. L., & Sanso, A. (2006).
**                      A guide to the computation of stationarity tests.
**                      Empirical Economics, 31(2), 433.
**
**  Output:  stat    - KPSS statistic with two breaks
**
**			 tb1     - first location of minimum test statistic
**
**			 tb2     - second location of minimum test statistic
**
**			 cv      - 1%, 5%, 10% critical values for the chosen model
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

/*10 January 2015*/

proc(4) = KPSS_2breaks(y, model, ...);
    local t, ssr_min, tb1_min, tb2_min, KPSS_min;
    local tb1, tb2, dc, dt, du1, du2, dt1, dt2, z;
    local ssr, KPSS, cv, bwl_dftl, l, varm, frac, dt_vec;
    
    t = rows(y);
    bwl_dftl = round(4 * (T/100)^(2/9));
    
    { l, varm } = dynargsGet(1|2, bwl_dftl, 1);
             
    { dt_vec, y } = _checkfordate(y);
    
    ssr_min = 1e6;
    tb1_min = 0;
    tb2_min = 0;
    KPSS_min = 0;
     
    // First break
    tb1 = 2;
    do until tb1 > t-4;
        
        // Second break
        tb2 = tb1 + 2;
        do until tb2 > t - 2;
            
            // Deterministic term=constant
            dc = ones(t, 1);
            
            // Deterministic term=trend
            dt = seqa(1, 1, t);
            
            if  model == 1;
                du1 = zeros(tb1, 1)|ones(t - tb1, 1);
                du2 = zeros(tb2, 1)|ones(t - tb2, 1);
                z = dc~du1~du2;
            endif;
            
            if  model == 2;
                du1 = zeros(tb1, 1)|ones(t - tb1, 1);
                du2 = zeros(tb2, 1)|ones(t - tb2, 1);
                z = dc~dt~du1~du2;
            endif;
            
            if  model == 3;
                dt1 = zeros(tb1, 1)|seqa(1, 1, (t - tb1));
                dt2 = zeros(tb2, 1)|seqa(1, 1, (t - tb2));
                z = dc~dt~dt1~dt2;
            endif;
            
            if  model == 4;
                du1 = zeros(tb1, 1)|ones(t - tb1, 1);
                du2 = zeros(tb2, 1)|ones(t - tb2, 1);
                dt1 = zeros(tb1, 1)|seqa(1, 1, (t - tb1));
                dt2 = zeros(tb2, 1)|seqa(1, 1, (t - tb2));
                z = dc~dt~du1~dt1~du2~dt2;
            endif;

            // KPSS statistic
            { kpss, ssr } = _get_kpss(y, z, varm, l, T, 0);
            
            // Global minimization
            if ssr < ssr_min;
                
                // Select minimum SSR
                ssr_min = ssr;
                
                // First break date
                tb1_min = tb1;
                
                // Second break date
                tb2_min = tb2;
                
                // KPSS statistic with breaks
                KPSS_min = KPSS;
            endif;
            tb2 = tb2 + 1;
        endo;
        tb1 = tb1 + 1;
    endo;
    cv = cv_kpss2(model, rows(y), tb1_min, tb2_min);
       
    _printHeaderTSPDLIB(0, varm, 2, 2, 0, "KPSS", "Stationarity", 0);
   
    // Print break dates
    frac = (tb1_min/rows(y))|(tb2_min/rows(y));
    
    if ismiss(dt_vec) != 1;
        tb1_min = dt_vec[tb1_min];
        tb2_min = dt_vec[tb2_min];
    endif;
    
    // Print results
    local top, side, stats, dec, colwidth;
    top = "KPSS Stat:";
    side = "";
    stats = KPSS_min;
    dec = 3;
    colwidth = 15;
    
    _printStatsTable(top, side, stats, rev(cv'), dec, colwidth, 0);
    _printConclusion(KPSS_min, rev(cv'), 1, "stationarity");
    
    retp(KPSS_min, tb1_min, tb2_min, rev(cv'));
endp;

proc(1) = cv_kpss2(model, t, tb1, tb2);
    local lam1, lam2, mat_cv1, mat_cv5, mat_cv10;
    local cv1, cv5, cv10, lam1row, lam2col;
    
    
    if model == 1; @ Model AAn @
        mat_cv1 = {0.4758	0.3659	0.2802	0.2299	0.2275	0.2883	0.3664	0.4758,
            0	    0.3682	0.2832	0.2109	0.1835	0.2075	0.2897	0.3612,
            0	    0	    0.2874	0.2077	0.1588	0.1620	0.2178	0.2937,
            0	    0	    0	    0.2330	0.1733	0.1648	0.1811	0.2292,
            0	    0	    0	    0	    0.2271	0.2109	0.2027	0.2239,
            0	    0	    0	    0	    0	    0.2919	0.2846	0.2862,
            0	    0	    0	    0	    0	    0	    0.3666	0.3692,
            0	    0	    0	    0	    0	    0	    0	    0.4853};
        mat_cv5 = {0.2992	0.2344	0.1890	0.1560	0.1581	0.1883	0.2339	0.3001,
            0	    0.2339	0.1802	0.1423	0.1289	0.1390	0.1821	0.2366,
            0	    0	    0.1846	0.1401	0.1153	0.1165	0.1421	0.1859,
            0	    0	    0	    0.1585	0.1266	0.1165	0.1275	0.1571,
            0	    0	    0	    0	    0.1564	0.1443	0.1388	0.1547,
            0	    0	    0	    0	    0	    0.1834	0.1830	0.1847,
            0	    0	    0	    0	    0	    0	    0.2328	0.2332,
            0	    0	    0	    0	    0	    0	    0	    0.3009};
        mat_cv10 = {0.2262	0.1789	0.1441	0.1258	0.1286	0.1455	0.1773	0.226,
            0	    0.1775	0.1402	0.1148	0.1053	0.1116	0.1394	0.1791,
            0	    0	    0.1432	0.1128	0.0959	0.0963	0.1136	0.1441,
            0	    0	    0	    0.1276	0.1049	0.0965	0.1043	0.1279,
            0	    0	    0	    0	    0.1564	0.1151	0.1120	0.1264,
            0	    0	    0	    0	    0	    0.1440	0.1409	0.1438,
            0	    0	    0	    0	    0	    0	    0.1774	0.1785,
            0	    0	    0	    0	    0	    0	    0	    0.2289};
    endif;
    
    if model == 2; @ Model AA@
        mat_cv1 = {0.1456	0.1169	0.1247	0.1601	0.1616	0.127	0.1157	0.1444,
            0	    0.1192	0.1002	0.1219	0.14	0.1175	0.1028	0.1214,
            0	    0	    0.1252	0.1187	0.1253	0.1248	0.1147	0.1268,
            0	    0	    0	    0.1604	0.1405	0.1272	0.1399	0.1574,
            0	    0	    0	    0	    0.1679	0.1191	0.1159	0.1590,
            0	    0	    0	    0	    0	    0.1223	0.1020	0.1260,
            0	    0	    0	    0	    0	    0	    0.1205	0.1180,
            0	    0	    0	    0	    0	    0	    0	    0.1421};
        mat_cv5 = {0.0988	0.0834	0.0899	0.1073	0.108	0.091	0.0825	0.0992,
            0	    0.0843	0.075	0.086	0.0948	0.0849	0.0749	0.0845,
            0	    0	    0.0895	0.0848	0.0898	0.0886	0.0831	0.0898,
            0	    0	    0	    0.1069	0.0958	0.0896	0.0934	0.1051,
            0	    0	    0	    0	    0.1087	0.0833	0.0836	0.1061,
            0	    0	    0	    0	    0	    0.0894	0.0746	0.0900,
            0	    0	    0	    0	    0	    0	    0.0856	0.0843,
            0	    0	    0	    0	    0	    0	    0	    0.0999};
        mat_cv10 = {0.0797	0.0699	0.0748	0.0858	0.0855	0.075	0.0693	0.0801,
            0	    0.0701	0.0641	0.071	0.0771	0.0702	0.0643	0.0696,
            0	    0	    0.0739	0.0706	0.074	0.0736	0.0691	0.0741,
            0	    0	    0	    0.0860	0.0771	0.0742	0.0747	0.085,
            0	    0	    0	    0	    0.0859	0.0699	0.0698	0.0867,
            0	    0	    0	    0	    0	    0.0741	0.0633	0.0743,
            0	    0	    0	    0	    0	    0	    0.0714	0.0699,
            0	    0	    0	    0	    0	    0	    0	    0.0815};
    endif;
    
    if model == 3; @ Model BB@
        mat_cv1 = {0.1524	0.1298	0.1098	0.1040	0.1003	0.1175	0.1393	0.1565,
            0	    0.1205	0.1021	0.0892	0.0879	0.0963	0.1134	0.1357,
            0	    0	    0.0966	0.0820	0.0780	0.0827	0.0974	0.1153,
            0	    0	    0	    0.0797	0.0751	0.0766	0.0888	0.1040,
            0	    0	    0	    0	    0.0803	0.0829	0.0910	0.1032,
            0	    0	    0	    0	    0	    0.0968	0.0993	0.1089,
            0	    0	    0	    0	    0	    0	    0.1200	0.1282,
            0	    0	    0	    0	    0	    0	    0	    0.1518};
        mat_cv5 = {0.1060	0.0897	0.0766	0.0723	0.0738	0.0803	0.0937	0.1068,
            0	    0.0822	0.0715	0.0650	0.0634	0.0681	0.0785	0.0929,
            0	    0	    0.0679	0.0601	0.0573	0.0599	0.0683	0.0802,
            0	    0	    0	    0.0591	0.0556	0.0565	0.0633	0.0737,
            0	    0	    0	    0	    0.0590	0.0590	0.0646	0.0731,
            0	    0	    0	    0	    0	    0.0684	0.0709	0.0772,
            0	    0	    0	    0	    0	    0	    0.0818	0.0886,
            0	    0	    0	    0	    0	    0	    0	    0.1021};
        mat_cv10 = {0.0848	0.0729	0.0630	0.0603	0.0613	0.0664	0.0755	0.0864,
            0	    0.0669	0.0593	0.0540	0.0529	0.0562	0.0644	0.0754,
            0	    0	    0.0561	0.0504	0.0484	0.0502	0.0568	0.0659,
            0	    0	    0	    0.0500	0.0473	0.0483	0.0528	0.0609,
            0	    0	    0	    0	    0.0502	0.0500	0.0539	0.0606,
            0	    0	    0	    0	    0	    0.0570	0.0584	0.0634,
            0	    0	    0	    0	    0	    0	    0.0674	0.0722,
            0	    0	    0	    0	    0	    0	    0	    0.0831};
    endif;
    
    if model == 4; @ Model CC @
        mat_cv1 = {0.1439	0.1116	0.0852	0.0691	0.0704	0.0856	0.1098	0.1430,
            0	    0.1100	0.0835	0.0644	0.0556	0.0634	0.0849	0.1113,
            0	    0	    0.0855	0.0652	0.0506	0.0503	0.0637	0.0845,
            0	    0	    0	    0.0699	0.0560	0.0501	0.0550	0.0695,
            0	    0	    0	    0	    0.0704	0.0629	0.0637	0.0707,
            0	    0	    0	    0	    0	    0.0874	0.0840	0.0858,
            0	    0	    0	    0	    0	    0	    0.1122	0.1124,
            0	    0	    0	    0	    0	    0	    0	    0.1425};
        mat_cv5 = {0.0972	0.0772	0.0605	0.0518	0.052	0.0606	0.0765	0.0965,
            0	    0.0763	0.0591	0.047	0.0424	0.0466	0.0586	0.0757,
            0	    0	    0.0601	0.0474	0.039	0.0389	0.0467	0.0605,
            0	    0	    0	    0.0518	0.0425	0.0389	0.0423	0.0518,
            0	    0	    0	    0	    0.0521	0.0466	0.047	0.0523,
            0	    0	    0	    0	    0	    0.0615	0.0586	0.0608,
            0	    0	    0	    0	    0	    0	    0.0768	0.0766,
            0	    0	    0	    0	    0	    0	    0	    0.0966};
        mat_cv10 = {0.0788	0.0626	0.0508	0.0441	0.0444	0.0504	0.0625	0.0775,
            0	    0.0621	0.0487	0.0399	0.0364	0.0397	0.0485	0.0619,
            0	    0	    0.0501	0.0398	0.0339	0.0340	0.0397	0.0500,
            0	    0	    0	    0.0442	0.0367	0.0340	0.0365	0.0442,
            0	    0	    0	    0	    0.0444	0.0397	0.0399	0.0443,
            0	    0	    0	    0	    0	    0.0507	0.0486	0.0503,
            0	    0	    0	    0	    0	    0	    0.0620	0.0625,
            0	    0	    0	    0	    0	    0	    0	    0.0780};
    endif;
    
    lam1 = tb1/t;
    lam2 = tb2/t;
    
    if     lam1 <= 0.15;
        lam1row = 1;
    elseif (0.15< lam1) and (lam1 <= 0.85);
        lam1row = round(10*lam1);
    elseif lam1 > 0.85;
        lam1row = 8;
    endif;
    
    if     lam2 <= 0.25;
        lam2col = 1;
    elseif (0.25< lam2) and (lam2 <= 0.95);
        lam2col = round(10*lam2);
    elseif lam2 > 0.95;
        lam2col = 8;
    endif;
    
    cv1 = mat_cv1[lam1row,lam2col];
    cv5 = mat_cv5[lam1row,lam2col];
    cv10= mat_cv10[lam1row,lam2col];
    @
    if lam[1] <= 0.15;
    mat_cv1  =mat_cv1[1, .];
    elseif (0.15 < lam[1]) and (lam[1] <= 0.25);
    mat_cv1 = mat_cv1[2, .];
    elseif (0.25 < lam[1]) and (lam[1] <= 0.35);
    mat_cv1 = mat_cv1[3, .];
    elseif (0.35 < lam[1]) and (lam[1] <= 0.45);
    mat_cv1 = mat_cv1[4, .];
    elseif (0.45 < lam[1]) and (lam[1] <= 0.55);
    mat_cv1 = mat_cv1[5, .];
    elseif (0.55 < lam[1]) and (lam[1] <= 0.65);
    mat_cv1 = mat_cv1[6, .];
    elseif (0.65 < lam[1]) and (lam[1] <= 0.75);
    mat_cv1 = mat_cv1[7, .];
    elseif (0.75 < lam[1]) and (lam[1] < 1);
    mat_cv1 = mat_cv1[8, .];
    endif;
    
    
    if lam[2] <= 0.25;
    mat_cv1 = mat_cv1[1];
    elseif (0.25 < lam[2]) and (lam[2] <= 0.35);
    mat_cv1 = mat_cv1[2];
    elseif (0.35 < lam[2]) and (lam[2] <= 0.45);
    mat_cv1 = mat_cv1[3];
    elseif (0.45 < lam[2]) and (lam[2] <= 0.55);
    mat_cv1 = mat_cv1[4];
    elseif (0.55 < lam[2]) and (lam[2] <= 0.65);
    mat_cv1 = mat_cv1[5];
    elseif (0.65 < lam[2]) and (lam[2] <= 0.75);
    mat_cv1 = mat_cv1[6];
    elseif (0.75 < lam[2]) and (lam[2] <= 0.85);
    mat_cv1 = mat_cv1[7];
    elseif (0.85 < lam[2]) and (lam[2] < 1);
    mat_cv1 = mat_cv1[8];
    endif;
    
    if lam[1] <= 0.15;
    mat_cv5 = mat_cv5[1, .];
    elseif (0.15 < lam[1]) and (lam[1] <= 0.25);
    mat_cv5 = mat_cv5[2, .];
    elseif (0.25 < lam[1]) and (lam[1] <= 0.35);
    mat_cv5 = mat_cv5[3, .];
    elseif (0.35 < lam[1]) and (lam[1] <= 0.45);
    mat_cv5 = mat_cv5[4, .];
    elseif (0.45 < lam[1]) and (lam[1] <= 0.55);
    mat_cv5 = mat_cv5[5, .];
    elseif (0.55 < lam[1]) and (lam[1] <= 0.65);
    mat_cv5 = mat_cv5[6, .];
    elseif (0.65 < lam[1]) and (lam[1] <= 0.75);
    mat_cv5 = mat_cv5[7, .];
    elseif (0.75 < lam[1]) and (lam[1] < 1);
    mat_cv5 = mat_cv5[8, .];
    endif;
    
    
    if lam[2] <= 0.25;
    mat_cv5 = mat_cv5[1];
    elseif (0.25 < lam[2]) and (lam[2] <= 0.35);
    mat_cv5 = mat_cv5[2];
    elseif (0.35 < lam[2]) and (lam[2] <= 0.45);
    mat_cv5 = mat_cv5[3];
    elseif (0.45 < lam[2]) and (lam[2] <= 0.55);
    mat_cv5 = mat_cv5[4];
    elseif (0.55 < lam[2]) and (lam[2] <= 0.65);
    mat_cv5 = mat_cv5[5];
    elseif (0.65 < lam[2]) and (lam[2] <= 0.75);
    mat_cv5 = mat_cv5[6];
    elseif (0.75 < lam[2]) and (lam[2] <= 0.85);
    mat_cv5 = mat_cv5[7];
    elseif (0.85 < lam[2]) and (lam[2] < 1);
    mat_cv5 = mat_cv5[8];
    endif;
    
    if lam[1] <= 0.15;
    mat_cv10 = mat_cv10[1, .];
    elseif (0.15 < lam[1]) and (lam[1] <= 0.25);
    mat_cv10 = mat_cv10[2, .];
    elseif (0.25 < lam[1]) and (lam[1] <= 0.35);
    mat_cv10 = mat_cv10[3, .];
    elseif (0.35 < lam[1]) and (lam[1] <= 0.45);
    mat_cv10 = mat_cv10[4, .];
    elseif (0.45 < lam[1]) and (lam[1] <= 0.55);
    mat_cv10 = mat_cv10[5, .];
    elseif (0.55 < lam[1]) and (lam[1] <= 0.65);
    mat_cv10 = mat_cv10[6, .];
    elseif (0.65 < lam[1]) and (lam[1] <= 0.75);
    mat_cv10 = mat_cv10[7, .];
    elseif (0.75 < lam[1]) and (lam[1] < 1);
    mat_cv10 = mat_cv10[8, .];
    endif;
    
    if lam[2] <= 0.25;
    mat_cv10 = mat_cv10[1];
    elseif (0.25 < lam[2]) and (lam[2] <= 0.35);
    mat_cv10 = mat_cv10[2];
    elseif (0.35 < lam[2]) and (lam[2] <= 0.45);
    mat_cv10 = mat_cv10[3];
    elseif (0.45 < lam[2]) and (lam[2] <= 0.55);
    mat_cv10 = mat_cv10[4];
    elseif (0.55 < lam[2]) and (lam[2] <= 0.65);
    mat_cv10 = mat_cv10[5];
    elseif (0.65 < lam[2]) and (lam[2] <= 0.75);
    mat_cv10 = mat_cv10[6];
    elseif (0.75 < lam[2]) and (lam[2] <= 0.85);
    mat_cv10 = mat_cv10[7];
    elseif (0.85 < lam[2]) and (lam[2] < 1);
    mat_cv10 = mat_cv10[8];
    endif;
    @
    
    retp(cv10~cv5~cv1);
    
endp;
