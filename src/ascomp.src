/*
** This code is based on the original ascomp.prg file provide by
** Abdulnasser Hatemi-J
*/

proc(2) = cumulativeComp(YZlevel, ln_form, ...);
    local numvars, levnumobs, dYZ,
        notpositive, notnegative, DYZpc, DYZnc, colnum,
        CumDYZpc, CumDYZnc, numobs, fullprint;
    
    __printInfoAsComp;
    fullprint = dynargsGet(1, 0);
    
    // Finds the number of variables in the VAR model
    numvars = cols(YZlevel);
    
    // Find number of observations
    levnumobs = rows(YZlevel);
    
    // Use original data in log form
    if ln_form;
        YZlevel=ln(YZlevel);
    endif;
    
    // First difference the data
    dYZ = YZlevel[2:Levnumobs,.] -  YZlevel[1:(Levnumobs-1), .];
    
    // Adjust number of observations
    numobs = levnumobs - 1;
    
    // Check if less than zero
    notpositive = DYZ .le 0;
    
    // Check if greater than zero
    notnegative= DYZ .ge 0;
    
    // Allocate matrices for storage of components
    DYZpc = zeros(numobs, numvars);
    DYZnc = zeros(numobs, numvars);
    
    colnum = 1;
    do until colnum > numvars;
        DYZpc[., colnum] = recode(DYZ[.,colnum], notpositive[.,colnum], 0);
        DYZnc[., colnum] = recode(DYZ[.,colnum], notnegative[.,colnum], 0);
        colnum = colnum + 1;
    endo;
    
    // Sum components
    CumDYZpc = cumsumc(DYZpc);
    CumDYZnc = cumsumc(DYZnc);
    
    // Print components table
    if fullprint;
        __printCompTable(CUMDYZpc, CUMDYZnc);
    endif;
    
    retp(CUMDYZpc, CUMDYZnc);
endp;

proc (0) = __printCompTable(CUMDYZpc, CUMDYZnc);
    local top;
    
    top = "Positive"$~""$~"Negative"$~"";
    sprintf("%15s", top);
    print "==============================================================";
    sprintf("%15.2f", CUMDYZpc~CUMDYZnc);
    print "==============================================================";
     
endp;

proc (0) = __printInfoAsComp();
    sprintf("%s", "This program transforms the data into cumulative positive and negative cumulative components.");
    sprintf("%s", "These components can be used for testing asymmetric causality (see Hatemi-J, 2012) or asymmetric");
    sprintf("%s", "generalized impulses and variance decompositions (see Hatemi-J, 2014).");
    print ;
    sprintf("%s", "References: 1. Hatemi-J A.(2012) Asymmetric Causality Tests with an Application,");
    sprintf("%s", "                     Empirical Economics, Volume 43, Issue 1, pp 447-456.");
    sprintf("%s", "            2. Hatemi-J A.(2014) Asymmetric generalized impulse responses with an application in finance,"); 
    sprintf("%s", "                     Economic Modelling, Volume 36, January 2014, Pages 18–22.");
    print ;
    sprintf("%s", "This program code is the copyright of the authors.");
    sprintf("%s", "Applications are allowed only if proper reference and acknowledgments are provided.");
    sprintf("%s", "For non-Commercial applications only. No performance guarantee is made.");
    sprintf("%s", "Bug reports are welcome.") ;
    print ;
endp;
