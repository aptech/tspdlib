
/*
**> PD_nkarul
**  Reference:
**  Nazlioglu, S., Karul, C. (2017),
**  "The panel stationary test with gradual shifts:
**  an application to international commodity price shocks",
** Economic Modelling 61 (2017). pp.181-192.
**
**  Format:  { Nkpss, FZk, pval } = PDfzk(y, model, f [, varm]);
**
**  Input:   Y	     -  TxN matrix, data,
**
**           model   - 	1 = level shift model
**                      2 = level and trend shift model
**
**           f       -  number of single frequency
**
**           varm    -  Long-run consistent variance estimation method
**                      1 = iid;
**                      2 = Bartlett
**                      3 = Quadratic Spectral (QS);
**                      4 = SPC with Bartlett /see (Sul, Phillips & Choi, 2005)
**                      5 = SPC with QS;
**                      6 = Kurozumi with Bartlett
**                      7 = Kurozumi with QS
**                      Default = 1;
**                      Updated from Carrion-i-Silvestre & Sanso (2007) GAUSS codes.
**
**                      See:
**                      Carrion-i-Silvestre, J. L., & Sanso, A. (2006).
**                      A guide to the computation of stationarity tests.
**                      Empirical Economics, 31(2), 433.
**
**  Output:  Nkpss   - KPSS statistic with common factor for each cross-section
**			 FZK     - Panel stationarity statistic with N(0,1)
**           pval    - p-value of FZk
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc(3) = PDfzk(y, model, k, ...);
    local t, n, ft, Nkpss, i, fpk, mu, var, fzk, varm, dt_vec;
    
    _checkForMissings(y, currentprocname());
    
    // Get option arguments
    varm = dynargsGet(1, 1);
    { dt_vec, y } =_checkfordate(y);
    
    print "Panel stationary test with gradual shifts.";

    t = rows(y);
    n = cols(y);
    
    // Cross-section averages
    ft = meanc(y');
    
    Nkpss = zeros(N, 1);
    
    for i(1, N, 1);
        // Individual statistics
        { Nkpss[i] } = _get_Fkpss_Ft(y[., i], model, k, varm, ft);
    endfor;
    
    FPk = meanc(Nkpss);
    
    if model == 1;
        "Panel stationarity test with level.";
    elseif model == 2;
        "Panel stationarity test with level and trend shifts.";
    endif;
    print;
    
    // Check for maximum frequencies
    if k>5;
        errorlog "'PDfzk': Maximum number of single frequency is 5.";
        end;
    endif;
    
    if model == 1;
        if k == 1;
            mu = 0.0658;
            var = 0.0029;
        elseif k == 2;
            mu = 0.1410;
            var = 0.0176;
        elseif k == 3;
            mu = 0.1550;
            var = 0.0202;
        elseif k == 4;
            mu = 0.1600;
            var = 0.0214;
        elseif k == 5;
            mu = 0.1630;
            var = 0.0219;
        endif;
    endif;
    
    if model == 2;
        if k == 1;
            mu = 0.0295;
            var = 0.00017;
        elseif k == 2;
            mu = 0.0523;
            var = 0.00150;
        elseif k == 3;
            mu = 0.0601;
            var = 0.00169;
        elseif k == 4;
            mu = 0.0633;
            var = 0.00180;
        elseif k == 5;
            mu = 0.0642;
            var = 0.00179;
        endif;
    endif;
    
    FZk = sqrt(n) * (FPk - mu)/sqrt(var);
    
    // Print individual results
    local top1;
    top1 = "Group"$~"Ind. Test";
    #ifminkernelversion(20)
    sprintf("%15s", top1);
    sprintf("%14.0f %14.4f", seqa(1, 1, cols(y)), Nkpss);
   
    // Print panel results
    "Panel test statistic:";
    sprintf("%14s %14.4f", "FzK"$|"p-val", FZk|(1 - cdfn(FZk)));
    #else;
    top1$|(ntos(seqa(1, 1, cols(y))~Nkpss, 4));

    // Print panel results
    "Panel test statistic:";
    ("FzK"$|"p-val")~ntos(FZk|(1 - cdfn(FZk)), 4);
    #endif;
    
    retp(Nkpss, FZk, 1 - cdfn(FZk));
endp;


proc(1) = _get_FKPSS_Ft(y, model, k, varm, ft);
    local t, sink, cosk, z, s, lrv, kpss;
    local b, e1, sig2, se, ssr;
    local bwl;
    
    t = rows(y);
    sink = sin(2 * pi * k * seqa(1, 1, t)/t);
    cosk = cos(2 * pi * k * seqa(1, 1, t)/t);
    
    if model == 1;
        z = ones(t, 1)~sink~cosk~ft;
    endif;
    
    if model ==2 ;
        z = ones(t, 1)~seqa(1, 1, t)~sink~cosk~ft;
    endif;
    
    { b, e1, sig2, se, ssr } = myols(y, z);
    
    // Partial sum of residuals
    S = cumsumc(e1);
    
    bwl = round(4 * (T/100)^(2/9));
    screen off;
    lrv = _get_lrv_type(varm, ssr, e1, bwl, 1);
    screen on;
    KPSS = sumc(s .* s)/(t^2 * lrv);
    
    retp(KPSS);
endp;
