/*
**> qr_fourier_adf
**  Reference:
**  Li, H., & Zheng, C. (2018).
**  Unit root quantile autoregression testing with smooth structural changes.
**  Finance Research Letters, 25, 83-89.
**
**
**  Format:  qr_f_adf         = QR_Fourier_ADF(y, model, tau [, p, k, _print]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = Model with constant
**                      2 = Model with constant and trend
**
**           tau     -  quantile (0.1,...,1)
**
**           p       -  Optional, number of lags for Dy; 0 = no lags. Default = 8.
**
**           k       -  Optional, number of Fourier frequency. Default = 3.
**
**           _print  -  Optional, print option "true" for printing results. Default = "true".
**
**  Output:  tn      -  tn statistic
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

proc(1) = QR_Fourier_ADF(y, model, tau, ...);
    local n, t, y1, dy, dyl, x, qr_beta, rho_tau, delta2;
    local tn, dc, dt;
    local sink, cosk, dt_vec, pmax, k, _print;
    
    // Data checks
    _checkForMissings(y, currentprocname());
    { dt_vec, y } =_checkfordate(y);
    
    // Get defaults
    { pmax, k, _print } = dynargsGet(1|3, 8, 3, "true");
    
    // Get deterministic terms
    { t, dy, y1, dc, dt } = _getFourierDeterministic(y);
    
    // Trim y terms
    y    = trimr(y, pmax + 1, 0);
    y1   = trimr(y1, pmax + 1, 0);
    
    // Update t
    t = rows(y);
    
    // Start x term
    x = y1;
    
    // Lagged terms
    if pmax > 0;
        
        // Create lags of dy
        dyl = zeros(rows(y)+pmax+1, pmax);
        
        // Fill dy matrix
        for j(1, pmax, 1);
            dyl[., j] = lagn(dy, j);
        endfor;
        
        // Trim for lags
        dyl  = trimr(dyl, pmax+1, 0);
        
        // Add to x term
        x = x ~ dyl;
    else;
        dyl = miss();
    endif;
    
    // Get Fourier Term
    { sink, cosk } = _getFourierTerms(t, k);
    x = x ~ sink ~ cosk;
    
    // Add trend
    if model == 2;
        x = x ~ trimr(dt, pmax+1, 0);
    endif;
    
    // Get QR regression beta
    qr_beta = __get_qr_adf_beta(Y, X, tau);
    
    // AR term for QR reg
    rho_tau = qr_beta[2];
    
    // Get delta2
    delta2 = __get_qr_adf_delta2(y, x, miss(), tau, qr_beta);
    
    // Get h
    n = rows(y);
    tn = __get_qr_adf_stat(y, y1, dyl, x, rho_tau, tau, n, pmax, 1);
    
    if _print=="true";
        _printHeaderTSPDLIB(0, 0, 1, model, 4, 0, "Quantile Fourier ADF", "Unit root", 0);
        
        local top, side, stats, dec, colwidth, cv;
        top = "";
        side = "quantile:"$|"rho(quantile):"$|"Fourier QR-ADF:";
        stats = tau|rho_tau|tn;  
        dec = 3;
        colwidth = 15;
        cv = {};
        
        // Print stats table
        _printStatsTable(top, side, stats, cv, dec, colwidth, 0);
    
    endif;
    retp(tn);
    
endp;

/*
**> qr_fourier_adf_bootstrap
**  Reference:
**  Li, H., & Zheng, C. (2018).
**  Unit root quantile autoregression testing with smooth structural changes.
**  Finance Research Letters, 25, 83-89.
**
**
**  Format:  {test_boot, cv}  = QR_Fourier_ADF_bootstrap(y, model, tau [, p, k, Nboot]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = Model with constant
**                      2 = Model with constant and trend
**
**           tau     -  quantile (0.1,...,1)
**
**           p       -  Optional, number of lags for Dy; 0 = no lags. Default = 8.
**
**           k       -  Optional, number of Fourier frequency. Default = 3.
**
**           Nboot   -  Optional, number of bootstrap replications. Default = 1000.
**
**  Output:  test_boot  - test statistic for a given quantile
**			 cv         - 1, 5, and 10 percent bootstrap critical values for tn test
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/
proc(2) = QR_Fourier_ADF_bootstrap(y, model, tau, ...);
    local t, sink, cosk, c, trend, dy, y1, p_lags, dy_lags, x;
    local b, yd, yd1, fi, mu, replace;
    local tt, mustar, ydstar, ystar;
    local test_boot, tn_boot, cv_boot, p, k, Nboot, dt_vec;
    
    // Get defaults
    { p, k, Nboot } = dynargsGet(1|3, 8, 3, 1000);
    
    // Separate out data
    { dt_vec, y } =_checkfordate(y);
    
    // See Li & Zheng (2018, p.86)
    // Get deterministic terms
    { t, dy, y1, c, trend } = _getFourierDeterministic(y);
    
    // Get Fourier Term
    { sink, cosk } = _getFourierTerms(t, k);
    
    if p  > 0;
        p_lags  = seqa(1, 1, p);
        dy_lags = lagn(dy, p_lags);
    endif;
    
    // X under the null hypothesis
    x = c;
    if model == 1;
        // Add Fourier terms
        x = x ~ sink ~ cosk;
        
    endif;
    
    if model == 2;
        // Add Fourier terms
        x = x ~ trend ~ sink ~ cosk ;
    endif;
    
    // Add lags
    if p > 0;
        x = x ~ dy_lags ;
    endif;
    
    dy = trimr(dy, p+1, 0);
    x  = trimr(x, p+1, 0);
    y = trimr(y, p+1, 0);
    b  = inv(x'x)*x'y;
    yd = y - x * b;
    yd1= lagn(yd,1);
    yd = trimr(yd, 1, 0);
    yd1= trimr(yd1,1, 0);
    fi = inv(yd1'yd1)*yd1'yd;
    mu = yd - yd1 * fi;     // Residuals from AR(1) model
    mu = mu - meanc(mu);    //Centered residuals
    
    tt = rows(mu);
    test_boot = zeros(Nboot,1);
    for reps(1,Nboot,1);
        replace = 1;
        mustar = sampleData(mu, tt, replace);
        ydstar = zeros(tt,1);
        ydstar[1] = mustar[1];
        for s(2,tt,1);
            ydstar[s]= ydstar[s-1] + mustar[s];
        endfor;
        ystar = ydstar;
        tn_boot = QR_Fourier_ADF(ystar, model, tau, p, k, "false");
        test_boot[reps] = tn_boot;
    endfor; //End for replications
    
    test_boot = sortc(test_boot, 1);
    cv_boot   = test_boot[0.99*Nboot] ~ test_boot[0.95*Nboot] ~ test_boot[0.90*Nboot];
    
    retp( test_boot, cv_boot);
endp;
