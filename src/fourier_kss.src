
/*
**> fourier_kss
**  Reference:
**  Christopoulos, D. K., & Leon-Ledesma, M. A. (2010).
**  Smooth breaks and non-linear mean reversion: Post-Bretton Woods real exchange rates.
**  Journal of International Money and Finance, 29(6), 1076-1093.
**
**  Format:  { Ftau, p, f } = Fourier_KSS(y, model, test [, pmax, fmax, ic]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	Scalar, sets the model type.
**                      1 = Constant
**                      2 = Constant and trend
**
**           test     - Optional, string sets which test is implmented, either "FADF"
**                      "FKSS"
**
**           pmax    -  Optional, Maximum number of lags for Dy; 0=no lags. Default = 8.
**
**           fmax    -  Optional, Maximumum number of single Fourier frequency. Default = 3.
**                      (upper bound is 5)
**
**           ic      -  Optional, information Criterion:
**                      1 = Akaike
**                      2 = Schwarz
**                      3 = t-stat significance
**                      Default = 3.
**
**  Output:  Ftau    - Ftau statistic
**
**           f       - chosen Number of single frequency
**
**			 p       - number of lags selected by chosen information criterion
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

/*12 December 2020*/

proc(3) = Fourier_KSS(y, model,...);
    local pmax, fmax, ic, t, taup, aicp, sicp, tstatp;
    local dc, dt, z, a, v, dv, v1;
    local p_lags, dv_lags, p, x, dep;
    local LL, n, k, p_opt, tn;
    local b, e1, sig2, se, ssr;
    local k_star, F_trig, p_val, sink, cosk, dt_vec, test;
    
    // Error checks for missings
    _checkForMissings(y, currentprocname());
    
    // Get optional arguments
    { test, pmax, fmax, ic } = dynargsGet(1|4, "FKSS", 8, 5, 3);
    
    // Check for dates
    { dt_vec, y } =_checkfordate(y);
    
    t    = rows(y);
    taup = zeros(pmax + 1, 1);
    aicp = zeros(pmax + 1, 1);
    sicp = zeros(pmax + 1, 1);
    tstatp = zeros(pmax + 1, 1);
    
    // Constant
    dc = ones(t, 1);
    
    // Trend
    dt = seqa(1, 1, t);
    
    // Get k_star
    { k_star, F_trig, p_val } = _get_kstar(y, model, fmax);
    
    // Fourier series
    // Get Fourier terms
    { sink, cosk } = _getFourierTerms(t, k_star);
    
    // Set deterministic components
    if model == 1;
        z = dc;
    elseif model == 2;
        z = dc ~ dt;
    endif;
    
    // Add Fourier terms
    z = z ~ sink ~ cosk;
    
    // Residual regression
    a = y/z;
    v = y - z * a;
    
    { dv, v1 } = __get_resid_lags_kss(v, test);
    
    if pmax > 0;
        p_lags  = seqa(1, 1, pmax);
        dv_lags = lagn(dv, p_lags);
    endif;
    
    for p(0, pmax, 1);
        if p == 0;
            x = v1;
        elseif p > 0;
            x = v1 ~ dv_lags[., 1:p];
        endif;
        
        dep = trimr(dv, p+1, 0);
        x   = trimr(x, p+1, 0);
        {b, e1, sig2, se, ssr} = myols(dep, x);
        taup[p+1] = b[1]/se[1];
        n = rows(x);
        k = cols(x);
        
        // Log-likelihood
        LL = -n/2 * (1 + ln(2*pi) + ln(e1'e1/n));
        
        aicp[p+1] = (2 * k-2 * LL)/n;
        sicp[p+1] = (k * ln(n) - 2 * LL)/n;
        tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
    endfor;
    
    // Check results
    // seqa(0,1,13)~taup;
    p_opt = _get_lag(ic, pmax, aicp, sicp, tstatp);
    tn    = taup[p_opt];
    
    _printHeaderTSPDLIB(ic, 0, 1, model, 5, 0, test, "Unit root", 0);
    
    local top, side, stats, dec, colwidth, cv;
    top = "";
    side = "tau";
    stats = tn;
    dec = 3;
    colwidth = 15;
    cv = {};
    
    // Print stats table
    _printStatsTable(top, side, stats, cv, dec, colwidth, 0);
    
    retp(tn, k_star, p_opt - 1);
endp;

proc(2) = __get_resid_lags_kss(res, model);
    local dv, v1;
    
    dv = diff(res, 1);
    
    if model $== "FADF";
        v1 = lagn(res, 1);
    endif;
    if model $== "FKSS";
        v1 = lagn(res^3,1);
    endif;
    
    
    retp(dv, v1);
endp;

// Critical Values (see, Christopoulos, & Leon-Ledesma , 2010)
proc(1) = _get_cv_Fourier_KSS(t, model, k, test);
    local test_sim, s, MCr, e0, rho, eps;
    local e, a, dc, dt, sink, cosk, y;
    local z, v, dv, v1, cv;
    local b, e1, sig2, se, ssr;
    
    MCr  = 10000;
    test_sim = zeros(MCr, 1);
    for s(1, MCr, 1);
        // Starting value for the time series
        e0 = 0;
        // AR(1) parameter
        rho = 1;
        // Innovations
        eps = rndn(T, 1);
        // Simulate AR(1) model
        e = recserar(eps, e0, rho);
        
        // Deterministic terms
        dc   = ones(T, 1);
        dt   = seqa(1, 1, T);
        
        // Get Fourier terms
        { sink, cosk } = _getFourierTerms(t, k);
        
        if model == 1;
            y = rndu(1,1)*dc + rndu(1,1)*sink + rndu(1,1)*cosk + e;
        endif;
        if model == 2;
            y = rndu(1,1)*dc + rndu(1,1)*dt + rndu(1,1)*sink + rndu(1,1)*cosk + e;
        endif;
        
        // Residual regression
        if model == 1;
            z = sink ~ cosk ~ dc;
        endif;
        if model == 2;
            z = sink ~ cosk ~ dc ~ dt;
        endif;
        a  = y / z;
        v  = y - z * a;
        dv = diff(v,1);
        if test $== "FADF";
            v1 = lagn(v, 1);
        endif;
        if test $== "FKSS";
            v1 = lagn(v^3,1);
        endif;
        dv = trimr(dv, 1, 0);
        v1 = trimr(v1, 1, 0);
        {b, e1, sig2, se, ssr} = myols(dv, v1);
        test_sim[s] = b[1]/se[1];
    endfor;
    test_sim = sortc(test_sim,1);
    cv = test_sim[0.01*MCr] ~ test_sim[0.05*MCr] ~ test_sim[0.10*MCr];
    retp(cv);
endp;

/*
**> fourier_kss_bootstrap
**  Reference:
**  Christopoulos, D. K., & Leon-Ledesma, M. A. (2010).
**  Smooth breaks and non-linear mean reversion: Post-Bretton Woods real exchange rates.
**  Journal of International Money and Finance, 29(6), 1076-1093.
**
**  Format:  { test_boot, cv_boot } = Fourier_KSS_bootstrap(y, model, test [, pmax, fmax, ic]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = Constant
**                      2 = Constant and trend
**
**           test     - "FADF"
**                      "FKSS"
**
**           pmax    -  Maximum number of lags for Dy; 0=no lags
**
**           fmax    -  Maximumum number of single Fourier frequency
**                      (upper bound is 5)
**
**           ic      -  Information Criterion:
**                      1 = Akaike
**                      2 = Schwarz
**                      3 = t-stat significance
**
**           Nboot   -  Optional, number of bootstrap replications. Default = 1000.
**
**  Output:  test_boot  - test statistic for a given quantile
**			 cv_boot    - 1, 5, and 10 percent bootstrap critical values for tn test
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/
proc(2) = Fourier_KSS_bootstrap(y, model, ...);
    local t, dc, dt, sink, cosk, z, a, v, dv, v1, x, p_lags;
    local dy, b, yd, yd1, fi, mu;
    local tt, mustar, ydstar, ystar, dt_vec;
    local test_boot, replace, cv_boot, k_star, F_trig, p_val, test, p, kmax, ic, Nboot;
    
    // Data checks
    _checkForMissings(y, currentprocname());
    { dt_vec, y } = _checkfordate(y);
    
    // Get optional arguments
    { test, p, kmax, ic, Nboot } = dynargsGet(1|5, "FKSS", 8, 5, 3, 1000);
    
    t    = rows(y);
    dc   = ones(t, 1);
    dt   = seqa(1, 1, t);
    
    // Get k_star
    { k_star, F_trig, p_val } = _get_kstar(y, model, kmax);
    
    // Fourier series
    // Get Fourier terms
    { sink, cosk } = _getFourierTerms(t, k_star);
    
    // Residual regression
    if model == 1;
        z = dc ~ sink ~ cosk;
        a = y/z;
        v = y - z * a;
    elseif model == 2;
        z = dc ~ dt ~ sink ~ cosk;
        a = y/z;
        v = y - z * a;
    endif;
    
    dv = diff(v, 1);
    if test $== "FADF";
        v1 = lagn(v, 1);
    endif;
    if test $== "FKSS";
        v1 = lagn(v^3,1);
    endif;
    
    // X under the null hypothesis rho*v(t-1)
    if p == 0;
        x = lagn(dv, 1);
    elseif p > 0;
        p_lags  = seqa(1, 1, p);
        x = lagn(dv, p_lags);
    endif;
    
    dy = trimr(dv, p+1, 0);
    x  = trimr(x, p+1, 0);
    b  = inv(x'x)*x'dy;
    yd = dy - x * b;
    yd1= lagn(yd,1);
    yd = trimr(yd, 1, 0);
    yd1= trimr(yd1, 1, 0);
    fi = inv(yd1'yd1)*yd1'yd;
    mu = yd - yd1 * fi;     // Residuals from AR(1) model
    mu = mu - meanc(mu);    //Centered residuals
    
    tt = rows(mu);
    test_boot = zeros(Nboot, 1);
    for reps(1, Nboot, 1);
        replace = 1;
        mustar = sampleData(mu, tt, replace);
        ydstar = zeros(tt,1);
        ydstar[1] = mustar[1];
        for s(2,tt,1);
            ydstar[s]= ydstar[s-1] + mustar[s];
        endfor;
        ystar = ydstar;
        
        local Ftau_boot, p_temp, k_temp;
        { Ftau_boot, p_temp, k_temp } = Fourier_KSS(ystar, model, test, p, kmax, ic);
        test_boot[reps] = Ftau_boot;
        
    endfor; //End for replications
    
    test_boot = sortc(test_boot, 1);
    cv_boot   = test_boot[0.99*Nboot] ~ test_boot[0.95*Nboot] ~ test_boot[0.90*Nboot];
    
    retp(test_boot, cv_boot);
endp;


proc(3) = _get_kstar(y, model, fmax);
    local t, c, trend, sinf, cosf;
    local z, zr, F_trig, p_val, f;
    
    t     = rows(y);
    c     = ones(t, 1);
    trend = seqa(1, 1, t);
    
    // Get optimal fourier
    f = _get_fourier(y, model, fmax);
    
    // Get Fourier terms
    { sinf, cosf } = _getFourierTerms(t, f);
    
    if model == 1;
        z  = c ~ sinf ~ cosf;
        zr = c;
    elseif model == 2;
        z  = c ~ trend ~ sinf ~ cosf;
        zr = c ~ trend;
    endif;
    
    F_trig = _get_Ftest(y, Zr, z);
    p_val   = cdfFc(F_trig, 2, rows(y)-cols(z));
    
    retp(f, F_trig, p_val);
endp;
