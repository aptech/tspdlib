
/*
**> fourier_adf
**  Reference:
**  Enders, W., and Lee, J. (2012),
**  "The flexible Fourier form and Dickey-Fuller type unit root test"
**  Economics Letters,117,(2012),196-199.
**
**  Format:  { ADFk, k, p, cv[k, .] } = Fourier_ADF(y, model[, pmax, fmax, ic]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = Constant
**                      2 = Constant and trend
**
**           pmax    -  Optional, maximum number of lags for Dy; 0=no lags. Default = 8.
**
**           fmax    -  Optional, Maximumum number of single Fourier frequency. Default  5.
**                      (upper bound is 5)

**           ic      -  Optional, information criterion. Default = 3:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**
**  Output:  ADFk    - ADF(k) statistic
**
**           k       - Number of singlefrequency
**
**			 p       - number of lags selected by chosen information criterion
**
**			 cv      - 1%, 5%, 10% critical values for the chosen model and k
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

/*07 January 2015*/


proc(4) = Fourier_ADF(y, model, ...);
    local t, p, j, taup, aicp, sicp, tstatp, ssrp, ssrk, tauk,
        k, dy, ly, dc, dt, sink, cosk, lmat, dep, y1, ldy,
        sbt, trnd, sinp, cosp, z, adf,
        b, e1, sig2, se, ssr, f, crit, keep_p, opt_lag, pmax, fmax, ic, dt_vec;
    
    _checkForMissings(y, "Fourier_ADF");
    
    t = rows(y);
    
    { pmax, fmax, ic } = dynargsGet(1|3, 8, 5, 3);
    
    // Check for dates
    { dt_vec, y } =_checkfordate(y);
    
    taup = zeros(pmax + 1, 1);
    aicp = zeros(pmax + 1, 1);
    sicp = zeros(pmax + 1, 1);
    tstatp = zeros(pmax + 1, 1);
    ssrp = zeros(pmax + 1, 1);
    ssrk = zeros(fmax, 1);
    tauk = zeros(fmax, 1);
    keep_p = zeros(fmax, 1);
    
    k = 1;
    do while k <= fmax;
        dy = diff(y, 1);
        ly = lagn(y, 1);
        
        // Deterministic term=constant
        dc = ones(t, 1);
        
        // Deterministic term=trend
        dt = seqa(1, 1, t);
        sink = sin(2 * pi * k * seqa(1, 1, t)/t);
        cosk = cos(2 * pi * k * seqa(1, 1, t)/t);
        p = 0;
        do while p <= pmax;
            lmat = zeros(rows(dy), p + 1);
            j = 1;
            do while j <= p;
                lmat[., j] = lagn(dy, j);
                j = j + 1;
            endo;
            dep = trimr(dy, p + 1, 0);
            y1 = trimr(ly, p + 1, 0);
            ldy = trimr(lmat, p + 1, 0);
            sbt = trimr(dc, p + 1, 0);
            trnd = trimr(dt, p + 1, 0);
            sinp = trimr(sink, p + 1, 0);
            cosp = trimr(cosk, p + 1, 0);
            if p == 0;
                if model == 1;
                    z = y1~sbt~sinp~cosp;
                endif;
                
                if model == 2;
                    z = y1~sbt~trnd~sinp~cosp;
                endif;
                
            elseif p > 0;
                if model == 1;
                    z = y1~sbt~sinp~cosp~ldy[., 1:p];
                endif;
                if model == 2;
                    z = y1~sbt~trnd~sinp~cosp~ldy[., 1:p];
                endif;
            endif;
            
            {b, e1, sig2, se, ssr} = myols(dep, z);
            taup[p+1] = b[1]/se[1];
            aicp[p+1] = ln(e1'e1/rows(z)) + 2 * (k + 2)/rows(z);
            sicp[p+1] = ln(e1'e1/rows(z)) + (cols(z) + 2) * ln(rows(z))/rows(z);
            tstatp[p+1] = b[cols(z)]/se[cols(z)];
            ssrp[p+1] = ssr;
            p = p + 1;
        endo;
        p  = _get_lag(ic, pmax, aicp, sicp, tstatp);
        keep_p[k] = p;
        ssrk[k] = ssrp[p];
        tauk[k] = taup[p];
        k = k + 1;
    endo;
    
    f = minindc(ssrk);
    ADF = tauk[f];
    opt_lag = keep_p[f];
    
    // Critical Values (see, Enders & Lee, 2012, Table 1b)
    crit = zeros(5, 3);
    if model == 1;
        if T <= 150;
            crit = {-4.42 -3.81 -3.49,
                -3.97 -3.27 -2.91,
                -3.77 -3.07 -2.71,
                -3.64 -2.97 -2.64,
                -3.58 -2.93 -2.60};
        endif;
        
        if 151 < T and T <= 349;
            crit = {-4.37 -3.78 -3.47,
                -3.93 -3.26 -2.92,
                -3.74 -3.06 -2.72,
                -3.62 -2.98 -2.65,
                -3.55 -2.94 -2.62};
        endif;
        
        if 350 < T and T <= 500;
            crit = {-4.35 -3.76 -3.46,
                -3.91 -3.26 -2.91,
                -3.70 -3.06 -2.72,
                -3.62 -2.97 -2.66,
                -3.56 -2.94 -2.62};
        endif;
        
        if 500 < T;
            crit = {-4.31 -3.75 -3.45,
                -3.89 -3.25 -2.90,
                -3.69 -3.05 -2.71,
                -3.61 -2.96 -2.64,
                -3.53 -2.93 -2.61};
        endif;
    endif;
    
    if model == 2;
        if T <= 150;
            crit = {-4.95 -4.35 -4.05,
                -4.69 -4.05 -3.71,
                -4.45 -3.78 -3.44,
                -4.29 -3.65 -3.29,
                -4.20 -3.56 -3.22};
        endif;
        
        if 151 < T and T <= 349;
            crit = {-4.87 -4.31 -4.02,
                -4.62 -4.01 -3.69,
                -4.38 -3.77 -3.43,
                -4.27 -3.63 -3.31,
                -4.18 -3.56 -3.24};
        endif;
        
        if 350 < T and  T<= 500;
            crit = {-4.81 -4.29 -4.01,
                -4.57 -3.99 -3.67,
                -4.38 -3.76 -3.43,
                -4.25 -3.64 -3.31,
                -4.18 -3.56 -3.25};
        endif;
        
        if 500 < T;
            crit = {-4.80 -4.27 -4.00,
                -4.58 -3.98 -3.67,
                -4.38 -3.75 -3.43,
                -4.24 -3.63 -3.30,
                -4.16 -3.55 -3.24};
        endif;
    endif;
    
    _printHeaderTSPDLIB(ic, 0, 2, model, 4, 0, "Fourier ADF", "Unit root", 0);

    // Print results & Critical values
    local top, side, stats, dec, colwidth;
    side = "ADF-stat:";
    top = "";
    stats = ADF;
    dec = 3;
    colwidth = 15;
            
    _printStatsTable(top, side, stats, crit[f, .]', dec, colwidth, 0, opt_lag-1, f);
    _printConclusion(ADF, crit[f, .], 0, "unit root");

    retp(ADF, f, opt_lag-1, crit[f, .]);
endp;

proc (2) = fourierADFFTest(y, model, k, p);
    local t, dy, ly, dc, dt, sink, cosk,
        dep, y1, ldy, sbt, trnd, sinp, cosp, z1, z2,
        b1, e1, sig21, se1, ssr1, b2, e2, sig22, se2, ssr2,
        k1, k2, lmat, j;
    
    // Check number of columns of y
    if cols(y) > 1;
        errorlogat "Cannot run test, y must be single column.";
        end;
    endif;
    
    t = rows(y);
    
    dy = diff(y, 1);
    ly = lagn(y, 1);
    
    // Deterministic term=constant
    dc = ones(t, 1);
    
    // Deterministic term=trend
    dt = seqa(1, 1, t);
    sink = sin(2 * pi * k * seqa(1, 1, t)/t);
    cosk = cos(2 * pi * k * seqa(1, 1, t)/t);
    
    // Find lmat
    lmat = zeros(rows(dy), p + 1);
    j = 1;
    do while j <= p;
        local tmp;
        tmp = lagn(dy, j);
        lmat[., j] = lagn(dy, j);
        j = j + 1;
    endo;
    
    // Prepare data
    dep = trimr(dy, p + 1, 0);
    y1 = trimr(ly, p + 1, 0);
    ldy = trimr(lmat, p + 1, 0);
    sbt = trimr(dc, p + 1, 0);
    trnd = trimr(dt, p + 1, 0);
    sinp = trimr(sink, p + 1, 0);
    cosp = trimr(cosk, p + 1, 0);
    
    if p == 0;
        if model == 1;
            z1 = y1~sbt;
        endif;
        
        if model == 2;
            z1 = y1~sbt~trnd;
        endif;
        
    elseif p > 0;
        if model == 1;
            z1 = y1~sbt~ldy[., 1:p];
        endif;
        if model == 2;
            z1 = y1~sbt~trnd~ldy[., 1:p];
        endif;
    endif;
    
    // Unrestricted model
    z2 = z1~sinp~cosp;
    
    // Estimate model one
    // Restricted model
    {b1, e1, sig21, se1, ssr1} = myols(dep, z1);
    
    // Unrestricted model
    {b2, e2, sig22, se2, ssr2} = myols(dep, z2);
    
    // Count dimension of models
    k1 = cols(z1);
    k2 = cols(z2);
    
    // Generate F_stat
    F_stat = ((ssr1 - ssr2)/(k2 - k1))/(ssr2/(t-k2));
    
    // Find p-value
    p_val = cdffc(F_stat, k2 - k1, t-k2);
    
    // Print results
    cv_fstat = fstatcv(model, t);
    
    
    retp(F_stat, cv_fstat);
endp;

proc (1) = fstatcv(model, T);
    local crit;
    
    // Critical Values (see, Enders & Lee, 2012, Table 1b)
    crit = zeros(5, 3);
    
    if model == 1;
        if T <= 150;
            crit = { 6.35 7.58 10.35 };
        endif;
        
        if 151 < T and T <= 349;
            crit = { 6.25 7.41 10.02 };
        endif;
        
        if 350 < T and T <= 500;
            crit = { 6.16 7.29 9.78 };
        endif;
        
        if 500 < T;
            crit = { 6.11 7.25 9.72 };
        endif;
    endif;
    
    if model == 2;
        if T <= 150;
            crit = { 7.78 9.14 12.21 };
        endif;
        
        if 151 < T and T <= 349;
            crit = { 7.62 8.88 11.70 };
        endif;
        
        if 350 < T and T <= 500;
            crit = { 7.53 8.76 11.52 };
        endif;
        
        if 500 < T;
            crit = { 7.50 8.71 11.35 };
        endif;
    endif;
    retp(crit);
endp;
