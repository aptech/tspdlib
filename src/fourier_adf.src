
/*
**> fourier_adf
**  Reference:
**  Enders, W., and Lee, J. (2012),
**  "The flexible Fourier form and Dickey-Fuller type unit root test"
**  Economics Letters,117,(2012),196-199.
**
**  Format:  { ADFk, k, p, cv[k, .] } = Fourier_ADF(y, model[, pmax, fmax, ic]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = Constant
**                      2 = Constant and trend
**
**           pmax    -  Optional, maximum number of lags for Dy; 0=no lags. Default = 8.
**
**           fmax    -  Optional, Maximumum number of single Fourier frequency. Default  5.
**                      (upper bound is 5)

**           ic      -  Optional, information criterion. Default = 3:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**
**  Output:  ADFk    - ADF(k) statistic
**
**           k       - Number of singlefrequency
**
**			 p       - number of lags selected by chosen information criterion
**
**			 cv      - 1%, 5%, 10% critical values for the chosen model and k
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

/*07 January 2015*/


proc(4) = Fourier_ADF(y, model, ...);
    local t, p, taup, aicp, sicp, tstatp, ssrp, ssrk, tauk,
        k, dy, ly, dc, dt, sink, cosk, lmat, dep, ldy,
        adf, f, crit, keep_p, opt_lag, pmax, fmax, ic,
        dt_vec, zero_vec, wavelet, z;
    
    // Check for missings
    _checkForMissings(y, currentprocname());
    
    // Get optional arguments
    { pmax, fmax, ic, wavelet } = dynargsGet(1|4, 8, 5, 3, 0);
    
    // Check for dates
    { dt_vec, y } =_checkfordate(y);
    
    // Storage matrices
    taup = zeros(pmax + 1, 1);
    aicp = zeros(pmax + 1, 1);
    sicp = zeros(pmax + 1, 1);
    tstatp = zeros(pmax + 1, 1);
    ssrp = zeros(pmax + 1, 1);
    ssrk = zeros(fmax, 1);
    tauk = zeros(fmax, 1);
    keep_p = zeros(fmax, 1);
    
    // Get deterministic terms
    { t, dy, ly, dc, dt } = _getFourierDeterministic(y);
    
    // Lag y variable
    lmat = lagn(dy, seqa(1, 1, pmax));
    
    // Zero vector
    zero_vec = zeros(rows(dy), 1);
    
    k = 1;
    do while k <= fmax;
        
        // Get Fourier terms
        { sink, cosk } = _getFourierTerms(t, k);
        
        p = 0;
        do while p <= pmax;
            
            dep = trimr(dy, p + 1, 0);
            
            // Get lags of y
            ldy = trimr(zero_vec, p+1, 0);
            
            if p>0;
                ldy = trimr(lmat[., 1:p], p+1, 0)~ldy;
            endif;
            
            // Get independent variables
            if wavelet;
                z = __get_model_x(ly, p, model, ldy, 0, dc, dt, sink);
            else;
                z = __get_model_x(ly, p, model, ldy, 0, dc, dt, sink, cosk);
            endif;
            
            // Run OLS
            { taup[p+1], aicp[p+1], sicp[p+1], tstatp[p+1], ssrp[p+1] } = _runFourierOLS(dep, z, k);
            
            p = p + 1;
        endo;
        
        // Find optimal lag
        p  = _get_lag(ic, pmax, aicp, sicp, tstatp);
        
        keep_p[k] = p;
        ssrk[k] = ssrp[p];
        tauk[k] = taup[p];
        k = k + 1;
    endo;
    
    f = minindc(ssrk);
    ADF = tauk[f];
    opt_lag = keep_p[f];
    
    // Critical Values (see, Enders & Lee, 2012, Table 1b)
    crit = _getFourierADFCrit(T, model);
    
    _printHeaderTSPDLIB(ic, 0, 2, model, 5, 0, "Fourier ADF", "Unit root", 0);
    
    // Print results & Critical values
    local top, side, stats, dec, colwidth;
    side = "ADF-stat:";
    top = "";
    stats = ADF;
    dec = 3;
    colwidth = 15;
    
    _printStatsTable(top, side, stats, crit[f, .]', dec, colwidth, 0, opt_lag-1, f);
    _printConclusion(ADF, crit[f, .], 0, "unit root");
    
    retp(ADF, f, opt_lag-1, crit[f, .]);
endp;

proc (5) = _runFourierOLS(dep, z, k, ...);
    local fourier, tstat_adj, b, e1, sig2, se, ssr, taup, aicp, sicp, tstatp, ssrp, LL, n;
    
    { fourier, tstat_adj } = dynargsGet(1|2, 0, 0);
    
    {b, e1, sig2, se, ssr} = myols(dep, z);
    taup = (b[1] - tstat_adj)/se[1];
    
    if fourier;
        aicp = ln(e1'e1/rows(z)) + 2 * (k + 2)/rows(z);
        sicp = ln(e1'e1/rows(z)) + (cols(z) + 2) * ln(rows(z))/rows(z);
        
        tstatp = b[cols(z)]/se[cols(z)];
    else;
        n = rows(z);
        
        // Log-likelihood
        LL = -n/2 * (1 + ln(2*pi) + ln(e1'e1/n));
        
        // Get AIC
        aicp = (2 * k-2 * LL)/n;
        
        // Get SIC
        sicp = (k * ln(n) - 2 * LL)/n;
        
        tstatp = abs(b[cols(z)]/se[cols(z)]);
    endif;
    
    
    ssrp = ssr;
    
    retp(taup, aicp, sicp, tstatp, ssrp);
endp;

proc (1) = _getFourierADFCrit(T, model);
    local crit;
    
    crit = zeros(5, 3);
    if model == 1;
        if T <= 150;
            crit = {-4.42 -3.81 -3.49,
                -3.97 -3.27 -2.91,
                -3.77 -3.07 -2.71,
                -3.64 -2.97 -2.64,
                -3.58 -2.93 -2.60};
        endif;
        
        if 151 < T and T <= 349;
            crit = {-4.37 -3.78 -3.47,
                -3.93 -3.26 -2.92,
                -3.74 -3.06 -2.72,
                -3.62 -2.98 -2.65,
                -3.55 -2.94 -2.62};
        endif;
        
        if 350 < T and T <= 500;
            crit = {-4.35 -3.76 -3.46,
                -3.91 -3.26 -2.91,
                -3.70 -3.06 -2.72,
                -3.62 -2.97 -2.66,
                -3.56 -2.94 -2.62};
        endif;
        
        if 500 < T;
            crit = {-4.31 -3.75 -3.45,
                -3.89 -3.25 -2.90,
                -3.69 -3.05 -2.71,
                -3.61 -2.96 -2.64,
                -3.53 -2.93 -2.61};
        endif;
    endif;
    
    if model == 2;
        if T <= 150;
            crit = {-4.95 -4.35 -4.05,
                -4.69 -4.05 -3.71,
                -4.45 -3.78 -3.44,
                -4.29 -3.65 -3.29,
                -4.20 -3.56 -3.22};
        endif;
        
        if 151 < T and T <= 349;
            crit = {-4.87 -4.31 -4.02,
                -4.62 -4.01 -3.69,
                -4.38 -3.77 -3.43,
                -4.27 -3.63 -3.31,
                -4.18 -3.56 -3.24};
        endif;
        
        if 350 < T and  T<= 500;
            crit = {-4.81 -4.29 -4.01,
                -4.57 -3.99 -3.67,
                -4.38 -3.76 -3.43,
                -4.25 -3.64 -3.31,
                -4.18 -3.56 -3.25};
        endif;
        
        if 500 < T;
            crit = {-4.80 -4.27 -4.00,
                -4.58 -3.98 -3.67,
                -4.38 -3.75 -3.43,
                -4.24 -3.63 -3.30,
                -4.16 -3.55 -3.24};
        endif;
    endif;
    
    retp(crit);
endp;

proc (0) = __error_check_single_y_column(y, ...);
    local level;
    
    level = dynargsGet(1, 0);
    
    if cols(y) > 1;
        local s;
        s = sprintf("'%s': Cannot run test, y must be a single column", currentprocname(level+1));
        errorlogat "Cannot run test, y must be single column.";
        end;
    endif;
endp;

proc (2) = fourierADFFTest(y, model, k, p);
    local t, dy, ly, dc, dt, dep, y1, ldy, sbt,
        trnd, sinp, cosp, z1, z2, f_stat, cv_fstat;
    
    // Check number of columns of y
    __error_check_single_y_column(y, 0);
    
    { t, dy, ly, dc, dt } = _getFourierDeterministic(y);
    
    // Get Fourier terms
    { sinp, cosp } = _getFourierTerms(t, k, p);
    
    // Lag y variable
    ldy = trimr(lagn(dy, seqa(1, 1, p))~zeros(rows(dy), 1), p+1, 0);
    
    // Prepare data
    dep = trimr(dy, p + 1, 0);
    y1 = trimr(ly, p + 1, 0);
    
    sbt = trimr(dc, p + 1, 0);
    trnd = trimr(dt, p + 1, 0);
    
    if p == 0;
        if model == 1;
            z1 = y1~sbt;
        endif;
        
        if model == 2;
            z1 = y1~sbt~trnd;
        endif;
        
    elseif p > 0;
        if model == 1;
            z1 = y1~sbt~ldy[., 1:p];
        endif;
        if model == 2;
            z1 = y1~sbt~trnd~ldy[., 1:p];
        endif;
    endif;
    
    // Unrestricted model
    z2 = z1~sinp~cosp;
    
    f_stat = _regFstat(dep, z1, z2);
    
    // Print results
    cv_fstat = fstatADFcv(model, t);
    
    _printHeaderTSPDLIB(0, 0, 2, model, 4, 0, "Fourier ADF F-Stat", "Linearity", 0);
    
    // Print results & Critical values
    local top, side, stats, dec, colwidth;
    side = "F-stat:";
    top = "";
    stats = F_stat;
    dec = 3;
    colwidth = 15;
    
    _printStatsTable(top, side, stats, cv_fstat', dec, colwidth, 0, p, k);
    _printConclusion(F_stat, cv_fstat, 1, "linearity");
    
    retp(f_stat, cv_fstat);
endp;

proc (1) = _regFstat(dep, z1, z2);
    local t, b1, b2, e1, e2, se1, se2,
        dep1, dep2, ssr1, ssr2, k1, k2, sig21, sig22;
    
    t = rows(dep);
    
    dep1 = dep[., 1];
    if cols(dep)>1;
        dep2 = dep[., 2];
    else;
        dep2 = dep1;
    endif;
    
    // Estimate model one
    // Restricted model
    {b1, e1, sig21, se1, ssr1} = myols(dep1, z1);
    
    // Unrestricted model
    {b2, e2, sig22, se2, ssr2} = myols(dep2, z2);
    
    // Count dimension of models
    k1 = cols(z1);
    k2 = cols(z2);
    
    // Generate F_stat
    retp(Fstat(ssr1, (k2 - k1), ssr2, (t-k2)));
endp;

proc (1) = Fstat(ssr1, d1, ssr2, d2);
    if d1 == 0;
        retp(ssr1/ssr2);
    else;
        retp(((ssr1 - ssr2)/d1)/(ssr2/d2));
    endif;
endp;

proc (5) = _getFourierDeterministic(y, ...);
    local t, dy, ly, dc, dt, model_type;
    
    model_type = dynargsGet(1, "adf");
    
    // Get time
    t = rows(y);
    
    // Transform data
    dy = diff(y, 1);
    
    // Lag y, dependent on model type
    if lower(model_type) $== "kss";
        ly = lagn(y^3, 1);
    else;
        ly = lagn(y, 1);
    endif;
    
    // Deterministic term=constant
    dc = ones(t, 1);
    
    // Deterministic term=trend
    dt = seqa(1, 1, t);
    
    retp(t, dy, ly, dc, dt);
endp;

proc (1) = fstatADFcv(model, T);
    local crit;
    
    // Critical Values (see, Enders & Lee, 2012, Table 1b)
    crit = zeros(5, 3);
    
    if model == 1;
        if T <= 150;
            crit = { 10.35 7.58 6.35 };
        endif;
        
        if 151 < T and T <= 349;
            crit = { 10.02 7.41 6.25 };
        endif;
        
        if 350 < T and T <= 500;
            crit = { 9.78 7.29 6.16 };
        endif;
        
        if 500 < T;
            crit = { 9.72 7.25 6.11 };
        endif;
    endif;
    
    if model == 2;
        if T <= 150;
            crit = { 12.21 9.14 7.78 };
        endif;
        
        if 151 < T and T <= 349;
            crit = { 11.70 8.88 7.62 };
        endif;
        
        if 350 < T and T <= 500;
            crit = { 11.52 8.76 7.53 };
        endif;
        
        if 500 < T;
            crit = { 11.35 8.71 7.50 };
        endif;
    endif;
    retp(crit);
endp;

proc (2) = _getFourierTerms(t, k, ...);
    local sinp, cosp, p;
    
    // Get lags
    p = dynargsGet(1, 0);
    
    // Get fourier terms
    if p>0;
        sinp = trimr(sin(2 * pi * k * seqa(1, 1, t)/t), p+1, 0);
        cosp = trimr(cos(2 * pi * k * seqa(1, 1, t)/t), p+1, 0);
    else;
        sinp = sin(2 * pi * k * seqa(1, 1, t)/t);
        cosp = cos(2 * pi * k * seqa(1, 1, t)/t);
    endif;
    
    retp(sinp, cosp);
endp;

proc (2) = _getCumFourierTerms(t, k, ...);
    local sinp, cosp, p;
    
    // Get lags
    p = dynargsGet(1, 0);
    
    // Fourier series
    sinp = {};
    cosp = {};
    for j(1, k, 1);
        sinp = sinp ~ sin(2 * pi * j * seqa(1, 1, t)/T);
        cosp = cosp ~ cos(2 * pi * j * seqa(1, 1, t)/T);
    endfor;
    
    // Get fourier terms
    if p>0;
        sinp = trimr(sinp, p+1, 0);
        cosp = trimr(cosp, p+1, 0);
    endif;
    
    retp(sinp, cosp);
endp;




// __get_model_x(yt, p, model, ldy, lagy, c, trend, sink, cosk, br);
// __get_model_x(struct tspdRegx *xCtl);
proc (1) = __get_model_x(base_x, reg_lags, x_det);
    local x;
    x = base_x;
    if not ismiss(x_det);
        x = x~x_det;
    endif;
    
    if not ismiss(reg_lags);
        x = x~reg_lags;
    endif;
    
    
    retp(x);
endp;

proc (1) = __get_tspdlib_z_det(test_type, ...);

    // Set base for UR 
    if lower(test_type) $== "ur";
        retp(__get_ur_z_det(...));
    elseif lower(test_type) $== "coint";
        retp(__get_coint_z_det(...));
    endif;
endp;

//        __get_ur_z_det(dc, dt, du1, du2, dt1, dt2, sink, cosk, br, regime)
proc(1) = __get_ur_z_det(...);
    local tmp, x, base_x, dc, dt, du1, du2, dt1, dt2, sink, cosk, br, regime;  
    
    // Defaults
    tmp = miss();
    
    { dc, dt, 
    du1, du2, dt1, dt2, sink, 
    cosk, br, regime } = dynargsGet(1|10, tmp, tmp, 
                                           tmp, tmp, tmp, tmp, tmp, 
                                           tmp, tmp, 0);
    
    // Set base
    x= {};
    
    // Add constant 
    if not ismiss(dc);
        x = x~dc;
    endif;
    
    // Set trend
    if not ismiss(dt);
        x = x~dt;
    endif;
    
    // Add Fourier terms
    if not ismiss(sink);
        x = x~sink;
    endif;
    if not ismiss(cosk);
        x = x~cosk;
    endif;   
    
    /*
    **    Add breaks in constant shift
    */
    // First level break
    if not ismiss(du1);
        x = x~du1;
        // Check for regime break1
        if regime;
            x = x~du1.*base_x;
        endif;
    endif;
    
    // First trend break
    if not ismiss(dt1);
        x = x~dt1;
    endif;

    // Second level break
    if not ismiss(du2);
        x = x~du2;
        // Check for regime break1
        if regime;
            x = x~du2.*base_x;
        endif;
    endif;
    
    // Second trend break
    if not ismiss(dt2);
        x = x~dt2;
    endif;

    if not ismiss(br);
        x = x~br;
    endif;

    retp(x);
endp;

proc(1) = __get_coint_z_det(...);
    local tmp, x, base_x, dc, dt, ly, ldy, du1, du2, dt1, dt2, sink, cosk, br, regime;  
    
    // Defaults
    tmp = miss();
    
    { base_x, dc, dt, ly, ldy, 
    du1, du2, dt1, dt2, sink, 
    cosk, br, regime } = dynargsGet(1|13, tmp, tmp, tmp, tmp, tmp, 
                                           tmp, tmp, tmp, tmp, tmp, 
                                           tmp, tmp, tmp);
    
    // Set base
    x= {};
    if not ismiss(base_x);
        x = x~base_x;
    endif;
    
    // Add constant 
    if not ismiss(dc);
        x = x~dc;
    endif;
    
    // Set trend
    if not ismiss(dt);
        x = x~dt;
    endif;
    
    // Add Fourier terms
    if not ismiss(sink);
        x = x~sink;
    endif;
    if not ismiss(cosk);
        x = x~cosk;
    endif;   
    
    /*
    **    Add breaks in constant shift
    */
    // First level break
    if not ismiss(du1);
        x = x~du1;
        // Check for regime break1
        if regime;
            x = x~du1.*base_x;
        endif;
    endif;
    
    // First trend break
    if not ismiss(dt1);
        x = x~dt1;
    endif;

    // Second level break
    if not ismiss(du2);
        x = x~du2;
        // Check for regime break1
        if regime;
            x = x~du2.*base_x;
        endif;
    endif;
    
    // Second trend break
    if not ismiss(dt2);
        x = x~dt2;
    endif;

    if not ismiss(br);
        x = x~br;
    endif;

    retp(x);
endp;

proc(1) = __get_break_z(dc, dt, du1, dt1, br1, ...);
    local z, du2, dt2;
    
    // Get optional second break terms
    { du2, dt2 } = dynargsGet(1|2);
    
    z = {};
    
    // Constant
    if not ismiss(dc);
        z = z~dc;
    endif;
    
    // Trend
    if not ismiss(dt);
        z = z~dt;
    endif;
    
    // Break one
    if not ismiss(du1);
        z = z~du1;
    endif;
    
    // Break two
    if not ismiss(du2);
        z = z~du2;
    endif;
    
    // Trend break one
    if not ismiss(dt1);
        z = z~dt1;
    endif;

    // Trend break two
    if not ismiss(dt2);
        z = z~dt2;
    endif;
    
    if not ismiss(br1);
        z = z~br1;
    endif;
    
    retp(z);
endp;
