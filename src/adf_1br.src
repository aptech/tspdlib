
/*
**> adf_1br
**  Reference:
**  Zivot,E. and Andrews, W.K. (1992),
**  "Further Evidence on the Great Crasch, the Oil-Price Shock, and the Unit-Root Hypothesis"
**  Journal of Business & Economic Statistics 10(3), 251-270.
**
**  Format:  {tstat, tb, p, cv} = ADF_1break(y, model[, outlier, pmax, ic, trimm]);
**
**  Input:   Y	     -  Nx1 matrix, data
**           model   - 	Optional
**                      1 = Model A: break in level
**                      2 = Model C: break in level and trend
**                      Default = 1.
**           outlier - 	Optional, outlier modeling type.
**                      1 = Innovational outlier (IO) model
**                      2 = Additive outlier (AO) model
**                      Default = 1.
**           pmax    -  Optional, maximum number of lags for Dy; 0 = no lags. Default = 8.
**           ic      -  Optional, information criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**                      Default = 3.
**			 trim    - 	Optional, trimming rate. Default = 10%.
**                      10% in ZA (1992) and LS (2003).
**
**  Output:  tstat   - minimum test statistic
**			 tb      - location of break
**			 p      - number of lags selected by chosen information criterion
**			 cv      - 1%, 5%, 10% critical values for the chosen model
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
** August 10, 2020
**
*/


proc(4) = ADF_1break(y, model, ...);
    local t, tb1_min, ADF_min, T1, T2, tb1, dc, dt, du1, dt1, br1, 
    taup, aicp, sicp, tstatp, p,  dy, y1, dep, z, x, stat, de, brlag, 
    e1, br, ze, b, sig2, se, ssr, resid, e, opt_lag, cv, outlier, pmax, dt_vec, 
    ic, trimm, frac;
    
    { outlier, pmax, ic, trimm } = dynargsGet(1|4, 1, 8, 3, 0.10);
    
    { dt_vec, y } =_checkfordate(y);
    
    t = rows(y);
    tb1_min = 0;
    ADF_min = 1000;
    
    T1 = maxc((3 + pmax)|ceil(trimm * t));
    T2 = minc((t - 3 -pmax)|floor((1 - trimm) * t));


    if T1 < (pmax + 2);
       T1 = pmax + 3;
    endif;
    
    tb1 = T1;
    do while tb1 <= T2;
        
        // Deterministic term=constant
        dc = ones(t, 1);
        
        // Deterministic term=trend
        dt=seqa(1, 1, t);
        
        // Break dummies
        du1 = zeros(tb1-1, 1)|ones(t - tb1 + 1, 1);
        dt1 = zeros(tb1-1, 1)|seqa(1, 1, (t - tb1 + 1));
        br1 = zeros(tb1-1, 1)|ones(1, 1)|zeros(t-tb1, 1);

        taup = zeros(pmax + 1, 1);
        aicp = zeros(pmax + 1, 1);
        sicp = zeros(pmax + 1, 1);
        tstatp = zeros(pmax + 1, 1);     
  
        if outlier == 1; 
            
            for p(0, pmax, 1);
                
                if model == 1; 
                    z = dc ~ du1 ~ br1;
                endif;
                
                if model == 2; 
                    z = dc ~ dt ~ du1 ~ dt1 ~ br1; 
                endif;
                
                if p > 0;
                    dy   = zeros(rows(y), p);
                    for j(1,p,1);
                        dy[., j] = diff(lagn(y, j),1);
                    endfor;
                    dy = trimr(dy, p + 1, 0);
                endif;
                
                y1  = trimr(lagn(y, 1), p + 1, 0);
                dep = trimr(y,  p + 1, 0); 
                z   = trimr(z,  p + 1, 0);

                if p == 0;
                    x   = y1 ~ z;
                endif; 
                
                if p > 0;
                    x   = y1 ~ z ~ dy;
                endif; 
                
                    {b, e1, sig2, se, ssr} = myols(dep, x);
            
                taup[p+1] = (b[1]-1)/se[1];
                aicp[p+1] = ln(e1'e1/rows(x)) + 2 * (cols(x) + 2)/rows(x);
                sicp[p+1] = ln(e1'e1/rows(x)) + (cols(x) + 2) * ln(rows(x))/rows(x);
                tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
            endfor; 
        endif;    
 
        if outlier == 2;
            
            if model == 1; 
               x = dc ~ du1;
            endif;
            
            if model == 2; 
                x = dc ~ dt ~ du1 ~ dt1;
            endif;
            
            {b, resid, sig2, se, ssr} = myols(y, x);

            for p(0, pmax, 1);
                
                if p > 0;
                    de = zeros(rows(resid), p);
                    for j(1,p,1);
                        de[., j] = diff(lagn(resid, j),1);
                    endfor;
            
                    brlag = zeros(rows(br1), p);
                    for j(1,p,1);
                        brlag[., j] = lagn(br1, j);
                    endfor;
                    
                    de = trimr(de, p + 1, 0);
                    br = br1 ~ brlag; 
                    ze = trimr(br,  p + 1, 0);    
                endif;
                
                e1 = trimr(lagn(resid, 1), p + 1, 0);
                e  = trimr(resid,  p + 1, 0); 
                
                if p == 0;
                    x = e1;
                endif;  
                
                if p > 0;
                    x = e1 ~ ze ~ de;
                endif;  
                
                    {b, e1, sig2, se, ssr} = myols(e, x);
                   
                taup[p+1] = (b[1]-1)/se[1];
                aicp[p+1] = ln(e1'e1/rows(x)) + 2 * (cols(x) + 2)/rows(x);
                sicp[p+1] = ln(e1'e1/rows(x)) + (cols(x) + 2) * ln(rows(x))/rows(x);
                tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
            endfor;
        endif;

        p = _get_lag(ic, pmax, aicp, sicp, tstatp);
        stat = taup[p];
        
        if  stat < ADF_min;    
            // Break date
            tb1_min = tb1;   
            
            // t-statistic with break
            ADF_min = stat; 
            
            // Optimal lag
            opt_lag = p;                 
        endif;
        
        tb1 = tb1 + 1;
    endo;
    
    if model == 1;
        cv = -5.34|-4.80|-4.58;
    endif;
    
    if model == 2;
        cv = -5.57|-5.08|-4.82;
    endif;
    
    _printHeaderTSPDLIB(ic, 0, 2, 1, trimm, "ADF", "Unit root", 0);
    
    frac = tb1_min/rows(y);
    
    if ismiss(dt_vec) != 1;
        tb1_min = dt_vec[tb1_min];
    endif;

    // Print results & Critical values
    local side, stats, dec, colwidth;
    side = "ADF-stat:"$|"Chosen Lag:";
    stats = ADF_min|opt_lag-1;
    dec = 3;
    colwidth = 25;
    
    // Print stats 
    _printStatsTable("", side, stats, cv, dec, colwidth, 0);

    // Print break dates
    _printBreaks(dt_vec, tb1_min, frac, 0);
    
    // Print conclusions
    _printConclusion(ADF_min, cv, 0, "a unit root");
    
    retp(ADF_min, tb1_min, opt_lag-1, cv);
endp;

proc (0) = _printBreaks(dt_vec, brks, frac, long);
    local side, top, brk_str, break_num, fmt1, fmt2;
    
    
    break_num = "First"$|"Second"$|"Third"$|"Fourth"$|"Five";
    
    // Header column and row of table
    side = break_num[1:rows(brks)] $+ " break: ";
    top = "   "$~" Date"$~" Fraction";
    
    // Set up formats
    fmt1 = "%-25s";
    fmt2 = "%-25s %-25s%-25.3f";
    
    // Convert breaks to strings depending
    // on type of dt_vec
    if ismiss(dt_vec);
        brk_str = ntos(brks, 2);
    else;
        brk_str = posixtostrc(brks, getcoldateformats(dt_vec));
    endif;
    
    // Print break dates
    print "Estimated break dates:";
  
    sprintf(fmt1, top);
    sprintf(fmt2, side, brk_str, frac);
    if long;
        print "=====================================================================================";
    else;
        print "=============================================================";
    endif;
endp;

proc (0) = _printStatsTable(top, side, stats, cv, dec, colwidth, multistat_in_cv);
    local tmp1, tmp2, tmp3, format1, format2;
    
    tmp1 = "%-" $+ ntos(colwidth) $+ "s";
    tmp2 = "%-" $+ ntos(colwidth) $+ "." $+ ntos(dec) $+ "f";
    tmp3 = "%-" $+ ntos(colwidth) $+ ".3f";
    format1 = tmp1 $+ tmp2;
    format2 = tmp1 $+  tmp3;
    
#ifminkernelversion(20)
    if top $=="";
        sprintf(tmp1$+format1, side, "", stats);
        print;
        print "Critical Values:";
        
        if multistat_in_cv;
            sprintf(tmp1, ""$~"  1%"$~"  5%"$~"  10%");
            sprintf(format2, side, cv');
        else;
            sprintf(tmp1, "  1%"$~"  5%"$~"  10%");
            sprintf(tmp3, cv');
        endif;
        print "=============================================================";
    elseif side $=="";
        sprintf(format1, top, stats);
        print;
        print "Critical Values:";
        sprintf(tmp1, "  1%"$~"  5%"$~"  10%");
        sprintf(tmp2, cv');
        print "=============================================================";
    else;
        sprintf(tmp1$+tmp1$+tmp1, "", "",top);
        sprintf(tmp1 $+tmp1$+format1, side, "", "", stats);
        print;
        print "Critical Values:";
        
        if multistat_in_cv;
            sprintf(tmp1, "" $~"  1%"$~"  5%"$~"  10%");
            sprintf(format2, side, cv');
        else;
            sprintf(tmp1, "  1%"$~"  5%"$~"  10%");
            sprintf(tmp3, cv');
        endif;
        print "=====================================================================================";
    endif;
    print;

#else;
    if top $== "";
        side$~(ntos(stats, dec));
    elseif side $=="";
        top$|(ntos(stats, dec));
    else;
         top$|(side$~(ntos(stats, 4)));
    endif;
    print;
    print "Critical Values:";
    ("1%"$~"5%"$~"10%")$|ntos(cv', dec);
#endif;

endp;

proc (0) = _printConclusion(stat, cv, test_type, null_hypothesis);
    local reject_print, no_reject_print, tmp;
    
    reject_print = "Reject the null hypothesis of " $+ null_hypothesis;
    no_reject_print = "Cannot reject the null hypothesis of " $+ null_hypothesis $+ ".";
    if test_type == 0;
        // Print conclusion
        if stat < cv[1];
            tmp = reject_print $+ " at the 1% level.";
            print tmp;
        elseif stat < cv[2];
            tmp = reject_print $+ " at the 5% level.";
            print tmp;
        elseif stat < cv[3];
            tmp = reject_print $+ " at the 10% level.";
            print tmp;
        else;
            print no_reject_print;
        endif;
        print;
    elseif test_type == 1;
        // Print conclusion
        if stat > cv[1];
            tmp = reject_print $+ " at the 1% level.";
            print tmp;
        elseif stat > cv[2];
            tmp = reject_print $+ " at the 5% level.";
            print tmp;
        elseif stat > cv[3];
            tmp = reject_print $+ " at the 10% level.";
            print tmp;
        else;
            print no_reject_print;
        endif;
        print;
    endif;
endp;

proc (2) = _checkfordate(data);
    local df_type, date_chk, dt_col, data_new, type_chk, date_indices;
    
    // Check for metadata
    if hasmetadata(data);
        // Get column dates
        df_type = getcoltypes(data);
        
        // Check type
        type_chk = (df_type .== 3);
        
        // Check for dates
        date_chk = sumc((type_chk));
         
        if date_chk > 0;
            // Get date columns
            date_indices = indexcat(df_type, 3);
            
            // Get date column
            dt_col = data[., date_indices];
        
            // Get new data
            data_new = delcols(data, date_indices);           
        else;
            retp(error(30), data);
        endif;
        
        if cols(dt_col) > 1;
            dt_col = dt_col[., 1];
        endif;
    else;
        retp(error(30), error(30));
    endif;
    
    retp(dt_col, data_new);
endp;
