
/*
**> rals_lm
**  Reference:
**  Meng, M., Im, K. S., Lee, J., & Tieslau, M. A. (2014).
**  More powerful LM unit root tests with non-normal errors.
*   In Festschrift in Honor of Peter Schmidt (pp. 343-357). Springer New York.
**
**  Format:  { tauRALS, p2, cv } = RALSLM(y, pmax, ic);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           pmax    -  Optional, maximum number of lags for Dy; 0=no lags
**                      Default = 8;
**
**           ic      -  Optional, information criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**                      Default = 3;
**
**  Output:  tauRALS - tau statistic based on RALS procedure
**			 p2      - the estimated rho square (see, page 322)
**			 cv      - 1%, 5%, 10% critical values for the estimated p2
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc (3) = RALSLM(y, ...);
    local tauLM, lag_var, cvLM, t, dc, dt, z, dy, dz, b0, psi, ylm, ds, ly, dep, y1, ldy, lmat, x;
    local j, b, e, sig2, sig2A, se, ssr, e2, e3, m2, m3, w, taurals, p2, cv, pmax, ic, dt_vec;
    
    _checkForMissings(y, "RALSLM");
    
    { pmax, ic } = dynargsGet(1|2, 8, 3);
    { dt_vec, y } =_checkfordate(y);
       
    "RALS-LM";
    T = rows(y);
    
    screen off;
    { tauLM, lag_var, cvLM } = LM(y, pmax, ic);
    screen on;
    
    dc = ones(t, 1);
    dt = seqa(1, 1, t);
    z = dt;
    dy = trimr(diff(y, 1), 1, 0);
    dz = ones(rows(dy), 1);
    b0 = dy/dz;
    psi = y[1] - z[1, .] * b0;
    ylm = y - psi - z * b0;
    ylm = trimr(ylm, 1, 0);
    
    t = rows(ylm);
    ds = diff(ylm, 1);
    ly = lagn(ylm, 1);
    
    if lag_var == 0;
        dep = trimr(dy, 1, 0);
        y1 = trimr(ly, 1, 0);
        dz = ones(rows(dep), 1);
        x = y1~dz;
    endif;
    
    if lag_var ne 0;
        lmat = zeros(rows(ds), lag_var);
        
        j = 1;
        do while j<= lag_var;
            lmat[., j] = lagn(ds, j);
            j = j + 1;
        endo;
        
        dep = trimr(dy, lag_var, 0);
        y1  = trimr(ly, lag_var, 0);
        ldy = trimr(lmat, lag_var, 0);
        dz  = ones(rows(dep), 1);
        x   = y1~dz~ldy;
    endif;
    
    {b, e, sig2, se, ssr} = myols(dep, x);
    e2 = e^2;
    e3 = e^3;
    m2 = T^-1*sumc(e2);
    m3 = T^-1*sumc(e3);
    w = (e2 - m2)~(e3 - m3 - 3 * m2 * e);
    x = x~w;
    {b, e, sig2A, se, ssr} = myols(dep, x);
    tauRALS = b[1]/se[1];
    p2 = sig2A/sig2;
    
    cv = crit_RALSlm(p2);
        
    _printHeaderTSPDLIB(ic, 0, 0, 0, 0, 0, "RALS-LM", "Unit root", 0);
    
    local top, side, stats, dec, colwidth;
    side = "RALS-LM:"$|"Rho^2:";
    top = "";
    stats = tauRALS|p2;
    dec = 3;
    colwidth = 15;
   
    _printStatsTable(top, side, stats, cv', dec, colwidth, 0);
    _printConclusion(tauRALS, cv, 0, "a unit root");  
    
    retp(tauRALS, p2, cv);
endp;

proc(1) = crit_RALSlm(r2);
    local crt, ct, r210, r2a, r2b, wa;
    
    /*See MILT (2014) RALS-LM critical values*/
    let crt[10, 3] =
        -2.892       -2.223      -1.871
        -3.080       -2.428      -2.083
        -3.205       -2.568      -2.234
        -3.299       -2.677      -2.352
        -3.374       -2.761      -2.451
        -3.428       -2.836      -2.535
        -3.474       -2.897      -2.605
        -3.510       -2.947      -2.667
        -3.538       -2.990      -2.715
        -3.570       -3.031      -2.755;
    if r2<.1;
        ct = crt[1, .];
    else;
        r210 = r2*10;
        if r210 >= 10;
            ct = crt[10, .];
        else;
            r2a = floor(r210);
            r2b = ceil(r210);
            wa  = r2b - r210;
            ct = wa*crt[r2a, .] + (1-wa) * crt[r2b, .];
        endif;
    endif;
    
    retp(ct);
endp;


