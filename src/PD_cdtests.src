/*
**> error cross-section dependecy tests
**
**  References:
**  Breusch, T., Pagan, A. (1980).
**  The Lagrange multiplier test and its application to model specifications in econometrics, 
**  Reviews of Economics Studies, 47(1), pp. 239-253.
**
**  Pesaran, M. H., Ullah, A., Yamagata, T. (2008). 
**  A bias-adjusted LM test of error cross-section independence, 
**  Econometrics Journal, 11(1), pp.  105-127.
**
**  Pesaran, M.H. (2004).
**  General diagnostic tests for cross section dependence in panels. 
**  CESifo Working Paper 1229; IZA Discussion Paper 1240.
**
**  Pesaran, M.H. (2020). 
**  General diagnostic tests for cross-sectional dependence in panels. 
**  Empirical Economics. https://doi.org/10.1007/s00181-020-01875-7.
**
**  Baltagi, B. H., Feng, Q., & Kao, C. (2012). 
**  A Lagrange Multiplier test for cross-sectional dependence in a fixed effects panel data model. 
**  Journal of Econometrics, 170(1), 164-177.
**
**  Format:  {LMbp, LM_adj, CDlm, CDlm_adj, CD} = pd_getCDerror(y, x, N);
**
**  Input:   Y	     -  [TxN,1] vector of dependent variable
**
**           X	     -  [TxN,k] matrix of independent variales
**
**           N       -  Number of cross-sections
**
**  Output:  LMbp    - LM test of Breusch and Pagan (1980)
**           LM_adj  - Bias corrected LM test of Pesaran et al. (2008)
**           CDlm    - CDlm test of Pesaran (2004, 2020)
**           CDlm_adj- Bias corrected CDlm test of Baltagi, Feng, Kao (2012)
**           CD      - CD test of Pesaran (2004, 2020)
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
** August 16, 2020
*/

proc(5) = pd_getCDError(y, x, N);
    local k, m, e, y_i, x_i, Hx, It, T;
    local lmbp, lmadj, cdlm, cdlmadj, cd;
    local m_i, m_j, TR, mu, a2, a1, v2, rho, pij;
   
    k = cols(x);
    T = rows(y)/N;
    if rows(y) != rows(x);
        errorlog "'pd_getCDError': Y and X must have same number of rows";
        end;
    endif;
    
    m = {};
    e = {};
    for i(1, N, 1);
        y_i = y[1+(i-1)*T:i*T];
        x_i = x[1+(i-1)*T:i*T,.];
        Hx  = x_i*inv(x_i'x_i)*x_i';
        It  = eye(T);
        m   = m ~ (It-Hx);
        e   = e ~ ((It - Hx) * y_i);
    endfor;
    
    lmbp  = 0;
    lmadj = 0;
    cdlm  = 0;
    cd    = 0;
    for i(1, N-1, 1);
        m_i = m[.,1+(i-1)*t:i*t];
        for j(i+1, N, 1);
            m_j = m[.,1+(j-1)*t:j*t];
            TR  = sumc(diag(m_i*m_j));
            mu  = TR / (t-k);
            a2  = 3*(((t-k-8)*(t-k+2)+24)/((t-k+2)*(t-k-2)*(t-k-4)))^2;
            a1  = a2-1/(t-k)^2;
            v2  = (TR^2)*a1 + 2*sumc(diag(m_i*m_j*m_i*m_j))*a2;
            rho = corrx(e[.,i]~e[.,j]);
            pij = rho[1,2]; 
            
            lmbp  = lmbp  + T*pij^2;
            lmadj = lmadj + (((T-k)*(pij^2) - mu)/sqrt(v2));
            cdlm  = cdlm  + (T*pij^2-1);
            cd    = cd    + pij;

        endfor;
    endfor;

    LMadj   = sqrt(2 / (N*(N-1)))  * lmadj;
    CDlm    = sqrt(1 / (N*(N-1)))  * cdlm;
    CDlmadj = CDlm - N / (2 * (T-1));
    CD      = sqrt( 2*T/ (N*(N-1))) * cd; 
    

    /*
    ** Printing
    */
//    _printHeaderTSPDLIB(0, varm, 1, model, 0, 0, "PD Stationarity", "Stationarity", 0);
    
    // Printing
    format /rd 8,3;
    "Test                                Stat     p-value";
    //"----------------------------------------------------";
    "LM      (Breusch and Pagan, 1980) ";; LMbp    ;; cdfchic(LMbp,N*(N-1)/2);
    "LMadj   (Pesaran et al., 2008)    ";; LMadj   ;; 2*cdfnc(abs(LMadj));      // Two-sided p-value
    "CDlm    (Pesaran, 2004 & 2020)    ";; CDlm    ;; 2*cdfnc(abs(CDlm));       // Two-sided p-value
    "CDlmadj (Baltagi et al., 2012)    ";; CDlmadj ;; 2*cdfnc(abs(CDlmadj));    // Two-sided p-value
    "CD      (Pesaran, 2004 & 2020)    ";; CD      ;; 2*cdfnc(abs(CD));         // Two-sided p-value

    
    // Set up dataframes 
    LMbp = asDF(LMbp~cdfchic(LMbp,N*(N-1)/2), "LMbp", "P-value");
    LMadj = asDF(LMadj~2*cdfnc(abs(LMadj)), "LMadj", "P-value");
    CDlm  = asDF(CDlm~2*cdfnc(abs(CDlm)), "CDlm", "P-value");
    CDlmadj = asDF(CDlmadj~2*cdfnc(abs(CDlmadj)), "CDlmadj", "P-value");
    CD = asDF(CD~2*cdfnc(abs(CD)), "CD", "P-value");
    
retp(LMbp, LMadj ,CDlm, CDlmadj, CD);
endp;
