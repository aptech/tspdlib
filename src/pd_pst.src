
/*
**> PD_pst (panel stationarity tests)
**  Reference:
**  Hadri, K. (2000),
**  Testing for Unit Roots in Heterogeneous Panel Data,
**  Econometrics Journal, 3(2), 148-161.
**
**  Yin, Y. and S. Wu (2001),
**  Stationarity Tests in Heterogeneous Panels,
**  in Badi H. Baltagi, Thomas B. Fomby, R. Carter Hill (ed.)
**  Nonstationary Panels, Panel Cointegration, and Dynamic Panels (Advances in Econometrics, Volume 15)
**  Emerald Group Publishing Limited, pp.275-296.
**
**  Nazlioglu, S., Payne, J. E., Lee, J., Rayos-Velazquez, M., & Karul, C. (2021).
**  Convergence in OPEC carbon dioxide emissions: Evidence from new panel stationarity tests with factors and breaks.
**  Economic Modelling, 100, 105498.
**
**  Format:  { Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval } = pst(y [, model, varm, l]);
**
**  Input:   Y	     -  TxN matrix, data,
**
**           model   - 	Optional, specifies model.
**                      Default = 1;
**                      1 = model with constant
**                      2 = model with constant and trend
**
**           test    -  Optional, string, specifies type of panel stationarity test to run. 
**                      "st"              Stationary tests, no modifications. (Default)
**                      "ca"              Based on CA (cross-section averages approach)
**                      "fourier"         CA approach with smooth breaks (fourier approach)
**                      "panic"           Based on PANIC approach
**
**           varm    -  Optional, Long-run consistent variance estimation method.
**                      Default = 1.
**                      1 = iid;
**                      2 = Bartlett
**                      3 = Quadratic Spectral (QS);
**                      4 = SPC with Bartlett /see (Sul, Phillips & Choi, 2005)
**                      5 = SPC with QS;
**                      6 = Kurozumi with Bartlett
**                      7 = Kurozumi with QS
**                      Updated from Carrion-i-Silvestre & Sanso (2007) GAUSS codes.
**                      See:
**                      Carrion-i-Silvestre, J. L., & Sanso, A. (2006).
**                      A guide to the computation of stationarity tests.
**                      Empirical Economics, 31(2), 433.
**
**           l       -  Optional, bandwidth for spectral window. Default = round(4 * (t/100)^(2/9)).
**
**           kmax    -  Optional, maximum number of factors. Default =5.
**
**           ick     -  Information Criterion for optimal number of factors. Default = 1.
**                      1 = PCp criterion
**                      2 = ICp criterion
**                      (See Bai and Ng, 2002)
**
**  Output:  Nkpss   - KPSS statistics for each cross-section
**           Npval   - p-value for KPSS statistics for each cross-section
**			 W       - Panel stationarity statistic by Hadri (2000)
**           W_pval  - p-value of Zlm
**			 P       - Panel stationarity statistic by Yin & Wu (2001)
**           P_pval  - p-value of P stat.
**			 Pm      - Panel stationarity statistic by Nazlioglu et al. (2021)
**           Pm_pval - p-value of Pm stat.
**			 Z       - Panel stationarity statistic by Nazlioglu et al. (2021)
**           Z_pval  - p-value of Z stat.
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/
proc (5) = pd_stationary(y, ...);
    local model, test, varm, l, T, kmax, ick, Nkpss, Npval, W, W_pval;
    local P, Pm, Z, P_pval, Pm_pval, Z_pval, bwl_dftl;
    
    
    
    // Get dynamic arguments
    t = rows(y);
    bwl_dftl = round(4 * (t/100)^(2/9));
    
    { model, test, varm, l, kmax, ick } = dynargsGet(1|6, 1, "st", 1, bwl_dftl, 5, 1);
    
    if test $== "st";
        { Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval } = pst(y, model, varm, l);
    elseif test $== "ca";
        { Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval } = pst_ca(y, model, varm, l);
    elseif test $== "fourier";
        { Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval } = pst_ca_fourier(y, model, varm, l, kmax);
    elseif test $== "panic";
        { Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval } = pst_panic(y, model, varm, l, kmax, ick);
    endif;
    
    // Transform output to dataframes
    Nkpss = asDF(NKpss~Npval, "NKpss", "p-value");
    W = asDF(W~W_pval, "W", "p-value");
    P = asDF(P~P_pval, "P", "p-value");
    Pm = asDF(Pm~Pm_pval, "Pm", "p-value");
    Z = asDF(Z~Z_pval, "Z", "p-value");
    
    retp(NKpss, W, P, Pm, Z);
endp;


proc (10) = pst(y, ...);
    local model, varm, l, N, T, Nkpss, Npval, q, cv, _LM, mu, var, W, W_pval;
    local P, Pm, Z, P_pval, Pm_pval, Z_pval, dt_vec, bwl_dftl, varnames;
    
    // Data checks
    _checkForMissings(y, currentprocname());
    { dt_vec, y } =_checkfordate(y);
    
    // Get group names
    if hasmetadata(y);
        varnames = getcolnames(y);
    else;
        varnames = "Y" $+ seqa(1, 1, cols(y));
    endif;
    
    // Get model dimensions
    N = cols(y);
    T = rows(y);
    Nkpss = zeros(N, 1);
    Npval = zeros(N, 1);
    
    // Get dynamic arguments
    bwl_dftl = round(4 * (t/100)^(2/9));
    { model, varm, l } = dynargsGet(1|3, 1, 1, bwl_dftl);
    
    for i(1, N, 1);
        screen off;
        // Individual KPSS statistics
        { Nkpss[i], cv } = LMkpss(y[.,i], model, l, varm);
        screen on;
        // Individual p-values
        { Npval[i], q } = _get_pval_kpss(Nkpss[i], T, model);
        
    endfor;
    
    _LM = meanc(Nkpss);
    
    if model == 1;
        mu = 1/6;
        var = 1/45;
    endif;
    
    if model == 2;
        mu = 1/15;
        var = 11/6300;
    endif;
    
    // Get pvalues
    { W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval } = _get_pvals(_LM, Npval, var, mu, N);
    
    /*
    ** Printing
    */
    _printHeaderTSPDLIB(0, varm, 1, model, 0, 0, "PD Stationarity", "Stationarity", 0);
    
    // Print stats tables
    __pst_printing(NKpss, Npval, W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval, varnames);
    
    retp(Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval);
endp;

proc (2) = yw_pval(Npval, N);
    local P;
    
    P = -2*sumc(ln(Npval));
    
    retp(P, cdfChic(P, 2*N));
endp;

proc (4) = nz_pval(Npval, P, N);
    local Pm, Z;
    
    Pm  = (P-2*N)/sqrt(4*N);
    Z   = sumc(cdfni(Npval))/sqrt(n);
    
    retp(Pm, Z, cdfnc(Pm), 1-cdfnc(Z));
endp;

/*
**> pst_ca (panel stationarity tests based on CA (cross-section averages approach)
**  Reference:
**  Hadri, K. and E. Kurozumi (2011),
**  A Locally Optimal Test for No Unit Root in Cross-Sectionally Dependent Panel Data,
**  Hitotsubashi Journal of Economics, 52(2), 165-184.
**
** Hadri, K., & Kurozumi, E. (2012).
** A simple panel stationarity test in the presence of serial correlation and a common factor.
** Economics Letters, 115(1), 31-34.
**
**  Nazlioglu, S., Payne, J. E., Lee, J., Rayos-Velazquez, M., & Karul, C. (2021).
**  Convergence in OPEC carbon dioxide emissions: Evidence from new panel stationarity tests with factors and breaks.
**  Economic Modelling, 100, 105498.
**
**  Format:  { Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval } = pst_ca(y, model, varm, l);
**
**  Input:   Y	     -  TxN matrix, data,
**
**           model   - 	Optional, specifies model.
**                      Default = 1;
**                      1 = model with constant
**                      2 = model with constant and trend
**
**           varm    -  Optional, Long-run consistent variance estimation method.
**                      Default = 1.
**                      1 = iid;
**                      2 = Bartlett
**                      3 = Quadratic Spectral (QS);
**                      4 = SPC with Bartlett /see (Sul, Phillips & Choi, 2005)
**                      5 = SPC with QS;
**                      6 = Kurozumi with Bartlett
**                      7 = Kurozumi with QS
**                      Updated from Carrion-i-Silvestre & Sanso (2007) GAUSS codes.
**                      See:
**                      Carrion-i-Silvestre, J. L., & Sanso, A. (2006).
**                      A guide to the computation of stationarity tests.
**                      Empirical Economics, 31(2), 433.
**
**           l       -  Optional, bandwidth for spectral window. Default = round(4 * (t/100)^(2/9)).
**
**
**  Output:
**           Nkpss   - KPSS statistics for each cross-section
**           Npval   - p-value for KPSS statistics for each cross-section
**			 W       - Panel stationarity statistic by Hadri & Kurozumi (2012)
**           W_pval  - p-value of W
**			 P       - Panel stationarity statistic by Nazlioglu et al. (2021)
**           P_pval  - p-value of P stat.
**			 Pm      - Panel stationarity statistic by Nazlioglu et al. (2021)
**           Pm_pval - p-value of Pm stat.
**			 Z       - Panel stationarity statistic by Nazlioglu et al. (2021)
**           Z_pval  - p-value of Z stat.
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

proc (10) = pst_ca(y, ...);
    local N, T, ca, Nkpss, Npval, q, _LM, mu, var, W, W_pval,
        bwl_dftl, model, varm, l, P, Pm, Z, P_pval, Pm_pval,
        Z_pval, dt_vec, varnames;
    
    // Data checks
    _checkForMissings(y, currentprocname());
    { dt_vec, y } =_checkfordate(y);
    
    // Get group names
    if hasmetadata(y);
        varnames = getcolnames(y);
    else;
        varnames = "Y" $+ seqa(1, 1, cols(y));
    endif;
    
    // Dimensions
    N = cols(y);
    T = rows(y);
    ca= meanc(y');
    Nkpss = zeros(N, 1);
    Npval = zeros(N, 1);
    
    bwl_dftl = round(4 * (t/100)^(2/9));
    
    // Dynamic arguments
    { model, varm, l } = dynargsGet(1|3, 1, 1, bwl_dftl);
    
    for i(1, N, 1);
        
        // Individual KPSS statistics
        Nkpss[i] = ca_kpss(y[.,i], model, varm, ca, l);
        
        //Individual p-values
        { Npval[i], q } = _get_pval_kpss(Nkpss[i], T, model);
        
    endfor;
    
    _LM = meanc(Nkpss);
    if model == 1;
        mu = 1/6;
        var = 1/45;
    endif;
    
    if model == 2;
        mu = 1/15;
        var = 11/6300;
    endif;
    
    // Get pvalues
    { W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval } = _get_pvals(_LM, Npval, var, mu, N);
    
    /*
    ** Printing
    */
    _printHeaderTSPDLIB(0, varm, 1, model, 0, 0, "PD CA Stationarity", "Stationarity with CA", 0);
    
    // Print stats tables
    __pst_printing(NKpss, Npval, W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval, varnames);
    
    retp(Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval);
endp;

proc (8) = _get_pvals(_LM, Npval, var, mu, N);
    local W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval;
    
    // Hadri (2000) Standardized mean group statistic
    { W, W_pval }  = hadriStats(_LM, var, mu, N);
    
    // Yin & Wu (2001) combination of p-values statistics
    { P, P_pval } = yw_pval(Npval, N);
    
    // Nazlioglu et al. (2021) combination of p-values statistics
    { Pm, Z, Pm_pval, Z_pval } = nz_pval(Npval, P, N);
    
    retp( W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval);
endp;

proc (2) = hadriStats(_LM, var, mu, N);
    local W;
    
    W  = sqrt(n)*(_LM-mu)/sqrt(var);
    
    retp(W, 1-cdfn(W));
endp;

proc (1) = _get_ca_deterministic(model, t, ca, ...);
    local sink, cosk, z, s;
    
    { sink, cosk } = dynargsGet(1|2, 0, 0);
    
    z = ones(t, 1);
    
    if model == 2;
        z = z~seqa(1, 1, t);
    elseif model != 1;
        s = sprintf("Accepts 'model' options 1 or 2. Found %d.", model);
        errorlogat s;
    endif;
    
    if sink != 0;
        z = z~sink~cosk;
    endif;
    
    retp(z~ca);
endp;

proc (1) = ca_kpss(y, model, varm, ca, l);
    local t, z, s, lrv, kpss_ca;
    local b, e1, sig2, se, ssr;
    
    t = rows(y);
    
    z = _get_ca_deterministic(model, t, ca);
    
    { b, e1, sig2, se, ssr } = myols(y, z);
    
    /*partial sum of residuals*/
    S = cumsumc(e1);
    
    lrv = _get_lrv_type(varm, ssr, e1, l, 0);
    
    kpss_ca = sumc(s.*s)/(t^2*lrv);
    
    retp(kpss_ca);
endp;

proc (0) = __pst_printing(NKpss, Npval, W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval, varnames);
    
    local top, side, stats, dec, colwidth, cv;
    top = "Stat"$~"P-value";
    side = "W"$|"P"$|"Pm"$|"Z";
    stats = (W|P|Pm|Z)~(W_pval|P_pval|Pm_pval|Z_pval);
    dec = 5;
    colwidth = 15;
    cv = {};
    
    // Print stats table
    _printStatsTable(top, side, stats, cv', dec, colwidth, 0);
    
    print "==============================================================";
    print "Individual panel results";
    print "==============================================================";
    /*
    ** Print individual results and critical values
    */
    top = "KPSS"$~"P-value";
    side = varnames;
    stats = NKpss~Npval;
    dec = 3;
    colwidth = 15;
    
    _printStatsTable(top, side, stats, cv, dec, colwidth, 0);
endp;

/*
**> pst_ca_fourier (Fourier panel stationarity tests based on CA (cross-section averages approach)
**  Reference:
**  Nazlioglu, S., Karul, C. (2017),
**  "The panel stationary test with gradual shifts: an application to international commodity price shocks",
**  Economic Modelling 61 (2017). pp.181-192.
**
**  Nazlioglu, S., Payne, J. E., Lee, J., Rayos-Velazquez, M., & Karul, C. (2021).
**  Convergence in OPEC carbon dioxide emissions: Evidence from new panel stationarity tests with factors and breaks.
**  Economic Modelling, 100, 105498.
**
**  Format:  { Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval } = pst_ca_fourier(y [, model, varm, l, k]);
**
**  Input:   Y	     -  TxN matrix, data,
**
**           model   - 	Optional, specifies model.
**                      Default = 1;
**                      1 = model with constant
**                      2 = model with constant and trend
**
**           varm    -  Optional, Long-run consistent variance estimation method.
**                      Default = 1.
**                      1 = iid;
**                      2 = Bartlett
**                      3 = Quadratic Spectral (QS);
**                      4 = SPC with Bartlett /see (Sul, Phillips & Choi, 2005)
**                      5 = SPC with QS;
**                      6 = Kurozumi with Bartlett
**                      7 = Kurozumi with QS
**                      Updated from Carrion-i-Silvestre & Sanso (2007) GAUSS codes.
**                      See:
**                      Carrion-i-Silvestre, J. L., & Sanso, A. (2006).
**                      A guide to the computation of stationarity tests.
**                      Empirical Economics, 31(2), 433.
**
**           l       -  Optional, bandwidth for spectral window. Default = round(4 * (t/100)^(2/9)).
**
**           k       -  Optional, number of Fourier frequency. Default = 5.
**
**  Output:  Nkpss   - Fourier KPSS statistics for each cross-section
**           Npval   - p-value for Foureier KPSS statistics for each cross-section
**			 W       - Fouier Panel stationarity statistic by Nazlioglu & Karul (2017)
**           W_pval  - p-value of W
**			 P       - Fourier Panel stationarity statistic by Nazlioglu et al. (2021)
**           P_pval  - p-value of P stat.
**			 Pm      - Fouerir Panel stationarity statistic by Nazlioglu et al. (2021)
**           Pm_pval - p-value of Pm stat.
**			 Z       - Fourier Panel stationarity statistic by Nazlioglu et al. (2021)
**           Z_pval  - p-value of Z stat.
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc(10) = pst_ca_fourier(y, ...);
    local N, T, ca, Nkpss, Npval, q, _LM, mu, var, W, W_pval;
    local P, Pm, Z, P_pval, Pm_pval, Z_pval, dt_vec,  bwl_dftl,
        model, varm, l, k, varnames;
    
    // Data checks
    _checkForMissings(y, currentprocname());
    { dt_vec, y } =_checkfordate(y);
    
    // Get group names
    if hasmetadata(y);
        varnames = getcolnames(y);
    else;
        varnames = "Y" $+ seqa(1, 1, cols(y));
    endif;
    
    // Model dimensions
    N = cols(y);
    T = rows(y);
    ca= meanc(y');
    Nkpss = zeros(N, 1);
    Npval = zeros(N, 1);
    
    // Dynamic arguments
    bwl_dftl = round(4 * (t/100)^(2/9));
    { model, varm, l, k } = dynargsGet(1|4, 1, 1, bwl_dftl, 5);
    
    for i(1, N, 1);
        // Individual KPSS statistics
        Nkpss[i] = ca_kpss_fourier(y[.,i], model, varm, l, ca, k);
        
        //Individual p-values
        { Npval[i], q } = _get_pval_kpss_fourier(Nkpss[i], T, model, k);
    endfor;
    
    _LM = meanc(Nkpss);
    
    { mu, var } = _get_mu_var(model, k);
    
    // Get pvalues
    { W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval } = _get_pvals(_LM, Npval, var, mu, N);
    
    /*
    ** Printing
    */
    _printHeaderTSPDLIB(0, varm, 1, model, 5, 0, "PD CA Fourier", "Stationarity with CA", 0);
    
    // Print stats tables
    __pst_printing(NKpss, Npval, W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval, varnames);
    
    retp(Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval);
endp;

proc (2) = _get_mu_var(model, k);
    
    if model == 1 and k == 1;
        retp(0.0658, 0.0029);
    endif;
    
    if model == 1 and k == 2;
        retp(0.1410, 0.0176);
    endif;
    
    if model == 1 and k == 3;
        retp(0.1550, 0.0202);
    endif;
    
    if model == 1 and k == 4;
        retp(0.1600, 0.0214);
    endif;
    
    if model == 1 and k == 5;
        retp(0.1630, 0.0219);
    endif;
    
    if model == 2 and k == 1;
        retp(0.0295, 0.00017);
    endif;
    
    if model == 2 and k == 2;
        retp(0.0523, 0.00150);
    endif;
    
    if model == 2 and k == 3;
        retp(0.0601, 0.00169);
    endif;
    
    if model == 2 and k == 4;
        retp(0.0633, 0.00180);
    endif;
    
    if model == 2 and k == 5;
        retp(0.0642, 0.00179);
    endif;
    
endp;

proc(1) = ca_kpss_fourier(y, model, varm, l, ca, k);
    local t, sink, cosk, z, s, lrv, kpss_ca;
    local b, e1, sig2, se, ssr;
    
    t = rows(y);
    
    { sink, cosk } = _getFourierTerms(t, k);
    
    z = _get_ca_deterministic(model, t, ca, sink, cosk);
    
    { b, e1, sig2, se, ssr } = myols(y, z);
    
    /*partial sum of residuals*/
    S = cumsumc(e1);
    
    lrv = _get_lrv_type(varm, ssr, e1, l, 0);
    
    kpss_ca = sumc(s.*s)/(t^2*lrv);
    
    retp(kpss_ca);
endp;


/*
**> pst_panic (panel stationarity tests based on PANIC approach)
**  Reference:
**  Bai, J., and S. Ng (2005),
**  A New Look at Panel Testing of Stationarity and the PPP Hypothesis,
**  In: Andrews, D.W.K., Stock, J.H. (Eds.), Identification and Inference for Econometric Models.
**  Essays in Honor of Thomas Rothenberg. Cambridge University Press, Cambridge.

**  Nazlioglu, S., Payne, J. E., Lee, J., Rayos-Velazquez, M., & Karul, C. (2021).
**  Convergence in OPEC carbon dioxide emissions: Evidence from new panel stationarity tests with factors and breaks.
**  Economic Modelling, 100, 105498.
**
**  Format:  { Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval } = pst_panic(y, model, varm, l, kmax, ick);
**
**  Input:   Y	     -  TxN matrix, data,
**
**           model   - 	Optional, specifies model.
**                      Default = 1;
**                      1 = model with constant
**                      2 = model with constant and trend
**
**           varm    -  Optional, Long-run consistent variance estimation method.
**                      Default = 1.
**                      1 = iid;
**                      2 = Bartlett
**                      3 = Quadratic Spectral (QS);
**                      4 = SPC with Bartlett /see (Sul, Phillips & Choi, 2005)
**                      5 = SPC with QS;
**                      6 = Kurozumi with Bartlett
**                      7 = Kurozumi with QS
**                      Updated from Carrion-i-Silvestre & Sanso (2007) GAUSS codes.
**                      See:
**                      Carrion-i-Silvestre, J. L., & Sanso, A. (2006).
**                      A guide to the computation of stationarity tests.
**                      Empirical Economics, 31(2), 433.
**
**           l       -  Optional, bandwidth for spectral window. Default = round(4 * (t/100)^(2/9)).
**
**           kmax    -  Optional, maximum number of factors. Default =5.
**
**           ick     -  Information Criterion for optimal number of factors. Default = 1.
**                      1 = PCp criterion
**                      2 = ICp criterion
**                      (See Bai and Ng, 2002)
**
**  Output:  Nkpss   - KPSS statistics for each cross-section
**
**           Npval   - p-value for KPSS statistics for each cross-section
**
**			 P       - Panel stationarity statistic by Bai & Ng (2005)
**
**           P_pval  - p-value of P stat.
**
**			 W       - Panel stationarity statistic by Nazlioglu et al. (2021)
**
**           W_pval  - p-value of Zlm
**
**			 Pm      - Panel stationarity statistic by Nazlioglu et al. (2021)
**
**           Pm_pval - p-value of Pm stat.
**
**			 Z       - Panel stationarity statistic by Nazlioglu et al. (2021)
**
**           Z_pval  - p-value of Z stat.
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

proc(10) = pst_panic(y, ...);
    local model, varm, l, kmax, ick, n, t, dx, x, nf, e, Fhat, Floads, ehat;
    local Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval, dt_vec, bwl_dftl, varnames;
    
    // Data checks
    _checkForMissings(y, currentprocname());
    { dt_vec, y } =_checkfordate(y);
    
    // Get group names
    if hasmetadata(y);
        varnames = getcolnames(y);
    else;
        varnames = "Y" $+ seqa(1, 1, cols(y));
    endif;
    
    // Dimensions
    N = cols(y);
    T = rows(y);
    
    bwl_dftl = round(4 * (t/100)^(2/9));
    
    // Dynamic arguments
    { model, varm, l, kmax, ick } = dynargsGet(1|5, 1, 1, bwl_dftl, 5, 1);
    
    dx = diff(y, 1);
    x  = dx[2:rows(y), .];
    
    if model == 1;
        x = x;
    endif;
    
    if model == 2;
        x = x - meanc(x)';
    endif;
    
    nf = Fnumber(x, kmax, ick);
    
    // nf is selected with ICp2
    { Fhat, Floads, ehat } = pca(x, nf[2]);
    
    e = cumsumc(ehat);
    T = rows(e);
    N = cols(e);
    
    { Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval } = pst(e, model, varm, l);
    
     /*
    ** Printing
    */
    _printHeaderTSPDLIB(0, varm, 1, model, 0, 0, "PD PANIC", "Stationarity", 0);
    
    // Print stats tables
    __pst_printing(NKpss, Npval, W, W_pval, P, P_pval, Pm, Z, Pm_pval, Z_pval, varnames);
    
    
    retp(Nkpss, Npval, W, W_pval, P, P_pval, Pm, Pm_pval, Z, Z_pval);
endp;
