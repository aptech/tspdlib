
/*
**> fourier_kpss
**  Reference:
**  Becker,R., Enders, W., and Lee, J. (2006),
**  "A Stationary Test in the Presence of an Unknown Number of Smooth Breaks"
**  Journal of Time Series Analysis,27,3(2006),381-409
**
**  Format:  {KPSSk, k, cv[k,.]} = Fourier_KPSS(y,model,kmax,l,varm);
**
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = Constant
**                      2 = Constant and trend
**
**           kmax    -  Optional, Maximumum number of single Fourier frequency. Default = 5.
**                      (upper bound is 5)
**
**           l       -  Optional, bandwidth for spectral window. Default = round(4 * (T/100)^(2/9)).
**
**           varm    -  Optional, long-run consistent variance estimation method.
**                      Default = 1.
**                      1 = iid;
**                      2 = Bartlett
**                      3 = Quadratic Spectral (QS);
**                      4 = SPC with Bartlett /see (Sul, Phillips & Choi, 2005)
**                      5 = SPC with QS;
**                      6 = Kurozumi with Bartlett
**                      7 = Kurozumi with QS
**                      Updated from Carrion-i-Silvestre & Sanso (2007) GAUSS codes.
**                      See:
**                      Carrion-i-Silvestre, J. L., & Sanso, A. (2006).
**                      A guide to the computation of stationarity tests.
**                      Empirical Economics, 31(2), 433.
**
**  Output:  KPSSk   - KPSS(k) statistic
**
**           k       - Number of single frequency
**
**			 cv      - 1%, 5%, 10% critical values for the chosen model and k
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

/*15 December 2014*/

proc(3) = Fourier_KPSS(y, model, ...);
    local t, sink, cosk, z, s, lrv, kpss;
    local b, e1, sig2, se, ssr, k;
    local crit, l_dftl, kmax, l, varm;
    
    t = rows(y);
    l_dftl = round(4 * (T/100)^(2/9));
    { kmax, l, varm } = dynargsGet(1|3, 5, l_dftl, 1);
    
    k = _get_fourier(y, model, kmax);
    sink = sin(2 * pi * k * seqa(1, 1, t)/t);
    cosk = cos(2 * pi * k * seqa(1, 1, t)/t);
    
    if model == 1;
        z = ones(t, 1)~sink~cosk;
    endif;
    if model == 2;
        z = ones(t, 1)~seqa(1, 1, t)~sink~cosk;
    endif;
    
    {b, e1, sig2, se, ssr} = myols(y, z);
    
    // Partial sum of residuals
    S = cumsumc(e1);
    
    lrv = _get_lrv_type(varm, ssr, e1, l, 1);
    print;
    
    KPSS = sumc(s .* s)/(t^2 * lrv);
    
    // Critical Values (see, Becker, Enders & Lee, 2006, Table 1)
    crit = zeros(5, 3);
   
    if model == 1;
        if T <= 250;
            crit = {0.2699 0.1720 0.1318,
                0.6671 0.4152 0.3150,
                0.7182 0.4480 0.3393,
                0.7222 0.4592 0.3476,
                0.7386 0.4626 0.3518};
        endif;
        
        if 251 < T and T <= 500;
            crit = {0.2709 0.1696 0.1294,
                0.6615 0.4075 0.3053,
                0.7046 0.4424 0.3309,
                0.7152 0.4491 0.3369,
                0.7344 0.4571 0.3415};
        endif;
        
        if 500 < T;
            crit = {0.2706 0.1704 0.1295,
                0.6526 0.4047 0.3050,
                0.7086 0.4388 0.3304,
                0.7163 0.4470 0.3355,
                0.7297 0.4525 0.3422};
        endif;
    endif;
    
    if model == 2;
        if T <= 250;
            crit = {0.0716 0.0546 0.0471,
                0.2022 0.1321 0.1034,
                0.2103 0.1423 0.1141,
                0.2170 0.1478 0.1189,
                0.2177 0.1484 0.1201};
        endif;
        
        if 251 < T and T <= 500;
            crit = {0.0720 0.0539 0.0463,
                0.1968 0.1278 0.0995,
                0.2091 0.1404 0.1123,
                0.2111 0.1441 0.1155,
                0.2178 0.1465 0.1178};
        endif;
        
        if 500 < T;
            crit = {0.0718 0.0538 0.0461,
                0.1959 0.1275 0.0994,
                0.2081 0.1398 0.1117,
                0.2139 0.1436 0.1149,
                0.2153 0.1451 0.1163};
        endif;
    endif;
    print;
  
    _printHeaderTSPDLIB(0, varm, 2, 4, 0, "Fourier KPSS", "Stationarity", 0);

    // Print results & Critical values
    local top, side, stats, dec, colwidth;
    side = "KPSS:"$|"Frequency:";
    top = "";   
    stats = KPSS|k;
    dec = 3;
    colwidth = 25;
                 
    _printStatsTable(top, side, stats, crit[k, .]', dec, colwidth, 0);
    _printConclusion(KPSS, crit[k, .], 1, "stationarity");

    retp(KPSS, k, crit[k, .]);
endp;

/*Selection of optimum k via min SSR*/
proc(1) = _get_fourier(y, model, kmax);
    local temp, k, t, sink, cosk, z, betaols, e, ssr;
    
    temp = zeros(kmax, 1);
    k = 1;
    do while k <= kmax;
        t = rows(y);
        sink = sin(2 * pi * k * seqa(1, 1, t)/t);
        cosk = cos(2 * pi * k * seqa(1, 1, t)/t);
        if model == 1;
            z = ones(t, 1)~sink~cosk;
        endif;
        
        if model == 2;
            z = ones(t, 1)~seqa(1, 1, t)~sink~cosk;
        endif;
        
        betaols = y/z;
        e = y - z * betaols;
        ssr = e'e;
        temp[k] = ssr;
        //"ssr";temp;
        k = k + 1;
    endo;
    
    k = minindc(temp);
    retp(k);
endp;
