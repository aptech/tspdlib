
/*
**> lm_2br
**  Reference:
**  Lee, J and Strazicich, M.C. (2003), ,
**  "Minimum Lagrange Multiplier Unit Root Test with Two Structural Breaks",
**  Review of Economics and Statistics 85(4), 1082-1089.
**
** Nazlioglu, S., Lee, J. (2020).
** Response Surface Estimates of the LM Unit Root Tests.
** Economics Letters, Vol. 192, Article 109136.
**
**
**  Format:  { tstat, tb1, tb2, p, cv } = LM_2breaks(y, model[ , pmax, ic, trimm]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 =  Model A: break in level
**                      2 =  Model C: break in level and trend
**
**           pmax    -  Optional, maximum number of lags for Ds; 0 =  no lags.
**                      Default = 8.
**
**           ic      -  Optional, information criterion:
**                      1 =  Akaike
**                      2 =  Schwarz
**                      3 =  t-stat significance
**                      Default = 3.
**
**			 trimm   - 	Optional, trimming rate
**                      Default 10% trimmage is defined as in ZA (1992) and LS (2003).
**
**
**  Output:  tstat   - minimum test statistic
**			 tb1     - first break location
**			 tb2     - second break location
**			 p       - number of lags selected by choosen information criterion
**			 cv      - 1%, 5%, 10% critical values based on response surfaces
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

/*22 January 2015*/

proc(5) = LM_2breaks(y, model, ...);
    local t, tb1, tb2, tb1_min, tb2_min, LM_min, T1, T2, dc, dt, du1, du2, dt1, dt2, z;
    local dy, dz, b0, s0, st, ls, dst, ds, lmat, x, tau, lmt, j, p, aicp, sicp, tstatp, lm_k;
    local b, e1, sig2, se, ssr, cv, mat_cv1, mat_cv5, mat_cv10 , cv1, cv5, cv10;
    local opt_lag, lam, mat_cv11, mat_cv55, mat_cv1010, pmax, ic, trimm, dt_vec, frac; 
    
    // Get defaults for optional arguments
    { pmax, ic, trimm } = dynargsGet(1|3, 8, 3, 0.10);
           
    { dt_vec, y } =_checkfordate(y);
    
    t = rows(y);
    tb1_min = 0;
    tb2_min = 0;
    LM_min = 1000;
    
    T1 = round(trimm * rows(y));
    T2 = round((1 - trimm) * rows(y));
  
    // Bounds as in LS
    if T1 < (pmax + 2);
       T1 = pmax + 3;
    endif;  
    
    tb1 = T1;
    do while tb1 <= T2;
        
         // Bounds as in LS
        if model == 1;
            tb2 = tb1 + 2;
        endif;
        
        if model == 2;
            tb2 = tb1 + 3;
        endif;
        
        do while tb2 <= T2;
            
            // Deterministic term=constant
            dc = ones(t, 1);   

            // Deterministic term=trend
            dt = seqa(1, 1, t);              
            
            if model == 1;
                du1 = zeros(tb1, 1)|ones(t - tb1, 1);
                du2 = zeros(tb2, 1)|ones(t - tb2, 1);
                z = dt~du1~du2;
            endif;
            
            if model == 2;
                du1 = zeros(tb1, 1)|ones(t - tb1, 1);
                du2 = zeros(tb2, 1)|ones(t - tb2, 1);
                dt1 = zeros(tb1, 1)|seqa(1, 1, (t - tb1));
                dt2 = zeros(tb2, 1)|seqa(1, 1, (t - tb2));
                z = dt~du1~dt1~du2~dt2;
            endif;
            
            dy = trimr(diff(y, 1), 1, 0);
            dz = trimr(diff(z, 1), 1, 0);
            b0 = dy/dz;
            s0 = y[1]-z[1, .] * b0;
            st = y - s0 - z * b0;
            
            if pmax == 0;
                ls = trimr(lagn(st, 1), 1, 0);
                x = ls~dz;
                {b, e1, sig2, se, ssr} = myols(dy, x);
                tau = b[1]/se[1];
            endif;
            
            if pmax > 0;
                dst = trimr(diff(st, 1), 1, 0);
                aicp = zeros(pmax + 1, 1);
                sicp = zeros(pmax + 1, 1);
                tstatp = zeros(pmax + 1, 1);
                lmt = zeros(pmax + 1, 1);
                p = 0;
                do while p <= pmax;
                    lmat = zeros(rows(dst), p + 1);
                    
                    j = 1;
                    
                    do while j <= p;
                        lmat[., j] = lagn(dst, j);
                        j = j + 1;
                    endo;
                    
                    dy = trimr(diff(y, 1), p + 1, 0);
                    ls = trimr(lagn(st, 1), p + 1, 0);
                    dz = trimr(diff(z, 1), p + 1, 0);
                    ds = trimr(lmat, p, 0);
                    //rows(ls);;rows(dz);;rows(ds);
                    
                    if p == 0;
                        x = ls~dz;
                    elseif p > 0;
                        x = ls~dz~ds[., 1:p];
                    endif;
                    
                    {b, e1, sig2, se, ssr} = myols(dy, x);
                    aicp[p+1] = ln(e1'e1/rows(x)) + 2 * (cols(x) + 2)/rows(x);
                    sicp[p+1] = ln(e1'e1/rows(x)) + (cols(x) + 2) * ln(rows(x))/rows(x);
                    tstatp[p+1] = b[cols(x)]/se[cols(x)];
                    lmt[p+1] = b[1]/se[1];
                    p = p + 1;
                endo;
            endif;
            
            if pmax == 0;
                lm_k = tau;
                p = 0;
            else;
                p = _get_lag(ic, pmax, aicp, sicp, tstatp);
                lm_k = lmt[p];
            endif;
            
            if  lm_k < LM_min;
                // First break date
                tb1_min = tb1;
                
                // Second break date
                tb2_min = tb2;
                
                // LM statistic with breaks
                LM_min = lm_k;  

                // Optimal lag
                opt_lag = p;                       
            endif;
            
            tb2 = tb2 + 1;
        endo;
        tb1 = tb1 + 1;
    endo;
    
    lam = sortc(tb1_min/t|tb2_min/t, 1);
    
    // Critical Values (see, Lee & Strazicih, 2003, Table 2)*/
    mat_cv11 = zeros(1, 3);
    mat_cv55 = zeros(1, 3);
    mat_cv1010 = zeros(1, 3);
    cv = zeros(1, 3);
    
    if model == 1;
        cv = -4.545~-3.842~-3.504;
    endif;
    
    if model == 2;
        
        mat_cv1 = {-6.16	 -6.41  -6.33,
            0	 -6.45  -6.42,
            0	   0	-6.32};
        mat_cv5 = {-5.59	 -5.74  -5.71,
            0	 -5.67  -5.65,
            0	   0	-5.73};
        mat_cv10= {-5.27	 -5.32  -5.33,
            0	 -5.31  -5.32,
            0	   0	-5.32};
        
        if lam[1] <= 0.2;
            mat_cv11 = mat_cv1[1,.];
        elseif (0.2 < lam[1]) and (lam[1] <= 0.4);
            mat_cv11 = mat_cv1[2, .];
        elseif (0.4 < lam[1]) and (lam[1] <= 0.6);
            mat_cv11 = mat_cv1[3, .];
        endif;
        
        if lam[2] <= 0.4;
            cv1 = mat_cv11[1];
        elseif (0.4 < lam[2]) and (lam[2] <= 0.6);
            cv1 = mat_cv11[2];
        elseif (0.6 < lam[2]);
            cv1 = mat_cv11[3];
        endif;
        
        if lam[1] <= 0.2;
            mat_cv55 = mat_cv5[1, .];
        elseif (0.2 < lam[1]) and (lam[1] <= 0.4);
            mat_cv55 = mat_cv5[2, .];
        elseif (0.4 < lam[1]) and (lam[1] <= 0.6);
            mat_cv55 = mat_cv5[3, .];
        endif;
        
        if lam[2] <= 0.4;
            cv5 = mat_cv55[1];
        elseif (0.4 < lam[2]) and (lam[2] <= 0.6);
            cv5 = mat_cv55[2];
        elseif (0.6 < lam[2]) ;
            cv5 = mat_cv55[3];
        endif;
        
        if lam[1] <= 0.2;
            mat_cv1010 = mat_cv10[1, .];
        elseif (0.2 < lam[1]) and (lam[1] <= 0.4);
            mat_cv1010 = mat_cv10[2, .];
        elseif (0.4 < lam[1]) and (lam[1] <= 0.6);
            mat_cv1010 = mat_cv10[3, .];
        endif;
        
        if lam[2] <= 0.4;
            cv10 = mat_cv1010[1];
        elseif (0.4 < lam[2]) and (lam[2] <= 0.6);
            cv10 = mat_cv1010[2];
        elseif (0.6 < lam[2]);
            cv10 = mat_cv1010[3];
        endif;
        
        cv = cv1~cv5~cv10;
    endif;
    
    // T and p adjusted critical values based on response surfaces
    if model == 1; cv  = _get_cv_LMrsf(0, T-p , p); endif;
    if model == 2; cv  = _get_cv_LMrsf(2, T-p , p); endif;
  
    _printHeaderTSPDLIB(ic, 0, 2, 2, trimm, "LM", "Unit root", 0);

    // Print break dates
    frac = (tb1_min/rows(y))|(tb2_min/rows(y));
    
    if ismiss(dt_vec) != 1;
        tb1_min = dt_vec[tb1_min];
        tb2_min = dt_vec[tb2_min];
    endif;
    
    // Print results
    local top, side, stats, dec, colwidth;
    side = "LM:"$|"Chosen Lag:";
    top = "";
    stats = Lm_min|opt_lag-1;
    dec = 3;
    colwidth = 25;
    
    _printStatsTable(top, side, stats, cv, dec, colwidth, 0);
        
    // Print break dates
    _printBreaks(dt_vec, tb1_min|tb2_min, frac, 0);
    
    _printConclusion(LM_min, cv, 0, "a unit root");
    
    retp(LM_min, tb1_min, tb2_min, opt_lag - 1, cv);
endp;

