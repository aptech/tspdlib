/*
**  fourier_wadf
**  Reference:
**  Aydin, M. (2020)
**  "A New Nonlinear Wavelet-Based Unit Root Test with Structural Breaks. 
**  Munich Personal RePEc Archive."

**  Aydin, M. &  Pata, U. K., (2020) 
**  "Are Shocks to Disaggregated Renewable Energy Consumption Permanent or Temporary for the US? 
**  Wavelet-Based Unit Root Test with Smooth Structural Shifts. Energy."
**  
**
**  Format:  { FWADF, f, p, cv[k, .] } = Fourier_ADF(y, model[, pmax, fmax, ic]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = Constant
**                      2 = Constant and trend
**
**           pmax    -  Optional, maximum number of lags for Dy; 0=no lags. Default = 8.
**
**           fmax    -  Optional, Maximumum number of single Fourier frequency. Default  5.
**                      (upper bound is 5)

**           ic      -  Optional, information criterion. Default = 3:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**
**  Output:  FWADF   - FWADF statistic
**
**           f       - Number of single frequency
**
**			 p       - number of lags selected by chosen information criterion
**
** This code was written by Mucahit Aydin, Department of Statistics, Sakarya University.
** mail: aydinm@sakarya.edu.tr
** The Saban Nazlioglu's tspdlib library was used for FKSS methodology. 
** When you use this code, please cite:
** No performance guarantee is made. Bug reports are welcome.
**
*/

proc (3) = fourier_wadf(y, model, ...);
    local pmax, fmax, ic, wavelet, dt_vec, d1, yt, FWADF, f, p, cv;
    
    _checkForMissings(y, currentprocname());
    
    // Optional arguments
    { pmax, fmax, ic, wavelet } = dynargsGet(1|4, 8, 5, 3, 0);
    
    // Check for dates
    { dt_vec, y } =_checkfordate(y);
    
    // Wavelet Transformation
    { d1, yt } = __wavelet_transform(y);

    // FWADF Test
    screen off;
    { FWADF, f, p, cv } = Fourier_ADF(yt, model, pmax, fmax, ic, 1);
    screen on;
    
    _printHeaderTSPDLIB(ic, 0, 2, model, 5, 0, "Fourier WADF", "Unit root", 0);
    
    // Print results & Critical values
    local top, side, stats, dec, colwidth;
    side = "WADF-stat:";
    top = "";
    stats = FWADF;
    dec = 3;
    colwidth = 15;
    cv = {};
    
    _printStatsTable(top, side, stats, cv, dec, colwidth, 0, p, f);

    retp(FWADF, f, p );
    
endp;
