/*
**> qr_fourier_kss
**  Reference:
**  Bahmani-Oskooee, M., Chang, T., Niroomand, F., & Ranjbar, O. (2020). 
**  Fourier nonlinear quantile unit root test and PPpmaxin Africa. 
**  Bulletin of Economic Research, 72(4), 451-481.
**
**  Format:  tn                 = QR_Fourier_KSS(y, model, tau [, p, k, _print]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = Model with constant
**                      2 = Model with constant and trend
**
**           tau     -  quantile (0.1,...,1)
**
**           pmax    -  Optional, number of lags for Dy; 0 = no lags
**
**           k       -  Optional, number of Fourier frequency
**
**           _print  -  Optional, print option "true" for printing results
**
**           Nboot   -  Optional, number of bootstrapmaxreplications
**
**
**  Output:  tn      - tn statistic for a given quantile
**			 cv      - 1, 5, and 10 percent bootstrap critical values for tn test
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

proc(1) = QR_Fourier_KSS(y, model, tau, ...);    
    local n, y1, dy, x, p_lags, dy_lags;
    local t, sink, cosk, dt, qr_beta, rho_tau, dt_vec;
    local tn, pmax, k, _print;
    
    // Data checks
    _checkForMissings(y, "QR_Fourier_KSS");
    { dt_vec, y } = _checkfordate(y);
    
    // Get defaults
    { pmax, k, _print } = dynargsGet(1|3, 8, 3, "true");
    
    t    = rows(y);
    dt   = seqa(1, 1, t);
    
    // Get Fourier terms
    { sink, cosk } = _getFourierTerms(t, k);
    
    // Difference and lag variable
    dy   = diff(y, 1);
    y1   = lagn(y^3, 1);
    
    if pmax > 0;
        p_lags  = seqa(1, 1, pmax);
        dy_lags = lagn(dy, p_lags);
    endif;
    
    if model == 1;
        if pmax== 0;
        x = y1 ~ sink ~ cosk;
        elseif pmax> 0;
        x = y1 ~ dy_lags ~ sink ~ cosk;
        endif;            
    endif;    

    if model == 2;
        if pmax== 0;
        x = y1 ~ sink ~ cosk ~ dt;
        elseif pmax> 0;
        x = y1 ~ dy_lags ~ sink ~ cosk ~ dt;
        endif;    
    endif; 

    dy = trimr(dy, pmax+1, 0);
    y1 = trimr(y1, pmax+1, 0);
    x  = trimr(x, pmax+1, 0);
    
    // Get QR regression beta
    qr_beta = __get_qr_adf_beta(DY, X, tau);

    // AR term for QR reg
    rho_tau = qr_beta[2]; 
    
    // Compute the tn statistic
    n = rows(y);
    tn = __get_qr_adf_stat(dy, y1, miss(), x, rho_tau, tau, n, pmax, 1, 1);

    if _print == "true";
        _printHeaderTSPDLIB(0, 0, 1, model, 4, 0, "Quantile Fourier KSS", "Unit root", 0);
        
        local top, side, stats, dec;
        top = "";
        side = "quantile:"$|"rho(quantile):"$|"Fourier QR-KSS:";
        stats = tau|rho_tau|tn;
        
          #ifminkernelversion(20)
            sprintf("%-15s %45.3f", side, stats);
            print;
            print;
        #else;
            side$~(ntos(stats, dec));
        #endif;
    endif;
    
retp(tn);
endp;

/*
**> qr_fourier_kss_bootstrap
**  Reference:
**  Bahmani-Oskooee, M., Chang, T., Niroomand, F., & Ranjbar, O. (2020). 
**  Fourier nonlinear quantile unit root test and PPpmaxin Africa. 
**  Bulletin of Economic Research, 72(4), 451-481.
**
**  Format:  { test_boot, cv }  = QR_Fourier_KSS_bootstrap(y, model, tau [, p, k, Nboot]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	1 = Model with constant
**                      2 = Model with constant and trend
**
**           tau     -  quantile (0.1,...,1)
**
**           pmax    -  Optional, number of lags for Dy; 0 = no lags
**
**           k       -  Optional, number of Fourier frequency
**
**           Nboot   -  Optional, number of bootstrapmaxreplications
**
**
**  Output:  tn      - tn statistic for a given quantile
**			 cv      - 1, 5, and 10 percent bootstrap critical values for tn test
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/
proc(2) = QR_Fourier_KSS_bootstrap(y, model, tau, ...);
    local t, sink, cosk, c, trend, dy, p_lags, dy_lags;
    local x, b, yd, yd1, fi;
    local mu, tt, mustar, ydstar, ystar;
    local test_boot, tn_boot, replace, dt_vec, pmax, k, Nboot, cv_boot;
    
    // Data checks
    _checkForMissings(y, "QR_Fourier_KSS");
    { dt_vec, y } = _checkfordate(y);
    
    // Get defaults
    { pmax, k, Nboot } = dynargsGet(1|3, 8, 3, 20000);
    
    // See Li & Zheng (2018, p.86)
    t     = rows(y);
    
    // Get Fourier terms
    { sink, cosk } = _getFourierTerms(t, k);

    c     = ones(t, 1);
    trend = seqa(1, 1, t);
    dy   = diff(y, 1);

    if pmax > 0;
        p_lags  = seqa(1, 1, pmax);
        dy_lags = lagn(dy, p_lags);
    endif;
    
    // X under the null hypothesis
    if model == 1;
        if pmax== 0;
            x = c ~ sink ~ cosk;
        elseif pmax> 0;
            x = c ~ sink ~ cosk ~ dy_lags;
        endif;            
    endif;    

    if model == 2;
        if pmax== 0;
            x = c ~ trend ~ sink ~ cosk ;
        elseif pmax> 0;
            x = c ~ trend ~ sink ~ cosk ~ dy_lags ;
        endif;    
    endif; 
    
    dy = trimr(dy, pmax+1, 0);
    x  = trimr(x, pmax+1, 0);
    b  = inv(x'x)*x'dy;
    yd = dy - x * b;
    yd1= lagn(yd,1);
    yd = trimr(yd, 1, 0);
    yd1= trimr(yd1, 1, 0); 
    fi = inv(yd1'yd1)*yd1'yd;
    mu = yd - yd1 * fi;     // Residuals from AR(1) model
    mu = mu - meanc(mu);    //Centered residuals
    
    tt = rows(mu);
    test_boot = zeros(Nboot,1);
    for reps(1,Nboot,1);
        replace = 1;
        mustar = sampleData(mu, tt, replace);
        ydstar = zeros(tt,1);
        ydstar[1] = mustar[1];
        for s(2,tt,1); 
            ydstar[s]= ydstar[s-1] + mustar[s];
        endfor;
        ystar = ydstar;
        tn_boot = QR_Fourier_KSS(ystar, model, tau, pmax, k, "false");
        test_boot[reps] = tn_boot;
            
    endfor; //End for replications
    
    test_boot = sortc(test_boot, 1); 
    cv_boot   = test_boot[0.99*Nboot] ~ test_boot[0.95*Nboot] ~ test_boot[0.90*Nboot];
    
retp(test_boot, cv_boot);
endp;
