
/*
**> adf_1br
**  Reference:
**  Zivot,E. and Andrews, W.K. (1992),
**  "Further Evidence on the Great Crasch, the Oil-Price Shock, and the Unit-Root Hypothesis"
**  Journal of Business & Economic Statistics 10(3), 251-270.
**
**  Format:  {tstat,tb,p,cv} = ADF_1break(y, model[, pmax, ic, trimm]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**           model   - 	1=Model A: break in level
**                      2=Model C: break in level and trend
**           pmax    -  Maximum number of lags for Dy; 0=no lags
**           ic      -  Information Criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**			 trim    - 	Trimming rate
**                      10% in ZA (1992) and LS (2003).
**
**  Output:  tstat   - minimum test statistic
**			 tb      - location of break
**			 p      - number of lags selected by chosen information criterion
**			 cv      - 1%, 5%, 10% critical values for the chosen model
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc(6) = ADF_1break_est(y, model, ...);
    local t, tb1_min, ADF_min, T1, T2, tb1, dc, dt, du1, 
    dt1, br1, taup, aicp, sicp, tstatp, p, dy, y1, dep, z, x, 
    stat, de, brlag, e1, br, ze, b, sig2, se, ssr, resid, e, 
    opt_lag, cv, se_mat, se_keep, b_mat, b_keep,
    outlier, pmax, ic, trimm, frac, dt_vec;
    
    { outlier, pmax, ic, trimm } = dynargsGet(1|4, 1, 8, 3, 0.15);
    { dt_vec, y } =_checkfordate(y);
    
    t = rows(y);
    tb1_min = 0;
    ADF_min = 1000;
    
    T1 = maxc((3 + pmax)|ceil(trimm * t));
    T2 = minc((t - 3 -pmax)|floor((1 - trimm) * t));
    
    if T1 < (pmax + 2);
        T1 = pmax + 3;
    endif;
    
    tb1 = T1;
    do while tb1 <= T2;
        
        // Deterministic term=constant
        dc = ones(t, 1); 
        
        // Deterministic term=trend
        dt = seqa(1, 1, t);             
        
        // Break dummies
        du1 = zeros(tb1-1, 1)|ones(t - tb1 + 1, 1);
        dt1 = zeros(tb1-1, 1)|seqa(1, 1, (t - tb1 + 1));
        br1 = zeros(tb1-1, 1)|ones(1, 1)|zeros(t-tb1, 1);

        t = rows(y);
        taup = zeros(pmax + 1, 1);
        aicp = zeros(pmax + 1, 1);
        sicp = zeros(pmax + 1, 1);
        tstatp = zeros(pmax + 1, 1);
        
        
        if outlier == 1; 
            
            for p(0, pmax, 1);
                
                if model == 1; 
                    z = dc ~ du1 ~ br1;
                endif;
                
                if model == 2; 
                    z = dc ~ dt ~ du1 ~ dt1 ~ br1; 
                endif;
                
                // Estimate storage matrices
                b_mat =  zeros(pmax + 1, 1 + cols(z) + pmax);
                se_mat = b_mat;
                
                if p > 0;
                    dy   = zeros(rows(y), p);
                    for j(1,p,1);
                        dy[., j] = diff(lagn(y, j),1);
                    endfor;
                    dy = trimr(dy, p + 1, 0);
                endif;
                
                y1  = trimr(lagn(y, 1), p + 1, 0);
                dep = trimr(y,  p + 1, 0); 
                z   = trimr(z,  p + 1, 0);

                if p == 0;
                    x   = y1 ~ z;
                endif; 
                
                if p > 0;
                    x   = y1 ~ z ~ dy;
                endif; 
                
                    {b, e1, sig2, se, ssr} = myols(dep, x);
                
                // Store estimates
                b_mat[p+1, 1:1+cols(z)+p] = b';
                se_mat[p+1, 1:1+cols(z)+p] = se';
                
                taup[p+1] = (b[1]-1)/se[1];
                aicp[p+1] = ln(e1'e1/rows(x)) + 2 * (cols(x) + 2)/rows(x);
                sicp[p+1] = ln(e1'e1/rows(x)) + (cols(x) + 2) * ln(rows(x))/rows(x);
                tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
            endfor; 
        endif;    
 
        if outlier == 2;
            
            if model == 1; 
               x = dc ~ du1;
            endif;
            
            if model == 2; 
                x = dc ~ dt ~ du1 ~ dt1;
            endif;
            
            // Estimate storage matrices
            b_mat =  zeros(pmax + 1, 1 + cols(x) + pmax);
            se_mat = b_mat;
            
            {b, resid, sig2, se, ssr} = myols(y, x);
            
            // Store estimates
            b_mat[p+1, 1:1+cols(z)+p] = b';
            se_mat[p+1, 1:1+cols(z)+p] = se';
            
            for p(0, pmax, 1);
                
                if p > 0;
                    de = zeros(rows(resid), p);
                    for j(1,p,1);
                        de[., j] = diff(lagn(resid, j),1);
                    endfor;
            
                    brlag = zeros(rows(br1), p);
                    for j(1,p,1);
                        brlag[., j] = lagn(br1, j);
                    endfor;
                    
                    de = trimr(de, p + 1, 0);
                    br = br1 ~ brlag; 
                    ze = trimr(br,  p + 1, 0);    
                endif;
                
                e1 = trimr(lagn(resid, 1), p + 1, 0);
                e  = trimr(resid,  p + 1, 0); 
                
                if p == 0;
                    x = e1;
                endif;  
                
                if p > 0;
                    x = e1 ~ ze ~ de;
                endif;  
                
                    {b, e1, sig2, se, ssr} = myols(e, x);
                   
                taup[p+1] = (b[1]-1)/se[1];
                aicp[p+1] = ln(e1'e1/rows(x)) + 2 * (cols(x) + 2)/rows(x);
                sicp[p+1] = ln(e1'e1/rows(x)) + (cols(x) + 2) * ln(rows(x))/rows(x);
                tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
            endfor;
        endif;
        
        p  = _get_lag(ic, pmax, aicp, sicp, tstatp);
        stat = taup[p];
        
        if  stat < ADF_min;
            // First break date
            tb1_min=tb1;   
            
            // t-statistic with break
            ADF_min =stat;  
            
            // Store coefficient estimates
            opt_lag = p;
            b_keep = b_mat[p, 1:1+cols(z)+p-1];
            
            // Store se estimates
            se_keep = se_mat[p, 1:1+cols(z)+p-1];
        endif;
        
        tb1 = tb1 + 1;
    endo;
    
    if model == 1;
        cv = -5.34|-4.80|-4.58;
    endif;
    
    if model == 2;
        cv = -5.57|-5.08|-4.82;
    endif;
        
    _printHeaderTSPDLIB(ic, 0, 2, 1, trimm, "ADF", "Unit root", 0);
    
    frac = tb1_min/rows(y);
    
    if ismiss(dt_vec) != 1;
        tb1_min = dt_vec[tb1_min];
    endif;

    // Print results & Critical values
    local side, stats, dec, colwidth;
    side = "ADF-stat:"$|"Chosen Lag:";
    stats = ADF_min|opt_lag-1;
    dec = 3;
    colwidth = 15;
    
    // Print stats 
    _printStatsTable("", side, stats, cv, dec, colwidth, 0);

    // Print break dates
    _printBreaks(dt_vec, tb1_min, frac, 0);
    
    // Print conclusions
    _printConclusion(ADF_min, cv, 0, "a unit root");
    
    retp(ADF_min, tb1_min, opt_lag-1, cv, b_keep, se_keep);
endp;
