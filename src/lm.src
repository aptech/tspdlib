
/*
**> lm
**  Reference:
** Schmidt, P., & Phillips, P. C. (1992).
** LM tests for a unit root in the presence of deterministic trends.
** Oxford Bulletin of Economics and Statistics, 54(3), 257-287.
**
**  Format:  { tstat, p, cv } = LM(y[, pmax, ic]);
**
**  Input:   Y	     -  Nx1 matrix, data.
**
**           pmax    -  Optional, maximum number of lags for Dy; 0=no lags. Default = 8.
**
**           ic      -  Optional, information criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**                      Default = 3.
**
**  Output:  tstat   - LM :math:`\tau`-stat.istic
**
**			 p       - number of lags selected by chosen information criterion
**
**			 cv      - 1%, 5%, 10% critical values for the break location based on response surfaces
**
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc(3) = LM(y, ...);
    local t, p, j, taup, aicp, sicp, tstatp, dc, dt, z, dy, dz, check,
    b0, psi, ylm, ly, lmat, dep, y1, ds, ldy, sbt, trnd, x, n, k, LL, tau,
    b, e1, sig2, se, ssr, cv, pmax, ic, dt_vec;
    
    // Get defaults
    { pmax, ic } = dynargsGet(1|2, 8, 3);
    { dt_vec, y } =_checkfordate(y);
    
    t = rows(y);
    taup = zeros(pmax + 1, 1);
    aicp = zeros(pmax + 1, 1);
    sicp = zeros(pmax + 1, 1);
    tstatp = zeros(pmax + 1, 1);
    dc = ones(t, 1);
    dt = seqa(1, 1, t);
    z  = dt;
    dy = trimr(diff(y, 1), 1, 0);
    dz = ones(rows(dy), 1);
    b0 = dy/dz;
    psi = y[1] - z[1, .] * b0;
    ylm = y - psi - z * b0;
    ylm = trimr(ylm, 1, 0);
    t  = rows(ylm);
    ds = diff(ylm, 1);
    ly = lagn(ylm, 1);
    
    // Deterministic term=constant
    dc = ones(t, 1);
    
    // Deterministic term=trend
    dt = seqa(1, 1, t);
    
    p = 0;
    do while p <= pmax;
        lmat = zeros(rows(ds), p + 1);
        
        j = 1;
        do while j <= p;
            lmat[., j] = lagn(ds, j);
            j = j + 1;
        endo;
        
        dep = trimr(dy, p + 1, 0);
        y1 = trimr(ly, p + 1, 0);
        ldy = trimr(lmat, p + 1, 0);
        sbt = trimr(dc, p + 1, 0);
        trnd = trimr(dt, p + 1, 0);
        
        if p == 0;
            x = y1~sbt;
        elseif p > 0;
            x = y1~sbt~ldy[., 1:p];
        endif;
        
        {b, e1, sig2, se, ssr} = myols(dep, x);
        
        taup[p+1] = b[1]/se[1];
        n = rows(x);
        k = cols(x);
        
        // Log-likelihood
        LL = -n/2 * (1 + ln(2 * pi) + ln(e1'e1/n));
        aicp[p+1] = (2 * k - 2 * LL)/n;
        sicp[p+1] = (k * ln(n) - 2 * LL)/n;
        tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
        p = p + 1;
    endo;
    
    check = taup~aicp~sicp~tstatp;
    p   = _get_lag(ic, pmax, aicp, sicp, tstatp);
    tau = taup[p];
    // cv  = _get_cv_lm(t);
    cv  = _get_cv_LMrsf(0, T-p , p);
    
    
    _printHeaderTSPDLIB(ic, 0, 0, 0, 0, 0, "LM", "Unit root", 0);
    
      // Print results
    local top, side, stats, dec, colwidth;
    top = "LM Stat:";
    side = "";
    stats = tau;
    dec = 3;
    colwidth = 15;
    
    _printStatsTable(top, side, stats, cv, dec, colwidth, 0, p-1);
    _printConclusion(tau, cv, 0, "a unit root");
    
    retp(tau, p - 1, cv');
endp;

// Critical Values (see Schmidt & Phillips, 1992, Table 1A)
proc(1) = _get_cv_lm(T);
    local crit, cv;
    
    crit = {-3.90 -3.18 -2.85,      @ T = 25  @
        -3.73 -3.11 -2.80,      @ T = 50  @
        -3.63 -3.06 -2.77,      @ T = 100 @
        -3.61 -3.04 -2.76,      @ T = 200 @
        -3.59 -3.04 -2.76,      @ T = 500 @
        -3.58 -3.02 -2.75,      @ T = 1000 @
        -3.66 -3.02 -2.7};      @ T = inf @
    
    if            T <= 25;
        cv = crit[1,.];
    endif;
    if 25 < T and T <= 50;
        cv = crit[2,.];
    endif;
    if 50 < T and T <= 100;
        cv = crit[3,.];
    endif;
    if 100< T and T <= 200;
        cv = crit[4,.];
    endif;
    if 200< T and T <= 500;
        cv = crit[5,.];
    endif;
    if 500< T and T <= 1000;
        cv = crit[6,.];
    endif;
    if 1000< T            ;
        cv = crit[7,.];
    endif;
    
    retp(cv);
endp;

