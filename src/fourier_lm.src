
/*
**> fourier_lm
**  Reference:
**  Enders, W., and Lee, J. (2012),
**  "A Unit Root Test Using a Fourier Series to Approximate Smooth Breaks"
**  Oxford Bulletin of Economics and Statistics,74,4(2012),574-599.
**
**  Format:  { LMk, k, p, cv[k, .] } = Fourier_LM(y[, pmax, kmax, ic]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           pmax    -  Optional, maximum number of lags for Ds; 0=no lags. Default = 8.
**
**           kmax    -  Optional, maximumum number of single Fourier frequency. Default = 5.
**                      (upper bound is 5)
**
**           ic      -  Optional, information criterion. Default = 3.:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**
**  Output:  LMk     -  LM(k) statistic
**
**           k       -  Number of singlefrequency
**
**			 p       -  number of lags selected by chosen information criterion
**
**			 cv      -  1%, 5%, 10% critical values for the chosen model and k
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

/*03 February 2015 */

proc(4) = Fourier_LM(y, ...);
    local t, p, taup, aicp, sicp, tstatp, ssrp, ssrk, tauk,
        k, dc, dt, sink, cosk, dy, dsink, dcosk,
        ylm, ly, lmat, dep, y1, ldy,
        sbt, trnd, sinp, cosp, z, f, lm_, dy0,
        crit, keep_p, opt_lag, pmax, kmax, ic, dt_vec, zero_vec;
    
    _checkForMissings(y, currentprocname());
    
    { pmax, kmax, ic } = dynargsGet(1|3, 8, 5, 3);
    
    // Check for dates
    { dt_vec, y } =_checkfordate(y);

    taup = zeros(pmax + 1, 1);
    aicp = zeros(pmax + 1, 1);
    sicp = zeros(pmax + 1, 1);
    tstatp = zeros(pmax + 1, 1);
    ssrp = zeros(pmax + 1, 1);
    ssrk = zeros(kmax, 1);
    tauk = zeros(kmax, 1);
    keep_p = zeros(kmax, 1);
    
    k = 1;
    
    { t, dy0, ly, dc, dt } = _getFourierDeterministic(y);
    dy0 = trimr(dy0, 1, 0);
    
    do while k <= kmax;
        // Fourier terms
        { sink, cosk } = _getFourierTerms(t, k);
        
        dsink = trimr(diff(sink, 1), 1, 0);
        dcosk = trimr(diff(cosk, 1), 1, 0);
        
        z = dt~sink~cosk;
        ylm = _detrendData(y, z, dy0, dsink, dcosk);
        
        // New deterministic trends
        { t, dy, ly, dc, dt } = _getFourierDeterministic(ylm);
        
        // Lag y variable
        lmat = lagn(dy, seqa(1, 1, pmax));
        
        // Zero vector
        zero_vec = zeros(rows(dy), 1);
        
        // New Fourier Terms
        sink = diff(sink, 1);
        cosk = diff(cosk, 1);
        
        p = 0;
        do while p <= pmax;
            
            // Get lags of y
            ldy = trimr(zero_vec, p+1, 0);
            
            if p>0;
                ldy = trimr(lmat[., 1:p], p+1, 0)~ldy;
            endif;
            
            // Trim components
            dep = trimr(dy, p + 1, 0);
            y1 = trimr(ly, p + 1, 0);
            
            sbt = trimr(dc, p + 1, 0);
            trnd = trimr(dt, p + 1, 0);
            
            // Trim Fourier terms
            sinp = trimr(sink, p + 1, 0);
            cosp = trimr(cosk, p + 1, 0);
            
            if p == 0;
                z = y1~sbt~sinp~cosp;
            elseif p > 0;
                z = y1~sbt~sinp~cosp~ldy[., 1:p];
            endif;
            
            { taup[p+1], aicp[p+1], sicp[p+1], tstatp[p+1], ssrp[p+1] } = _runFourierOLS(dep, z, k);
            
            p = p + 1;
        endo;
        
        // Find optimal lag
        p  = _get_lag(ic, pmax, aicp, sicp, tstatp);
        keep_p[k] = p;
        ssrk[k] = ssrp[p];
        tauk[k] = taup[p];
        k = k + 1;
    endo;
    
    f = minindc(ssrk);
    LM_ = tauk[f];
    opt_lag = keep_p[f];
    
    // Critical Values (see, Enders & Lee, 2012, Table 1)
    crit = _getFourierLMCrit(T);
    
    _printHeaderTSPDLIB(ic, 0, 0, 0, 4, 0, "Fourier LM", "Unit root", 0);
    
    "Fourier LM test (Enders & Lee, 2012)";
    // Print results & Critical values
    local top, stats, side, dec, colwidth;
    side = "LM test:";
    top = "";
    stats = LM_;
    side = "";
    dec = 3;
    colwidth = 15;
    
    _printStatsTable(top, side, stats, crit[f, .]', dec, colwidth, 0, opt_lag, f);
    _printConclusion(LM_, crit[f, .], 0, "unit root");
    
    retp(LM_, f, opt_lag - 1, crit[f, .]);
endp;

proc (1) = _detrendData(y, z, dy, dsink, dcosk);
    local dz, b0, psi_;
    dz = ones(rows(dy), 1)~dsink~dcosk;
    b0 = dy/dz;
    psi_ = y[1] - dz[1,.] * b0;
    retp(y - psi_ - z * b0);
endp;

proc (1) = _getFourierLMCrit(T);
    local crit;
    
    crit = zeros(5, 3);
    
    if T <= 150;
        crit = {-4.69 -4.10 -3.82,
            -4.25 -3.57 -3.23,
            -3.98 -3.31 -2.96,
            -3.85 -3.18 -2.86,
            -3.75 -3.11 -2.81};
    endif;
    
    if 151 < T and T <= 349;
        crit = {-4.61 -4.07 -3.79,
            -4.18 -3.55 -3.23,
            -3.94 -3.30 -2.98,
            -3.80 -3.18 -2.88,
            -3.73 -3.12 -2.83};
    endif;
    
    if 350 < T and T <= 500;
        crit = {-4.57 -4.05 -3.78,
            -4.13 -3.54 -3.22,
            -3.94 -3.31 -2.98,
            -3.81 -3.19 -2.88,
            -3.75 -3.14 -2.83};
    endif;
    
    if 500 < T;
        crit = {-4.56 -4.03 -3.77,
            -4.15 -3.54 -3.22,
            -3.94 -3.30 -2.98,
            -3.80 -3.19 -2.88,
            -3.74 -3.13 -2.83};
    endif;
    
    retp(crit);
endp;
