

/*
**> adf
**  Reference:
**  Dickey, D.A., Fuller, W.A. (1979).
**  Distribution of the estimators for autoregressive time series with a unit root.
**  Journal of the American Statistical Society75, 427-431.
**
**  Cheung, Y. W., & Lai, K. S. (1995).
**  Lag order and critical values of the augmented Dickeyâ€“Fuller test.
**  Journal of Business & Economic Statistics, 13(3), 277-280.
**
**  Format:  {tstat, p, cv} = ADF(y, model[, pmax, ic]);
**
**  Input:   Y	     -  Nx1 matrix, data,
**           model   - 	Optional, specifies deterministic components.
**                      0 = none
**                      1 = model with constant
**                      2 = model with constant and trend
**           pmax    -  Optional, maximum number of lags for Dy; 0 = no lags
**           ic      -  Optional, information criterion:
**                      1 = Akaike
**                      2 = Schwarz
**                      3 = t-stat significance
**
**  Output:  tstat   - ADF tau-statistic
**			 p       - number of lags selected by chosen information criterion
**			 cv      - 1, 5, and 10 percent critical values for ADF tau-stat based on response surfaces
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc(3) = ADF(y, model, ...);
    local t, p, j, taup, aicp, sicp, tstatp;
    local dy, ly, dc, dt, lmat, dep, y1, ldy;
    local sbt, trnd, x, tau, LL, n, k;
    local b, e1, sig2, se, ssr, cv;
    local pmax, ic;
    
    { pmax, ic } = dynargsGet(1|2, 8, 3);
    
    t    = rows(y);
    taup = zeros(pmax + 1, 1);
    aicp = zeros(pmax + 1, 1);
    sicp = zeros(pmax + 1, 1);
    tstatp = zeros(pmax + 1, 1);
    
    dy = diff(y, 1);
    ly = lagn(y, 1);
    dc = ones(t, 1);       /*Deterministic term=constant*/
    dt = seqa(1, 1, t);     /*Deterministic term=trend*/
    
    p = 0;
    do while p <= pmax;
        lmat = zeros(rows(dy), p + 1);
        j = 1;
        do while j <= p;
            lmat[., j] = lagn(dy, j);
            j = j + 1;
        endo;
        dep = trimr(dy, p + 1, 0);
        y1 = trimr(ly, p + 1, 0);
        ldy = trimr(lmat, p + 1, 0);
        sbt = trimr(dc, p + 1, 0);
        trnd = trimr(dt, p + 1, 0);
        
        if p == 0;
            if model == 0;
                x = y1;
            endif;
            if model == 1;
                x = y1~sbt;
            endif;
            if model == 2;
                x = y1~sbt~trnd;
            endif;
        elseif p > 0;
            if model == 0;
                x = y1~ldy[., 1:p];
            endif;
            if model == 1;
                x = y1~sbt~ldy[., 1:p];
            endif;
            if model == 2;
                x = y1~sbt~trnd~ldy[., 1:p];
            endif;
        endif;
        
        {b, e1, sig2, se, ssr} = myols(dep, x);
        taup[p+1] = b[1]/se[1];
        n = rows(x);
        k = cols(x);
        
        // Log-likelihood
        LL = -n/2 * (1 + ln(2*pi) + ln(e1'e1/n));
        
        aicp[p+1] = (2 * k-2 * LL)/n;
        sicp[p+1] = (k * ln(n) - 2 * LL)/n;
        tstatp[p+1] = abs(b[cols(x)]/se[cols(x)]);
        p = p + 1;
    endo;
    
    p   = _get_lag(ic, pmax, aicp, sicp, tstatp);
    tau = taup[p];
    //cv  = _get_cv_adf(model, t);
    
    // T and p adjusted critical values based on response surfaces
    cv = _get_cv_ADFrsf(model, T-p , p);
    
    _printHeaderTSPDLIB(ic, 0, 1, 0, 0, "ADF", "Unit root", 0);
    
    local side, stats, dec, colwidth;
    side = "ADF-stat:"$|"Chosen Lag:";
    stats = tau|p-1;
    dec = 3;
    colwidth = 15;
    _printStatsTable("", side, stats, cv, dec, colwidth, 0);    
    _printConclusion(tau, cv, 0, "a unit root");
    
    retp(tau, p - 1, cv');
endp;

proc (0) = _printHeaderTSPDLIB(ic, varm, model, breaks, trimmage, test, null_hyp, long);
    local ic_str, varm_str, modl_str, fmt, clm1, clm2;
    
    // Get information criterion
    if ic;
        ic_str = _printIC(ic);
    endif;
    
    // Get LR variance type
    if varm;
        varm_str = _printVarm(varm);
    endif;
    
    // Get model specification
    if type(model) != 13 and type(model) != 15;
        if model == 1;
            modl_str = _printModel1(model);
        elseif model == 2;
            modl_str = _printModel2(model);
        elseif model == 3;
            modl_str = _printModel3(model);
        endif;
    elseif type(model) == 13 or type(model) == 15;
        modl_str = model;
        model = 4;
    endif;
    
    // Set up table columns
    clm1 = "Test:"$|"Ho:";
    clm2 = test$|null_hyp;
    
    if breaks;
        clm1 = clm1$|"Number of breaks:";
        if breaks<3;
            clm2 = clm2$|ntos(breaks, 1);
        else;
            clm2 = clm2$|"Unknown";
        endif;
    endif;
    
    if ic;
        clm1 = clm1$|"Lag selection:";
        clm2 = clm2$|ic_str;
    endif;
    
    if varm;
        clm1 = clm1$|"LR variance:";
        clm2 = clm2$|varm_str;
    endif;
    
    if trimmage;
        trimmage = trimmage*100;
        trimmage = ntos(trimmage, 2);
        clm1 = clm1$|"Trimming rate (%):";
        clm2 = clm2$|trimmage;
    endif;
    
    if model;
        clm1 = clm1$|"Model:";
        clm2 = clm2$|modl_str;
    endif;
    
    // Print table

    if long;
        fmt = "%-30s%30s%30s";
        sprintf(fmt, clm1, "",clm2);
        print "=======================================================================================================";
    else;
        fmt = "%-30s%30s";
        sprintf(fmt, clm1, clm2);
        print "==============================================================";
    endif;
endp;

// Critical Values (see Fuller, 1976, Table 5.3)
proc(1) = _get_cv_adf(model, T);
    local crit, cv;
    
    if model == 0;
        crit = {-2.66 -1.95 -1.60,      @ T = 25  @
            -2.62 -1.95 -1.61,      @ T = 50  @
            -2.60 -1.95 -1.61,      @ T = 100 @
            -2.58 -1.95 -1.62,      @ T = 250 @
            -2.58 -1.95 -1.62,      @ T = 500 @
            -2.58 -1.95 -1.62,      @ T = 750 @
            -2.58 -1.95 -1.62};     @ T = inf @
    endif;
    
    if model == 1;
        crit = {-3.75 -2.99 -2.64,      @ T = 25  @
            -3.59 -2.93 -2.60,      @ T = 50  @
            -3.50 -2.90 -2.59,      @ T = 100 @
            -3.46 -2.88 -2.58,      @ T = 250 @
            -3.44 -2.87 -2.57,      @ T = 500 @
            -3.43 -2.87 -2.57,      @ T = 750 @
            -3.42 -2.86 -2.57};     @ T = inf @
    endif;
    
    if model == 2;
        crit = {-4.38 -3.60 -3.24,      @ T = 25  @
            -4.15 -3.50 -3.18,      @ T = 50  @
            -4.04 -3.45 -3.15,      @ T = 100 @
            -3.98 -3.42 -3.13,      @ T = 250 @
            -3.97 -3.42 -3.13,      @ T = 500 @
            -3.96 -3.41 -3.13,      @ T = 750 @
            -3.96 -3.41 -3.13};     @ T = inf @
    endif;
    
    if            T <= 25;
        cv = crit[1,.];
    endif;
    if 25 < T and T <= 50;
        cv = crit[2,.];
    endif;
    if 50 < T and T <= 100;
        cv = crit[3,.];
    endif;
    if 100< T and T <= 250;
        cv = crit[4,.];
    endif;
    if 250< T and T <= 500;
        cv = crit[5,.];
    endif;
    if 500< T and T <= 750;
        cv = crit[6,.];
    endif;
    if 750 < T            ;
        cv = crit[7,.];
    endif;
    
    retp(cv);
endp;

proc (1) = _printModel1(model);
    if model == 0;
        retp("No constant or trend");
    elseif model == 1;
        retp("Constant");
    elseif model == 2;
        retp("Constant and Trend");
    endif;
endp;

proc (1) = _printModel2(model);
    if model == 1;
        retp("Break in level");
    elseif model == 2;
        retp("Break in level & trend");
    endif;
endp;

proc (1) = _printModel3(model);
    if model == 1;
        retp("Level shift");
    elseif model == 2;
        retp("Level shift with trend");
    elseif model == 3;
        retp("Regime shift");
    elseif model == 4;
        retp("Regime and trend shift");
    endif;
endp;

proc (1) = _printIC(ic);
    // Print IC
    if ic == 1;
        retp("AIC lag selection");
    elseif ic == 2;
        retp("SIC lag selection");
    elseif ic == 3;
        retp("T-stat lag selection");
    endif;
endp;

proc (1) = _printVarm(varm);
    if varm == 1;
        retp( "iid");
    elseif varm == 2;
        retp("Bartlett");
    elseif varm == 3;
        retp("Quadratic Spectral (QS)");
    elseif varm == 4;
        retp("SPC with Bartlett");
    elseif varm == 5;
        retp("SPC with QS");
    elseif varm == 6;
        retp("Kurozumi with Bartlett");
    elseif varm == 7;
        retp("Kurozumi with QS");
    endif;
    
endp;
