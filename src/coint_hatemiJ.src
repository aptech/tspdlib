
/*
**  coint_hatemiJ
**
**  Reference:
**  Hatemi-J (2008).
**  "Tests for cointegration with two unknown regime shifts
**   with an application to financial market integration"
**  Empirical Economics, 35, 497-505.
**
**
**  Format:  { ADF_min, TB1adf, TB2adf, Zt_min, TB1zt, TB2zt, Za_min, TB1za, TB2za, cvADFZt, cvZa }
**                              = coint_hatemiJ(y, x, model[, bwl, ic, pmax, varm, trimm]);
**
**  Input:
**           Y	     -  Nx1 matrix, dependent variable
**
**           X       -  NxK matrix, independent variables
**
**           model   - 	3 = C/S (regime shift)
**
**           bwl     -  Optional, bandwidth for long-run variance computations.
**                      Default = round(4 * (T/100)^(2/9)).
**
**           ic      -  Optional, information criterion for ADF-based test:
**                      Default = 3 [t-stat]
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**
**           pmax    -  Optional, maximum number of lags for for Dy in ADF test; 0=no lags
**                      Default = 8.
**
**           varm   -   Optional, long-run consistent variance estimation method for PP-based tests
**                      Default = 1.
**                      1 = iid;
**                      2 = Bartlett
**                      3 = Quadratic Spectral (QS);
**                      4 = SPC with Bartlett /see (Sul, Phillips & Choi, 2005)
**                      5 = SPC with QS;
**                      6 = Kurozumi with Bartlett
**                      7 = Kurozumi with QS
**                      Updated from Carrion-i-Silvestre & Sanso (2007) GAUSS codes.
**                      See:
**                      Carrion-i-Silvestre, J. L., & Sanso, A. (2006).
**                      A guide to the computation of stationarity tests.
**                      Empirical Economics, 31(2), 433.
**
**           trimm   -  Optional, trimming rate. Default [0.10, 0.90]
**
**  Output:
**          ADF_min -   ADF test
**
**          TB1_adf -   First date break location using ADF testing.
**
**          TB2_adf -   Second date break location using ADF testing.
**
**          Zt_min  -   Zt test
**
**          TB1_zt -    First date break location using Zt testing.
**
**          TB2_zt -    Second date break location using Zt testing.
**
**          Za_min  -   Zalpha test
**
**          TB1_za  -   First date break location using Za testing.
**
**          TB2_za -    Second date break location using Za testing.
**
**	        cvADFZt -   1%, 5%, 10% critical values for ADF and Zt test statistics.
**
**          cvZa    -   1%, 5%, 10% critical values for Za test statistics.
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
*/


/*Procedures*/

proc(11) = coint_hatemiJ(y, x, ...);
    local n,TB1adf, TB1za, TB1zt, TB2adf, TB2za, TB2zt, ADF_min, Za_min, Zt_min;
    local T1, T2, T3, DF, Za, Zt, lagadf, tb1, tb2, du1, du2, x1, stat1, stat2, stat3;
    local b, e1, sig2, se, ssr, cvADFZt, cvZa, k;
    local cv0, cv1, cv2, bwl_dftl, bwl, ic, pmax, varm, trimm, model, dt_vec,
        fracADF, fracZa, fracZt, TBadf, TBzt, TBza;
    
    n     = rows(y);      /*# of observation*/
    bwl_dftl = round(4 * (n/100)^(2/9));
    
    { model, bwl, ic, pmax, varm, trimm } = dynargsGet(1|6, 3, bwl_dftl, 3, 8, 1, 0.10);
    
    // Check for dates
    { dt_vec, x } =_checkfordate(x);
    
    TB1adf= 0;
    TB1zt = 0;
    TB1za = 0;
    TB2adf= 0;
    TB2zt = 0;
    TB2za = 0;
    ADF_min= 1000;
    Zt_min = 1000;
    Za_min = 1000;
    
    //beginning point for loop
    T1=round(trimm*n);
    
    //final point for loop on first break
    T2=round((1-2*trimm)*n);
    
    //final point for loop on second break
    T3=round((1-trimm)*n);
    
    DF = zeros(T2-T1+1,T3-T1*2+1);
    lagadf = zeros(T2-T1+1,T3-T1*2+1);
    Zt= zeros(T2-T1+1,T3-T1*2+1);
    Za= zeros(T2-T1+1,T3-T1*2+1);
    
    tb1=T1;
    do while tb1<=T2;
        tb2=tb1+T1;
        do while tb2<=T3;
            
            du1 =zeros(tb1,1)|ones(n-tb1,1);
            du2 =zeros(tb2,1)|ones(n-tb2,1);
            
            if model==3;
                x1=ones(n,1)~du1~du2~x~du1.*x~du2.*x;
            else;
                "Error: Only Model 3 is available";
            endif;
            {b,e1,sig2,se,ssr}    = myols(y,x1);
            
            screen off;
            {DF[tb1-T1+1,tb2-T1*2+1],lagadf[tb1-T1+1,tb2-T1*2+1], cv0}  = adf(e1,0,pmax,ic);
            {Zt[tb1-T1+1,tb2-T1*2+1],Za[tb1-T1+1,tb2-T1*2+1], cv1, cv2} = pp(e1,0,bwl,varm);
            screen on;
            
            stat1=minc(minc(DF));
            if stat1<ADF_min;
                
                //first break date
                TB1adf=tb1;
                
                //second break date
                TB2adf=tb2;
                
                //ADF statistic
                ADF_min=stat1;
            endif;
            
            stat2=minc(minc(Zt));
            if stat2<Zt_min;
                
                //first break date
                TB1zt=tb1;
                
                //second break date
                TB2zt=tb2;
                
                //Zt statistic
                Zt_min=stat2;
            endif;
            
            stat3=minc(minc(Za));
            if stat3<Za_min;
                
                // first break date
                TB1za=tb1;
                
                //second break date
                TB2za=tb2;
                
                //Zalpha statistic
                Za_min=stat3;
            endif;
            
            tb2=tb2+1;
        endo;
        tb1=tb1+1;
    endo;
    
    TB2adf= rows(x)*(minindc(minc(DF))+T1-1)/n;
    TB2zt = rows(x)*(minindc(minc(Zt))+T1-1)/n;
    TB2za = rows(x)*(minindc(minc(Za))+T1-1)/n;
    
    k = cols(x);
    { cvADFZt, cvZa } = cv_coint_hatemiJ(k);
        
    // Printing   
    _printHeaderTSPDLIB(0, varm, "Regime shift", 2, trimm, "Hatemi-J", "No cointegration", 0);

    // Print results
    local side, top, stats, dec, colwidth;
    side = "ADF:"$|"Zt:"$|"Za:";
    top = ""$~"Test";
    stats = (ADf_min|Zt_min|Za_min);
    dec = 3;
    colwidth = 15;
    
    _printStatsTable(top, side, stats, cvADFZt~cvADFZt~cvZa, dec, colwidth, 0);
    
    // Print breaks
    fracZa = (TB1za/rows(y))|(TB2za/rows(y));
    fracZt = (TB1zt/rows(y))|(TB2zt/rows(y));
    fracADF = (TB1adf/rows(y))|(TB2adf/rows(y));
    
    if ismiss(dt_vec) != 1;
        TBza = dt_vec[TB1za]|dt_vec[TB2za];
        TBzt = dt_vec[TB1zt]|dt_vec[TB2zt];
        TBadf = dt_vec[TB1adf]|dt_vec[TB2adf];
    else;
        TBza = TB1za|TB2za;
        TBzt = TB1zt|TB2zt;
        TBadf = TB1adf|TB2adf;
    endif;
    
    sprintf("%s", "ADF estimated break dates:");
   print "==============================================================";
    _printBreaks(dt_vec, TBadf, fracADF, 0);
    print;
    
    print "Zt test results:";
    print "==============================================================";
    _printBreaks(dt_vec, TBzt, fracZt, 0);
    print;
    
    print "Za test results:";
    print "==============================================================";
    _printBreaks(dt_vec, TBza, fracZa, 0);
    print;
    
    print "ADF test results:";
    _printConclusion(ADF_min, cvADFZt, 0, "no co-integration");
    print "==============================================================";
    print "Zt test results:";
    _printConclusion(Zt_min, cvADFZt, 0, "no co-integration");
    print "==============================================================";
    print "Za test results:";
    _printConclusion(Za_min, cvZa, 0, "no co-integration");
    print "==============================================================";
    
    retp(ADF_min, TB1adf, TB2adf, Zt_min, TB1zt, TB2zt, Za_min, TB1za, TB2za, cvADFZt, cvZa);
endp;



proc(2)=cv_coint_hatemiJ(k);
    local cvADFzt,cvZa;
    if k==1;
        cvADFZt=-6.503|-6.015|-5.653;
        cvZa= -90.704|-76.003|-52.232;
    endif;
    if k==2;
        cvADFZt=-6.928|-6.458|-6.224;
        cvZa= -99.458|-83.644|-76.806;
    endif;
    if k==3;
        cvADFZt=-7.833|-7.352|-7.118;
        cvZa= -118.577|-104.860|-97.749;
    endif;
    if k==4;
        cvADFZt=-8.353|-7.903|-7.705;
        cvZa= -140.135|-123.870|-116.169;
    endif;
    
    if k<5;
        retp(cvADFZt, cvZa);
    else;
        print "Hatemi-J cointegration test critical values unavailable for k>4";
        retp(error(0), error(0));
    endif;
endp;
