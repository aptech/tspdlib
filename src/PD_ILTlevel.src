
/*
**> PD_ILTlevel
**  Reference:
**  Im, K., Lee, J., Tieslau, M. (2005),
**  "Panel LM Unit-root Tests with Level Shifts",
**  Oxford Bulletin of Economics and Statistics 67, 393-419.
**
**  Format:  {Nlm, Ntb, Np, PDlm, pval} = PDLM(y, model[, nbreak, pmax, ic, trimm]);
**
**  Input:   Y	     -  TxN matrix, data,
**
**           model   - 	1 = level break model
**                      2 = level and trend break model
**                      
**      	 nbreak  - 	Optional, number of breaks are allowed
**                      0 = no break test
**                      1 = one break  test
**                      2 = two breaks test
**                      Default = 0;
**
**           pmax    -  Optional, maximum number of lags for Dy; 0=no lags
**                      Default = 8;
**
**           ic      -  Optional, information criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**                      Default = 3;
**
**			 trimm   - 	Optional, trimming rate
**                      Default 10% trimmage is defined as in ZA (1992) and LS (2003).
**
**
**  Output:  Nlm     - minimum test statistic for each cross-section
**
**			 Ntb     - location of break(s) for each cross-section
**
**			 Np      - number of lags selected by choosen information criterion for each cross-section
**
**			 PDlm    - Panel LM statistic with N(0,1)
**
**           pval    - p-value of PDlm
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc(5) = PDLM(y, model, ...);
    local nbreak, pmax, ic, trimm;
    
    // Get defaults
    { nbreak, pmax, ic, trimm } = dynargsGet(1|4, 0, 8, 3, 0.10);
    
    // Call function
    if model == 1;
        retp(PDLMlevel(y, model, pmax, ic, trimm, nbreak));
    elseif model == 2;
        retp(PDLMtrend(y, model, pmax, ic, trimm, nbreak));
    else;
        errorlog "'PDLM': Invalid model specification.";
        end;
    endif;
   
endp;

/*
**> PD_ILTlevel
**  Reference:
**  Im, K., Lee, J., Tieslau, M. (2005),
**  "Panel LM Unit-root Tests with Level Shifts",
**  Oxford Bulletin of Economics and Statistics 67, 393-419.
**
**  Format:  {Nlm, Ntb, Np, PDlm, pval} = PDLMlevel(y, model, pmax, ic, trimm, nbreak);
**
**  Input:   Y	     -  TxN matrix, data,
**
**           model   - 	1= level break model
**
**           pmax    -  Maximum number of lags for Dy; 0=no lags
**                      Default = 8;
**
**           ic      -  Information Criterion:
**                      1=Akaike
**                      2=Schwarz
**                      3=t-stat significance
**
**			 trimm   - 	Trimming rate
**                      Default 10% trimmage is defined as in ZA (1992) and LS (2003).
**
**      	 nbreak  - 	number of breaks are allowed
**                      0= no break test
**                      1= one break  test
**                      2= two breaks test
**
**  Output:  Nlm     - minimum test statistic for each cross-section
**			 Ntb     - location of break(s) for each cross-section
**			 Np      - number of lags selected by choosen information criterion for each cross-section
**			 PDlm    - Panel LM statistic with N(0,1)
**           pval    - p-value of PDlm
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/


proc(5) = PDLMlevel(y, model, pmax, ic, trimm, nbreak);
    local n, t, Nlm, Ntb, Np, i;
    local LMtau, tb1, tb2, p, lambda, cv;
    local meanp, varp, PD_lm;
    
    n  = cols(y);
    t  = rows(y);
    Nlm = zeros(N, 1);
    Np = zeros(N, 1);
    
    // Run panel LM test with level shifts
    "Panel LM test with level shifts";
    if nbreak == 0;
        Ntb = zeros(N, 1);
        print "No breaks implemented.";
        print;
        
        for i(1, N, 1);
            screen off;
            {LMtau, p, cv} = LM(y[., i], pmax, ic);
            screen on;

            Nlm[i] = LMtau;
            Np[i]  = p;
        endfor;
        
    endif;
    
    if nbreak == 1;
        Ntb = zeros(N, 1);
        print "Testing with one break.";
        print;
        for i(1, N, 1);
            screen off;
                {LMtau, tb1, p, lambda, cv} = LM_1break(y[., i], model, pmax, ic, trimm);
            screen on;
            // i~LM~tb1~p;
            Nlm[i] = LMtau;
            Ntb[i] = tb1;
            Np[i] = p;
        endfor;
        
    endif;
    
    if nbreak == 2;
        Ntb = zeros(N, 2);
        print "Testing with two breaks.";
        print;
        
        for i(1, N, 1);
            screen off;
                {LMtau, tb1, tb2, p, cv} = LM_2breaks(y[., i], model, pmax, ic, trimm);
            screen on;
            Nlm[i] = LMtau;
            Ntb[i, 1] = tb1;
            Ntb[i, 2] = tb2;
            Np[i] = p;
        endfor;
        
    endif;
    
    {meanp, varp} = _get_ILTmoments(T, N, Nlm, Np);
    PD_lm = sqrt(n) * (meanc(Nlm) - meanp)/sqrt(varp);
    
    // Print results
    local top;
    if nbreak == 0;
        top = "Group"$~"Ind. Test"$~"Lags";
        #ifminkernelversion(20)
            sprintf("%15s", top);
            sprintf("%14.0f %14.4f %14.0f", seqa(1, 1, cols(y)), Nlm, Np);
        #else
            top$|(ntos(seqa(1, 1, cols(y))~Nlm~Np, 4));
        #endif;    
    elseif nbreak == 1;
        top = "Group"$~"Ind. Test"$~"Break"$~"Lags";
        #ifminkernelversion(20)
            sprintf("%15s", top);
            sprintf("%14.0f %14.4f %14.0f %14.0f", seqa(1, 1, cols(y)), Nlm, Ntb, Np);
        #else
            top$|(ntos(seqa(1, 1, cols(y))~Nlm~Ntb~Np, 4));
        #endif;     
    elseif nbreak == 2;
        top = "Group"$~"Ind. Test"$~"Break 1"$~"Break 2"$~"Lags";
        #ifminkernelversion(20)
            sprintf("%15s", top);
            sprintf("%14.0f %14.4f %14.0f %14.0f", seqa(1, 1, cols(y)), Nlm, Ntb, Np);
        #else
            top$|(ntos(seqa(1, 1, cols(y))~Nlm~Ntb~Np, 4));
        #endif;
        endif;

    "Panel LM test statistic:";
    #ifminkernelversion(20)
        sprintf("%14s %14.4f", "PDLM"$|"p-val", PD_lm|(1 - cdfnc(PD_lm)));
    #else;
        ("PDLM"$|"p-val")~ntos(PD_lm|(1 - cdfnc(PD_lm)), 4);
    #endif;    
    print;
    
    retp(Nlm, Ntb, Np, PD_lm, 1 - cdfnc(PD_lm));
endp;

proc(2) = _get_ILTmoments(T, N, Nlm, Np);
    local fname, crit, row_n, panel_k, meanp, varp, optk, ct1, ct2, ct;
    
    // Reading critical values
    fname = __FILE_DIR $+ "/ILTlevel_crit.tsv";
    
    //    load crit[27, 19] = ^fname;
    
    
    // Row location
    if T < 10;
        row_n = 1;
    endif;
    
    if T > 10 and T < 25;
        row_n = T - 10 + 1;
    endif;
    
    if T > 24 and T < 28;
        row_n = 16;
    endif;
    
    if T > 27 and T < 33;
        row_n = 17;
    endif;
    
    if T > 32 and T < 38;
        row_n = 18;
    endif;
    
    if T > 37 and T < 43;
        row_n = 19;
    endif;
    
    if T > 42 and T < 48;
        row_n = 20;
    endif;
    
    if T > 47 and T < 53;
        row_n = 21;
    endif;
    
    if T > 54 and T < 65;
        row_n = 22;
    endif;
    
    if T > 64 and T < 75;
        row_n = 23;
    endif;
    
    if T > 74 and T < 85;
        row_n = 24;
    endif;
    
    if T > 84 and T < 95;
        row_n = 25;
    endif;
    
    if T > 94 and T < 150;
        row_n = 26;
    endif;
    
    if T > 149;
        row_n = 27;
    endif;
    
    panel_k = Np;
    meanp = 0;
    varp = 0;
    
    crit = csvReadM(fname, row_n|row_n, 1, "\t");
    
    for mmm(1, N, 1);
        // column location
        if panel_k[mmm] > 8;
            optk = 8;
        else;
            optk = panel_k[mmm];
        endif;
        
        ct1 = crit[.,2+2*optk];
        ct2 = crit[.,3+2*optk];
        ct = ct1~ct2;
        
        meanp = meanp + crit[.,2+2*optk];
        varp = varp + crit[.,3+2*optk];
    endfor;
    
    meanp = meanp/n;
    varp = varp/n;
    
    retp(meanp, varp);
endp;
