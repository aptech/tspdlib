
/*
**> pp
**  Reference:
**  Phillips, P.C.B., Perron, P. (1988).
**  Testing for a unit root in time series regressions.
**  Biometrica 75, 335-346.
**
**  Perron, P., & Ng, S. (1996).
**  Useful modifications to some unit root tests with dependent errors and their local asymptotic properties.
**  The Review of Economic Studies, 63(3), 435-463.
**
**  Format:  {Zt, Za, cvZt, cvZa} = PP(y, model, l, varm);
**
**  Input:   Y	     -  Nx1 matrix, data,
**
**           model   - 	0 = none
**                      1 = model with constant
**                      2 = model with constant and trend
**
**           l       -  Optional, bandwidth for spectral window
**                      Default = round(4 * (T/100)^(2/9)).
**
**           varm    -  Optional, long-run consistent variance estimation method
**                      1 = iid;
**                      2 = Bartlett
**                      3 = Quadratic Spectral (QS);
**                      4 = SPC with Bartlett /see (Sul, Phillips & Choi, 2005)
**                      5 = SPC with QS;
**                      6 = Kurozumi with Bartlett
**                      7 = Kurozumi with QS
**                      Default = 1;
**
**                      Updated from Carrion-i-Silvestre & Sanso (2007) GAUSS codes.
**                      See:
**                      Carrion-i-Silvestre, J. L., & Sanso, A. (2006).
**                      A guide to the computation of stationarity tests.
**                      Empirical Economics, 31(2), 433.
**
**  Output:  Zt & Za  -  PP tests
**           cvZt     -  1, 5, and 10 percent critical values for PP Zt-stat
**           cvZa     -  1, 5, and 10 percent critical values for PP Za-stat
**
**  Author: Saban Nazlioglu
-- The author makes no performance guarantees.
-- for public non-commercial use only.
-- for any bugs, please send e-mail to snazlioglu@pau.edu.tr
**
*/

proc(4) = PP(y, model, ...);
    local t, dy, ly, dc, dt, dep, y1, sbt, trnd, x;
    local tau, g0, lrv, Zt, lambda, mbaryy, Za;
    local b, e, e1, s2, se, ssr, cvZt, cvZa, l_dftl, l, varm, dt_vec;
    
    { dt_vec, y } =_checkfordate(y);
    
    t = rows(y);
    l_dftl = round(4 * (T/100)^(2/9)); 
    
    // Get optional arguments
    { l, varm } = dynargsGet(1|2, l_dftl, 1);
    
    dy = diff(y, 1);
    ly = lagn(y, 1);
    
    "Phillips-Perron Test";
    print;
    // Deterministic term=constant
    dc = ones(t, 1);
    
    // Deterministic term=trend
    dt = seqa(1, 1, t);
    
    dep = trimr(dy, 1, 0);
    y1 = trimr(ly, 1, 0);
    sbt = trimr(dc, 1, 0);
    trnd = trimr(dt, 1, 0);
    
    if model == 0;
        x = y1;
    elseif model == 1;
        x = y1~sbt;
    elseif model == 2;
        x = y1~sbt~trnd;
    endif;
    
    { b, e, s2, se, ssr} = myols(dep, x);
    tau = b[1]/se[1];
    
    // Residual variance as in Eviews
    t = rows(e);
    g0 = (t - cols(x)) * s2 * 1/t;
    e1 = e;
    
    lrv = _get_lrv_type(varm, ssr, e1, l, 1);
    
    // Eviews
    Zt = tau * sqrt(g0/lrv) - t * (lrv - g0) * se[1]/(2 * sqrt(lrv) * sqrt(s2));
    lambda = 1/2 * (lrv - g0);
    mbaryy = (t * se[1]/sqrt(s2))^2;
    
    // Stata
    Za = t * b[1] - lambda * mbaryy;
    
    cvZt = _get_cv_Zt(model, T);
    cvZa = _get_cv_Za(model, T);
    
    @
    // Modified test in Perron & Ng (1996)
    yols = dep - x * b;
    K   = sumc(yols^2)/t^2;
    MZa = (t^-1 * yols[t]^2 - lrv)/(2 * k);
    MSB = (k/lrv)^(1/2);
    MZt = MZa * MSB;
    retp(Zt, Za, MZt, MZa, MSB);
    @
           
    _printHeaderTSPDLIB(0, varm, 1, model, 0, 0, "PP", "Unit root", 0);
   
    // Print results
    local top, side, stats, dec, colwidth;
    top = ""$~"Stat";
    side = "Zt:"$|"Za:";
    stats = Zt|Za;
    dec = 3;
    colwidth = 15;
                             
    _printStatsTable(top, side, stats, (cvZt|cvZa)', dec, colwidth, 1);
    "Zt test conclusion:";
    _printConclusion(Zt, cvZt, 0, "unit root");
     "Za test conclusion:";
    _printConclusion(Za, cvZa, 0, "unit root");
  
    retp(Zt, Za, cvZt, cvZa);
endp;


// Critical Values (see Fuller, 1976, Table 5.3)
proc(1) = _get_cv_Zt(model, T);
    local crit, cv;
    
    if model == 0;
        crit = {-2.66 -1.95 -1.60,      @ T = 25  @
            -2.62 -1.95 -1.61,      @ T = 50  @
            -2.60 -1.95 -1.61,      @ T = 100 @
            -2.58 -1.95 -1.62,      @ T = 250 @
            -2.58 -1.95 -1.62,      @ T = 500 @
            -2.58 -1.95 -1.62,      @ T = 750 @
            -2.58 -1.95 -1.62};     @ T = inf @
    endif;
    
    if model == 1;
        crit = {-3.75 -2.99 -2.64,      @ T = 25  @
            -3.59 -2.93 -2.60,      @ T = 50  @
            -3.50 -2.90 -2.59,      @ T = 100 @
            -3.46 -2.88 -2.58,      @ T = 250 @
            -3.44 -2.87 -2.57,      @ T = 500 @
            -3.43 -2.87 -2.57,      @ T = 750 @
            -3.42 -2.86 -2.57};     @ T = inf @
    endif;
    
    if model == 2;
        crit = {-4.38 -3.60 -3.24,      @ T = 25  @
            -4.15 -3.50 -3.18,      @ T = 50  @
            -4.04 -3.45 -3.15,      @ T = 100 @
            -3.98 -3.42 -3.13,      @ T = 250 @
            -3.97 -3.42 -3.13,      @ T = 500 @
            -3.96 -3.41 -3.13,      @ T = 750 @
            -3.96 -3.41 -3.13};     @ T = inf @
    endif;
    
    if            T <= 25;
        cv = crit[1,.];
    endif;
    if 25 < T and T <= 50;
        cv = crit[2,.];
    endif;
    if 50 < T and T <= 100;
        cv = crit[3,.];
    endif;
    if 100< T and T <= 250;
        cv = crit[4,.];
    endif;
    if 250< T and T <= 500;
        cv = crit[5,.];
    endif;
    if 500< T and T <= 750;
        cv = crit[6,.];
    endif;
    if 750 < T            ;
        cv = crit[7,.];
    endif;
    
    retp(cv);
endp;


// Critical Values (see Fuller, 1976, Table 5.2)
proc(1) = _get_cv_Za(model, T);
    local crit, cv;
    
    if model == 0;
        crit = {-11.87 -7.32 -5.32,      @ T = 25  @
            -12.82 -7.69 -5.52,      @ T = 50  @
            -13.30 -7.88 -5.61,      @ T = 100 @
            -13.59 -7.99 -5.67,      @ T = 250 @
            -13.69 -8.03 -5.69,      @ T = 500 @
            -13.72 -8.04 -5.70,      @ T = 750 @
            -13.78 -8.07 -5.71};     @ T = inf @
    endif;
    
    if model == 1;
        crit = {-17.22 -12.47 -10.23,      @ T = 25  @
            -18.94 -13.29 -10.75,      @ T = 50  @
            -19.81 -13.70 -11.00,      @ T = 100 @
            -20.32 -13.95 -11.16,      @ T = 250 @
            -20.50 -14.03 -11.21,      @ T = 500 @
            -20.55 -14.06 -11.23,      @ T = 750 @
            -20.67 -14.11 -11.26};     @ T = inf @
    endif;
    
    if model == 2;
        crit = {-22.51 -17.89 -15.55,      @ T = 25  @
            -22.65 -19.70 -16.84,      @ T = 50  @
            -27.33 -20.64 -17.50,      @ T = 100 @
            -28.42 -21.25 -17.93,      @ T = 250 @
            -28.84 -21.47 -18.08,      @ T = 500 @
            -29.00 -21.56 -18.13,      @ T = 750 @
            -29.47 -21.78 -18.28};     @ T = inf @
    endif;
    
    if            T <= 25;
        cv = crit[1,.];
    endif;
    if 25 < T and T <= 50;
        cv = crit[2,.];
    endif;
    if 50 < T and T <= 100;
        cv = crit[3,.];
    endif;
    if 100< T and T <= 250;
        cv = crit[4,.];
    endif;
    if 250< T and T <= 500;
        cv = crit[5,.];
    endif;
    if 500< T and T <= 750;
        cv = crit[6,.];
    endif;
    if 750 < T            ;
        cv = crit[7,.];
    endif;
    
    retp(cv);
endp;
